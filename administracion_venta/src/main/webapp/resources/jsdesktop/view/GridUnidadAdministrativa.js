Ext.define('MyDesktop.view.GridUnidadAdministrativa', {	 extend: 'Ext.grid.Panel',	    requires: [	        'Ext.grid.column.Action',	        'Ext.grid.plugin.CellEditing',	        'Ext.form.field.Text',	        'Ext.toolbar.TextItem'	    ],	    stateful: true,	    collapsible: false,	    multiSelect: true,	    stateId: 'stateGridUnidadAdministrativa',	    viewConfig: {	        stripeRows: true,	        enableTextSelection: true	    },		id:undefined,		isConsulta:false,		myScope:undefined,	    initComponent: function () {			this.myScope = this;			//Si el grid no es de consulta entonces muestra la barra para administrar los datos			if (!this.isConsulta){				 this.editing = Ext.create('Ext.grid.plugin.CellEditing',{clicksToEdit: 1});				 this.plugins = this.editing;				 				 this.tbar=[														{ text: 'Salvar Cambios',iconCls: 'reload_blue',handler:this.saveInfo, scope:this.myScope },														{xtype: 'tbfill'},							{ text: 'Agregar',iconCls: 'agregar',handler:this.agregar, scope:this.myScope },							{xtype:'tbseparator'},							{ text: 'Borrar',iconCls: 'borrar',handler:this.eliminar,scope:this.myScope }											];			}						this.store = Ext.create('MyDesktop.store.StoreUnidadAdministrativa',{});			this.selType= 'checkboxmodel';	        this.columns = [													{text     : 'Clave',width: 80,								sortable : true,dataIndex: 'clave',								field: {										xtype: 'myUpperCaseTextField',					                    maxLength:20,					                    minLength:1,					                    required:true,					                    enforceMaxLength:true					                    					                    					            }									},							{text     : 'Nombre',width: 200,sortable : true,dataIndex: 'nombre',								field: {									xtype: 'myUpperCaseTextField',				                    maxLength:30,				                    minLength:1,				                    required:true,				                    enforceMaxLength:true				                    				                    								}								},							{text     : 'Descripcion',width: 200,sortable : true,dataIndex: 'descripcion',								field: {									xtype: 'myUpperCaseTextField',				                    maxLength:30,				                    minLength:1,				                    required:true,				                    enforceMaxLength:true				                    				                    								}								}																									];				this.callParent();	    },		agregar:function(){			  var rec = new MyDesktop.models.ModeloUnidadAdministrativa({				  identificador: 0,				  clave:'',				  descripcion: '',				  nombre:'',				  precio:0.0,				  tipo:'0'		        }), edit = this.editing;		      edit.cancelEdit();		      this.store.insert(0, rec);		        edit.startEditByPosition({		            row: 0,		            column: 1		      });		        		},		modificar:function(){			var rows =  this.getView().getSelectionModel().getSelection();	     	if(rows.length <=0){	     		Ext.Msg.alert('Verificar',"Debe de Seleccionar solo un registro para modificar");	     		return;	     	}			if(rows.length >1){	     		Ext.Msg.alert('Verificar',"Seleccione solamente un registro a modificar");	     		return;	     	}					},						eliminar:function(){			var rows =  this.getView().getSelectionModel().getSelection();	     	if(rows.length <=0){	     		 Ext.Msg.alert('Verificar',"Seleccione los registros que desea eliminar");	     		return;	     	}	    	var myscope =this;	    	 Ext.MessageBox.confirm('Confirmacion', 'Desea borrar los registros seleccionados?', function(id, text){	       		if ( (id === 'yes')  || (id === 'si') || (id === 'y' ) || (id === 's' ) ){ 	       			if(rows.length === 0){  //step 3	       				return ;	       			}	       			var store = this.getView().getStore();	       			store.remove(rows);  //step 4	       			var scope_this = this;	       			store.sync({ 	       			    success: function (proxy, operations) {	       			    	scope_this.commitInfo();	       			    	myscope.buscar();	       			    }, failure: function (proxy, operations) {	       			    	 if (proxy.exceptions != undefined){	       			    		 if (proxy.exceptions.length>0){	       			    			 Ext.Msg.show(	    	                                 {	    	                                	 title: 'Warning',	    	                                     msg: proxy.exceptions[0].error,	    	                                     buttons: Ext.Msg.OK,	    	                                     icon: Ext.Msg.WARNING	    	                                 });	       			    		 	}	       			    		 }	       			        store.rejectChanges();	       			    }	       			});	       		}	       	 },this);	     	 							},		showDetails:function(){					var rows =  this.getView().getSelectionModel().getSelection();	     	if(rows.length <=0){	     		Ext.Msg.alert('Verificar',"Debe de Seleccionar solo un registro para visualizar");	     		return;	     	}			if(rows.length >1){	     		Ext.Msg.alert('Verificar',"Seleccione solamente un registro a visualizar");	     		return;	     	}				},		loadInfo:function(){			this.getView().getStore().load();				},		commitInfo:function(){			this.getView().getStore().save( );			this.getView().getStore().commitChanges();				},		saveInfo:function(){			/*this.getView().getStore().save( );			this.getView().getStore().commitChanges();			this.loadInfo();*/			updateSyncStore(this,this.getView().getStore(), true);				},		getRowsSelected:function(){			return this.getView().getSelectionModel().getSelection();		}	});