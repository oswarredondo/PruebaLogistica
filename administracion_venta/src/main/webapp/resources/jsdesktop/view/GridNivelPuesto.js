Ext.define('MyDesktop.view.GridNivelPuesto', {    extend: 'Ext.grid.Panel',    requires: [        'Ext.grid.column.Action',        'Ext.grid.plugin.CellEditing',        'Ext.form.field.Text',        'Ext.toolbar.TextItem'    ],    stateful: true,    collapsible: false,    multiSelect: true,    stateId: 'stateGridNivelPuesto',    login:undefined,    viewConfig: {        stripeRows: true,        enableTextSelection: true    },    idagrupamiento:undefined,	isConsulta:false,	myScope:undefined,    initComponent: function () {    	var store_busqueda=Ext.create('MyDesktop.store.StoreNivelPuestoUsuario',{});		this.myScope = this;		//Si el grid no es de consulta entonces muestra la barra para administrar los datos		if (!this.isConsulta){			 this.editing = Ext.create('Ext.grid.plugin.CellEditing',{clicksToEdit: 1});			 this.plugins = this.editing;			 			 this.tbar=[												{ text: 'Salvar Cambios',iconCls: 'reload_blue',handler:this.commitInfo, scope:this.myScope },												{xtype: 'tbfill'},						{ text: 'Agregar',iconCls: 'agregar',handler:this.agregar, scope:this.myScope },						{xtype:'tbseparator'},						{ text: 'Borrar',iconCls: 'borrar',handler:this.eliminar,scope:this.myScope }									];		}						this.store = Ext.create('MyDesktop.store.StoreNivelPuestoUsuario',{});		var store_sino = Ext.create('MyDesktop.store.StoreSINO',{}) ;		this.selType= 'checkboxmodel';        this.columns = [						{text     : 'Clave',width: 80,							sortable : true,dataIndex: 'idnivelusuario',							field: {									xtype: 'numberfield',						            required:true				            						    }								},						{text     : 'Descripcion',width: 200,sortable : true,dataIndex: 'descripcion',							field: {								xtype: 'myUpperCaseTextField',						        maxLength:30,						        minLength:1,						        required:true,						        enforceMaxLength:true						        						        							}							},						{				            text: 'Visible Siempre',				            dataIndex: 'visiblesiempre',				            sortable : true,				            width: 170,				            renderer: function (value, metaData, record, rowIndex, colIndex, store) {								var myrecord=undefined;								if (store_sino.getCount() > 0) {									store_sino.each(function(r) {										if (r.data['identificador'] == value) {											myrecord = r;										}									});								}								if (myrecord!=undefined){									return myrecord.get('descripcion');								}								return value;							},				            editor: {				            	  xtype: 'combobox',					                name: 'visiblesiempre',					                store: Ext.create('MyDesktop.store.StoreSINO',{}) ,					                valueField: 'identificador',					                displayField: 'descripcion',									enforceMaxLength:true,									maxLength:30,					                typeAhead: true,					                queryMode: 'local',					                allowBlank: false,					                emptyText: ''				            }						},						{text     : 'Max.Desc.Adic.',width: 200,sortable : true,dataIndex: 'maxdescadicional',							field: {								xtype: 'numberfield',								maxValue:99.99,								minValue:0,						        required:true							}							},						{text     : 'Max.Desc.Tarifas.',width: 200,sortable : true,dataIndex: 'maxdescadicional',							field: {								xtype: 'numberfield',								maxValue:99.99,								minValue:0,						        required:true							}							}			];			this.callParent();    },	agregar:function(){		   		  var rec = new MyDesktop.models.ModeloNivelPuestoUsuario({			  identificador: 0,			  idnivelusuario: -1,			  descripcion:'',			  visualizatodo: 1,			  maxdescadicional:0,			  maxdesctarifas:0	        }), edit = this.editing;	      edit.cancelEdit();	      this.store.insert(0, rec);	        edit.startEditByPosition({	            row: 0,	            column: 1	      });	        	},	modificar:function(){		var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		Ext.Msg.alert('Verificar',"Debe de Seleccionar solo un registro para modificar");     		return;     	}		if(rows.length >1){     		Ext.Msg.alert('Verificar',"Seleccione solamente un registro a modificar");     		return;     	}			},			eliminar:function(){				var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		 Ext.Msg.alert('Verificar',"Seleccione los registros que desea eliminar");     		return;     	}		    	 Ext.MessageBox.confirm('Confirmacion', 'Desea borrar los registros seleccionados?', function(id, text){       		if ( (id === 'yes')  || (id === 'si') || (id === 'y' ) || (id === 's' ) ){        			if(rows.length == 0){  //step 3       				return ;       			}       			var store = this.getView().getStore();       			//Elimina los registros seleccionados       		         			deleteSyncStoreReloadParams(this, store, rows,{} );       		}       	 },this);    	 			},	loadInfo:function(){		var store = this.getView().getStore();		store.reload({			params:{							}					});	},	commitInfo:function(){		var store = this.getView().getStore();		updateSyncStoreReloadParams(this,store,{} );		},	saveInfo:function(){		var store = this.getView().getStore();		updateSyncStoreReloadParams(this,store,{} );		},	getRowsSelected:function(){		return this.getView().getSelectionModel().getSelection();	}	});