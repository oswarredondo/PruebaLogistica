Ext.define('MyDesktop.view.FormLocalizacion', {    extend: 'Ext.form.Panel',    requires: [        'Ext.data.*',        'Ext.form.*' //,        //'KitchenSink.model.State'    ],    xtype: 'form-checkout',            frame: false,	border: false,   // title: 'Contacto',    bodyPadding: 5,    showReadOnly:false,    initComponent: function(){        		        this. buttons= [{hidden: this.showReadOnly,            text: 'Limpiar',iconCls:'limpiar_white',            scope: this,            handler: this.onResetClick        }, {			hidden: this.showReadOnly,            text: 'Guardar',iconCls:'activo',            scope: this,            handler: this.onCompleteClick        }];		        Ext.apply(this, {            width: 550,            fieldDefaults: {                labelAlign: 'right',                labelWidth: 90,                msgTarget: 'qtip'            },				defaultType: 'textfield',			 items: [					{fieldLabel: 'Tel. Oficina', name: 'telefono1',width: 250,emptyText: 'xxx-xxx-xxxx',										maskRe: /[\d\-]/,regex: /^\d{3}-\d{3}-\d{4}$/,regexText: 'Formato debe ser xxx-xxx-xxxx'},					{fieldLabel: 'Tel. Celular', name: 'telefono',width: 250,emptyText: 'xxx-xxx-xxxx',										maskRe: /[\d\-]/,regex: /^\d{3}-\d{3}-\d{4}$/,regexText: 'Formato debe serxxx-xxx-xxxx'},					{fieldLabel: 'Fax', name: 'fax',width: 250,emptyText: 'xxx-xxx-xxxx',										maskRe: /[\d\-]/,regex: /^\d{3}-\d{3}-\d{4}$/,regexText: 'Formato debe ser xxx-xxx-xxxx'},													{fieldLabel: 'Radio', name: 'radio',width: 250,emptyText: 'xxx-xxx-xxxx',										maskRe: /[\d\-]/,regex: /^\d{3}-\d{3}-\d{4}$/,regexText: 'Formato debe ser xxx-xxx-xxxx'},					{fieldLabel: 'Email',name: 'email',vtype: 'email',allowBlank: false,width: 400},					{fieldLabel: 'Twitter',name: 'twitter',allowBlank: false,width: 400},					{fieldLabel: 'Pag. Web',name: 'paginaweb',allowBlank: false,width: 400}														]            });        this.callParent();    },        onResetClick: function(){        this.getForm().reset();    },        onCompleteClick: function(){        var form = this.getForm();        if (form.isValid()) {            Ext.MessageBox.alert('Submitted Values', form.getValues(true));        }    },        onMailingAddrFieldChange: function(field){        /*var copyToBilling = this.down('[name=billingSameAsMailing]').getValue(),            copyField = this.down('[name=' + field.billingFieldName + ']');        if (copyToBilling) {            copyField.setValue(field.getValue());        } else {            copyField.clearInvalid();        }*/    },        /**     * Enables or disables the billing address fields according to whether the checkbox is checked.     * In addition to disabling the fields, they are animated to a low opacity so they don't take     * up visual attention.     */    onSameAddressChange: function(box, checked){      /*  var fieldset = box.ownerCt;        Ext.Array.forEach(fieldset.previousSibling().query('textfield'), this.onMailingAddrFieldChange, this);        Ext.Array.forEach(fieldset.query('textfield'), function(field) {            field.setDisabled(checked);            // Animate the opacity on each field. Would be more efficient to wrap them in a container            // and animate the opacity on just the single container element, but IE has a bug where            // the alpha filter does not get applied on position:relative children.            // This must only be applied when it is not IE6, as it has issues with opacity when cleartype            // is enabled            if (!Ext.isIE6) {                field.el.animate({opacity: checked ? 0.3 : 1});            }        });*/    },	updateCampos:function(record){		//alert(Ext.getCmp(this.id));		var fields = Ext.getCmp(this.id).getForm().getFields( ) ;		this.updateFieldName(record,fields);							},	updateFieldName:function(record, fields){		var items = fields.items;		var valor ="";		for(i = 0; i < items.length; i++){			field = items[i];			if (field!=undefined){				if (field.getName()!=undefined){					//busca el nombre del campo que debe ser el mismo del nombre del campo de 					//la forma					valor = record.get(field.getName());					if (valor!=undefined){						//alert('Campo:' + field.getName() + ', valor:' +valor);						field.setValue(valor);					}else{						field.setValue("");					}								}			}		}	},		updateFieldReadOnly:function(record){			//alert(Ext.getCmp(this.id));		var fields = Ext.getCmp(this.id).getForm().getFields( ) ;				var items = fields.items;		var valor ="";		for(i = 0; i < items.length; i++){			field = items[i];			if (field!=undefined){				if (field.getName()!=undefined){					field.setReadOnly(true);								}			}		}				this.updateCampos(record);	}});