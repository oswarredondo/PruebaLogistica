Ext.define('MyDesktop.view.GridDatosAgrupamiento', {    extend: 'Ext.grid.Panel',    requires: [        'Ext.grid.column.Action',        'Ext.grid.plugin.CellEditing',        'Ext.form.field.Text',        'Ext.toolbar.TextItem'    ],    stateful: true,    collapsible: false,    multiSelect: true,    stateId: 'stateGridDatosAgrupamiento',    login:undefined,    viewConfig: {        stripeRows: true,        enableTextSelection: true    },	id:undefined,	isConsulta:false,	soloGruposParaUsuario:undefined,	myScope:undefined,    initComponent: function () {    	var store_busqueda=Ext.create('MyDesktop.store.StoreAgrupamiento',{});		this.myScope = this;		//Si el grid no es de consulta entonces muestra la barra para administrar los datos		if (!this.isConsulta){			 this.editing = Ext.create('Ext.grid.plugin.CellEditing',{clicksToEdit: 1});			 this.plugins = this.editing;			 			 this.tbar=[												{ text: 'Salvar Cambios',iconCls: 'reload_blue',handler:this.commitInfo, scope:this.myScope },												{xtype: 'tbfill'},						{ text: 'Agregar',iconCls: 'agregar',handler:this.agregar, scope:this.myScope },						{xtype:'tbseparator'},						{ text: 'Borrar',iconCls: 'borrar',handler:this.eliminar,scope:this.myScope }						//,{ text: 'Agregar puestos',iconCls: 'borrar',handler:this.puestosgrupo,scope:this.myScope },															];		}				//Verifica si solo se desean las agrupaciones del usuario en sesion para las fimas		if ((this.soloGruposParaUsuario!=undefined) && (this.soloGruposParaUsuario==true)){			this.store = Ext.create('MyDesktop.store.StoreAgrupamiento',	{				proxy: {			        type: 'ajax',			        api: {			            read: '../usuario/agrupacion/getDatosAgrupacionesDeUsuario'			         },			         reader: {			                  type: 'json',			                  successProperty: 'success',			                  root : 'proxiArray',			                  messageProperty: 'message',			                  totalProperty : 'totalCount',			         }				}			});					}else{			this.store = Ext.create('MyDesktop.store.StoreAgrupamiento',	{});		}						this.selType= 'checkboxmodel';        this.columns = [							{								text     : 'Id',width: 80,								sortable : true,dataIndex: 'idagrupamiento',								field: {										xtype: 'numberfield',							            maxValue:999,							            minValue:1,							            required:true							    }									},							{								text     : 'Descripcion',width: 200,sortable : true,dataIndex: 'descripcion',								field: {									xtype: 'myUpperCaseTextField',							        maxLength:30,							        minLength:1,							        required:true,							        enforceMaxLength:true							        							        								}								},							{								text     : 'Ger. Comercial',width: 200,sortable : true,dataIndex: 'gerentecomercial',								field: {									xtype: 'myUpperCaseTextField',							        maxLength:30,							        minLength:1,							        required:true,							        enforceMaxLength:true							        							        								}								},							{								text     : 'Cred. Cobranza',width: 200,sortable : true,dataIndex: 'creditocobranza',								field: {									xtype: 'myUpperCaseTextField',							        maxLength:30,							        minLength:1,							        required:true,							        enforceMaxLength:true							        							        								}								},														{								text     : 'Dir. Finanzas',width: 200,sortable : true,dataIndex: 'dirfinanzas',								field: {									xtype: 'myUpperCaseTextField',							        maxLength:30,							        minLength:1,							        required:true,							        enforceMaxLength:true							        							        								}								},							{								text     : 'Jefe Zona',width: 200,sortable : true,dataIndex: 'jefezona',								field: {									xtype: 'myUpperCaseTextField',							        maxLength:30,							        minLength:1,							        required:true,							        enforceMaxLength:true							        							        								}								}			];			this.callParent();    },    puestosgrupo:function(){        	var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		mensajeAlert("Debe de Seleccionar solo un registro para modificar");     		return;     	}		if(rows.length >1){			mensajeAlert("Seleccione solamente un registro a modificar");     		return;     	}		alert(rows[0].get('idagrupamiento'));    	var gridnivelpuesto = Ext.create('MyDesktop.view.GridAgrupacionPuesto',{idagrupamiento:rows[0].get('idagrupamiento')});      			var windows_cerrar = Ext.create('widget.window', {			id:'utils-win-agregar-cliente',			title: "Excepciones disponibles",			width: 500,			height: 500,			modal:true,			plain: true,			headerPosition: 'right',			layout: 'fit',			items: gridnivelpuesto		});				windows_cerrar.show();	},	agregar:function(){		   		  var rec = new MyDesktop.models.ModeloAgrupamiento({			  identificador:0,			  idagrupamiento: -1,			  descripcion:'',			  visualizatodo: '',			  jefezona:'',			  dirfinanzas:'',			  creditocobranza:'',			  gerentecomercial:'',	        }), edit = this.editing;	      edit.cancelEdit();	      this.store.insert(0, rec);	        edit.startEditByPosition({	            row: 0,	            column: 1	      });	        	},	modificar:function(){		var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		Ext.Msg.alert('Verificar',"Debe de Seleccionar solo un registro para modificar");     		return;     	}		if(rows.length >1){     		Ext.Msg.alert('Verificar',"Seleccione solamente un registro a modificar");     		return;     	}			},			eliminar:function(){				var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		 Ext.Msg.alert('Verificar',"Seleccione los registros que desea eliminar");     		return;     	}		    	 Ext.MessageBox.confirm('Confirmacion', 'Desea borrar los registros seleccionados?', function(id, text){       		if ( (id === 'yes')  || (id === 'si') || (id === 'y' ) || (id === 's' ) ){        			if(rows.length == 0){  //step 3       				return ;       			}       			var store = this.getView().getStore();       			//Elimina los registros seleccionados       		         			deleteSyncStoreReloadParams(this, store, rows,{} );       		}       	 },this);    	 			},	loadInfo:function(){		var store = this.getView().getStore();		store.reload({			params:{							}					});	},	commitInfo:function(){		var store = this.getView().getStore();		updateSyncStoreReloadParams(this,store,{} );		},	saveInfo:function(){		var store = this.getView().getStore();		updateSyncStoreReloadParams(this,store,{} );		},	getRowSelected:function(){		var rows =  this.getView().getSelectionModel().getSelection();		if(rows.length >=1){			return rows[0];		}		return undefined;	},	getRows:function(){		var rows =  this.getView().getSelectionModel().getSelection();		if(rows.length >=1){			return rows;		}		return undefined;	}	});