Ext.define('MyDesktop.view.FormPerfil', {    extend: 'Ext.form.Panel',    requires: [        'Ext.data.*',        'Ext.form.*' //,        //'KitchenSink.model.State'    ],    xtype: 'form-checkout',    frame: false,	border: false,    bodyPadding: 5,    showReadOnly:false,	identidad:undefined,	idorganizacion:undefined,	idregistro:undefined,	consecutivo:undefined,	operacion:undefined,	grid_consulta:undefined,    initComponent: function(){        var operacion_aplicar = this.operacion;		var myscope=this;		var identidad_fn = this.identidad;		var idorganizacion_fn = this.idorganizacion;        this. buttons= [        {hidden: this.showReadOnly,            text: 'Limpiar',iconCls:'limpiar_white',            scope: this,            handler: this.onResetClick        }, {			hidden: this.showReadOnly,			text: 'Salvar',			disabled: true,			formBind: true,			iconCls:'activo',            handler:function() {				var form = this.up('form').getForm();				if (form.isValid()) {					var out = [];					var myMask = new Ext.LoadMask(Ext.getBody(), {msg:"Agregando información espere..."});					myMask.show();										form.submit({						clientValidation: true,						url: '../perfilopcion/' + operacion_aplicar,						success: function(form, action) {							myMask.hide( );							myMask.disable();														myscope.grid_consulta.reload(identidad_fn, idorganizacion_fn);						},						failure: function(form, action) {							myMask.hide( );							myMask.disable();							if ( (action.result!=undefined) && (action.result.message!=undefined)){								alertMsg('Error' , action.result.message);							}else{								//Busca si existe un response del servier								if (action.response.responseText!=null){									alertMsg(action.response.statusText , action.response.responseText);								}							}													}					});													}else{					alertMsg('Verifique' ,'Complete los campos requeridos.');				}			}        }];                Ext.apply(this, {            width: 550,            fieldDefaults: {                labelAlign: 'right',                labelWidth: 90,                msgTarget: 'qtip'            },            items: [				{					xtype: 'fieldset',					title: 'Informaci�n General',					defaultType: 'textfield',					layout: 'anchor',					defaults: {						anchor: '100%'					},					items: [					    { xtype:'hidden', id:'idconsecutivo',name: 'consecutivo', value:this.consecutivo},						{ xtype:'hidden', id:'idoperacion',name: 'operacion', value:this.operacion},						{ xtype:'hidden', id:'ididentidad',name: 'identidad', value:this.identidad},						{ xtype:'hidden', id:'idorganizacion',name: 'idorganizacion', value:this.idorganizacion},						{  xtype: 'myUpperCaseTextField', fieldLabel: 'Id Perfil', name: 'idperfil', id:'idperfil', 							allowBlank:false,width:300,maxLength:6,enforceMaxLength:true,},						{  xtype: 'myUpperCaseTextField', id:'iddescripcion', fieldLabel: 'Descripción',							name: 'descripcion_perfil',allowBlank:false,width:300,maxLength:60,enforceMaxLength:true}					]				},				{					xtype: 'fieldset',					title: 'Tipos de niveles:',					layout: 'anchor',					defaults: {						anchor: '100%'					},					items: [					        					        {xtype: 'combobox',name: 'nivel',			                    store:Ext.create('MyDesktop.store.StoreTiposPerfiles',{}),			                    valueField: 'idtipo',			                    displayField: 'descripcion',			    				enforceMaxLength:true,			    				maxLength:30,			                    typeAhead: true,			                    queryMode: 'local',			                    allowBlank: false,			                    forceSelection: true,			                    emptyText: 'Seleccione nivel...'			                }					        						 					]				}			]            });        this.callParent();    },        onResetClick: function(){        this.getForm().reset();    },        onCompleteClick: function(){        var form = this.getForm();        if (form.isValid()) {            Ext.MessageBox.alert('Submitted Values', form.getValues(true));        }    },	updateCampos:function(record){		//alert(Ext.getCmp(this.id));		var fields = Ext.getCmp(this.id).getForm().getFields( ) ;		this.updateFieldName(record,fields);							},	updateFieldName:function(record, fields){		var items = fields.items;		var valor ="";		for(i = 0; i < items.length; i++){			field = items[i];			if (field!=undefined){				if (field.getName()!=undefined){					//busca el nombre del campo que debe ser el mismo del nombre del campo de 					//la forma					valor = record.get(field.getName());					if (valor!=undefined){						//alert('Campo:' + field.getName() + ', valor:' +valor);						field.setValue(valor);					}else{						field.setValue("");					}								}			}		}	},		updateFieldReadOnly:function(record){			//alert(Ext.getCmp(this.id));		var fields = Ext.getCmp(this.id).getForm().getFields( ) ;				var items = fields.items;		var valor ="";		for(i = 0; i < items.length; i++){			field = items[i];			if (field!=undefined){				if (field.getName()!=undefined){					field.setReadOnly(true);								}			}		}				this.updateCampos(record);	}});