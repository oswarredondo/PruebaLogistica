Ext.define('MyDesktop.view.GridTarifaPeso', {    extend: 'Ext.grid.Panel',    requires: [        'Ext.grid.column.Action'    ],    stateful: true,    collapsible: false,    multiSelect: true,    stateId: 'stateGridtarifaservicio',    viewConfig: {        stripeRows: true,        enableTextSelection: true    },	//id:undefined,	isConsulta:false,	myScope:undefined,	idtarifa:undefined,	idservicio:undefined,	idformapago:undefined ,	idrangoenvios:undefined,    initComponent: function () {		this.myScope = this;		var me = this;				//Si el grid no es de consulta entonces muestra la barra para administrar los datos		if (!this.isConsulta){			 this.editing = Ext.create('Ext.grid.plugin.CellEditing',{clicksToEdit: 1});			 this.plugins = this.editing;			 			 this.tbar=[				  		{ text: 'Salvar Cambios',iconCls: 'reload_blue',handler:this.saveInfo, scope:this.myScope },					];			 this.bbar=[				  		{ text: 'Zonas',iconCls: 'detalles',handler:this.showDetails,scope:this.myScope },						{xtype: 'tbfill'},							{xtype:'tbseparator'},							{ text: 'Agregar',iconCls: 'agregar',handler:this.filtrar,handler:this.agregar, scope:this.myScope },							{ text: 'Borrar',iconCls: 'borrar',handler:this.eliminar,scope:this.myScope }					];	 		}				this.store = Ext.create('MyDesktop.store.StoreTarifaPeso',				{baseParams:{idtarifa:this.idtarifa,idrangoenvios:this.idrangoenvios}});		this.store.getProxy().setExtraParam("idtarifa", this.idtarifa);		this.store.getProxy().setExtraParam("idrangoenvios", this.idrangoenvios);				this.selType= 'checkboxmodel';        this.columns = [						//{text     : 'Id',width:40,sortable : false,dataIndex: 'idserviciotarifa'},						{text     : 'Nombre',width:200,sortable : true,dataIndex: 'nombre',							field: {								xtype: 'myUpperCaseTextField',			                    maxLength:40,			                    minLength:1,			                    required:true,			                    enforceMaxLength:true							}														},						/*{text     : 'Descripcion',width:200,sortable : false,dataIndex: 'descripcion',							field: {								xtype: 'myUpperCaseTextField',			                    maxLength:40,			                    minLength:1,			                    required:true,			                    enforceMaxLength:true			                    			                    							}								},*/						{text     : 'Peso inicial',width:100,sortable : true,dataIndex: 'pesoinicial',							field: {								xtype: 'numberfield',								value: 1,								maxValue: 9999,			                    required:true,			                    minValue: 1,			                    decimalPrecision:0							}								},						{text     : 'Peso Final',width:100,sortable : false,dataIndex: 'pesofinal',							field: {								xtype: 'numberfield',								value: 1,								maxValue: 9999,			                    required:true,			                    minValue: 1,			                    decimalPrecision:0							}								},						{text     : 'Volumen',width:100,sortable : false,dataIndex: 'volumen',							field: {								xtype: 'numberfield',								value: 1,								maxValue: 9999999,			                    required:true,			                    minValue: 1,			                    decimalPrecision:0							}								}			];                this.dockedItems= [        {            dock: 'right',            xtype: 'toolbar',            items: [                    {xtype: 'label', text:'Calculo de Volumen', labelStyle: 'font-weight:bold'},                    {xtype: 'label', text:'Alto:'},                    {xtype: 'numberfield',value:1, minValue:1, name:'alto', id:'id_alto'+this.id,maxLength:10},                    {xtype: 'label', text:'Ancho:'},                    {xtype: 'numberfield',value:1, minValue:1, name:'ancho', id:'id_ancho'+this.id,maxLength:10},                    {xtype: 'label', text:'Largo:'},                    {xtype: 'numberfield', value:1, minValue:1,name:'largo', id:'id_largo'+this.id,maxLength:10},                    {text: "Calcula Volumen",iconCls:'descuentos_blue', handler:function(){            			var alto = Ext.getCmp('id_alto'+me.id).getValue();            			var ancho = Ext.getCmp('id_ancho'+me.id).getValue();            			var largo = Ext.getCmp('id_largo'+me.id).getValue();            			            			Ext.getCmp('id_volumen'+me.id).setValue(alto*ancho*largo);            	}            ,scope:this },			{xtype: 'label', text:'Volumen:'},			{xtype: 'numberfield', value:1, minValue:1,name:'volumen', id:'id_volumen'+me.id,maxLength:10}            ]        }        ];                				this.callParent();    },	agregar:function(){		  var rec = new MyDesktop.models.ModeloTarifas({			  idserviciotarifa:0,			  idserviciotarifazona:0,			  idtarifa:this.idtarifa,			  idtarifapeso:0,			  idrangoenvios:this.idrangoenvios,			  pesoinicial:1,			  pesofinal:1,			  estatus:1 ,			  pesoamparado:1,			  idrangoinicial:1,			  idrangofinal:1,			  kminicial:1,			  kmfinal:1,			  precio:0,			  volumen:1,			  preciokgsp:0,			  sobrepeso:0,			  idservicio:this.idservicio,			  idformapago:this.idformapago,			  nombre:'',			  descripcion:'',			  zona:'',				  es_visible_pdv:'0'	        }), edit = this.editing;	      edit.cancelEdit();		  var renglon = this.store.count();	      this.store.insert(renglon, rec);	        edit.startEditByPosition({	            row: renglon,	            column: 1	      });	},	modificar:function(){		var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		Ext.Msg.alert('Verificar',"Debe de Seleccionar solo un registro para modificar");     		return;     	}		if(rows.length >1){     		Ext.Msg.alert('Verificar',"Seleccione solamente un registro a modificar");     		return;     	}		},	activar:function(){		var myscope= this;		var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		 Ext.MessageBox.alert('Verificar',"Seleccione los registros que desea activar");     		return;     	}				 Ext.MessageBox.confirm('Confirmar','Desea activar las tarifas seleccionadas?', function(id, text){	       		if ( (id === 'yes')  || (id === 'si') || (id === 'y' ) || (id === 's' ) ){ 	       		//Obtiene todos los registros seleccionados	       			var registros ='';	       			for (i=0;i<rows.length;i++){	       					       				registros = registros+  rows[i].get('idtarifa')+ "|";	       			}	       			var conn = new Ext.data.Connection();	       			conn.request({	       				url: '../tarifas/activar' ,	       				params:{idstarifas:registros},	       				success: function(response, opts) {	       					var obj = Ext.decode(response.responseText);	       				 Ext.MessageBox.alert('Confirmaci�n',obj.message);	       				},	       				failure: function(response, opts) {	       					var obj = Ext.decode(response.responseText);	       					Ext.Msg.alert('Error',obj.message);	       				}	       			});	       		}	       	 },this);					},	desactivar:function(){		var rows =  this.getView().getSelectionModel().getSelection();		var myscope= this;     	if(rows.length <=0){     		 Ext.Msg.alert('Verificar',"Seleccione los registros que desea desactivar");     		return;     	}		     	 Ext.MessageBox.confirm('Confirmar','Desea desactivar las tarifas seleccionadas?', function(id, text){	       		if ( (id === 'yes')  || (id === 'si') || (id === 'y' ) || (id === 's' ) ){ 	       		//Obtiene todos los registros seleccionados	       			var registros ='';	       			for (i=0;i<rows.length;i++){	       					       				registros = registros+  rows[i].get('idtarifa')+ "|";	       			}	       			var conn = new Ext.data.Connection();	       			conn.request({	       				url: '../tarifas/desactivar' ,	       				params:{idstarifas:registros},	       				success: function(response, opts) {	       					var obj = Ext.decode(response.responseText);	       					Ext.Msg.alert('Confirmaci�n',obj.message);	       				},	       				failure: function(response, opts) {	       					var obj = Ext.decode(response.responseText);	       					Ext.Msg.alert('Error',obj.message);	       				}	       			});	       		}	       	 },this);					},	showDetails:function(){		var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		Ext.Msg.alert('Verificar',"Debe de Seleccionar solo un registro que desea visualizar");     		return;     	}		if(rows.length >1){     		Ext.Msg.alert('Verificar',"Seleccione solamente un registro.");     		return;     	}				//Crea una forma de clientes para agregar los datos		var grid_rangos_tarifa_servicio_zona= Ext.create('MyDesktop.view.GridTarifasServicioZona',				{					id:'showdetails_tarifa_servicio_zona',					isConsulta:false,					idserviciotarifa:rows[0].get('idtarifapeso')		}); 		grid_rangos_tarifa_servicio_zona.buscar();		//forma_showdetails.updateFieldReadOnly(rows[0]);		Ext.create('widget.window', {			id:'utils-win-agregar-tarifa-servicio-zona',			title: "Detalles Zona Tarifa Servicio ",			width: 550,			height: 400,			modal:true,			plain: true,			headerPosition: 'right',			layout: 'fit',			items: grid_rangos_tarifa_servicio_zona					}).show();	},	eliminar:function(){		var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		 Ext.Msg.alert('Verificar',"Seleccione los registros que desea eliminar");     		return;     	}    	var myscope =this;    	 Ext.MessageBox.confirm('Confirmacion', 'Desea borrar los registros seleccionados?', function(id, text){       		if ( (id === 'yes')  || (id === 'si') || (id === 'y' ) || (id === 's' ) ){        			if(rows.length == 0){  //step 3       				return ;       			}       			var store = this.getView().getStore();       			store.remove(rows);  //step 4       			var scope_this = this;       			store.sync({        			    success: function (proxy, operations) {       			    	scope_this.commitInfo();       			    	myscope.loadInfo();       			    }, failure: function (proxy, operations) {       			    	 if (proxy.exceptions != undefined){       			    		 if (proxy.exceptions.length>0){       			    			 Ext.Msg.show(    	                                 {    	                                	 title: 'Warning',    	                                     msg: proxy.exceptions[0].error,    	                                     buttons: Ext.Msg.OK,    	                                     icon: Ext.Msg.WARNING    	                                 });       			    		 	}       			    		 }       			        store.rejectChanges();       			    }       			});       			       		}       	 },this);			},	loadInfo:function(){		this.getView().getStore().reload(				{					params:{idtarifa:this.idtarifa},					callback:function(r,options,success){						 if (r.length<=0){							 Ext.Msg.show({								 title: 'Aviso',								 msg: 'No existe información con el criterio de busqueda selecionado.',								 modal: false,								 icon: Ext.Msg.INFO,								 buttons: Ext.Msg.OK													 });  													 }					 }	  				});		},	commitInfo:function(){		this.getView().getStore().save( );		this.getView().getStore().commitChanges();		},	saveInfo:function(){		updateSyncStore(this,this.getView().getStore(), true);		/*this.getView().getStore().save( );		this.getView().getStore().commitChanges();		this.loadInfo();*/		},	buscar:function(){		this.getView().getStore().reload(					{						params:{idtarifa:this.idtarifa},						callback:function(r,options,success){							 if (r.length<=0){								 Ext.Msg.show({									 title: 'Aviso',									 msg: 'No existe informaci�n con el criterio de busqueda selecionado.',									 modal: false,									 icon: Ext.Msg.INFO,									 buttons: Ext.Msg.OK														 });  															 }						 }	  					});		}	});