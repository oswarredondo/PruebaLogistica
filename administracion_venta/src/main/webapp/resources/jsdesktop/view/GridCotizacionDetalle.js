Ext.define('MyDesktop.view.GridCotizacionDetalle', {    extend: 'Ext.grid.Panel',    requires: [        'Ext.grid.column.Action',        'Ext.grid.plugin.CellEditing',        'Ext.form.field.Text',        'Ext.toolbar.TextItem'    ],    stateful: true,    collapsible: false,    multiSelect: true,    stateId: 'stateGridCotizacionDetalle',    viewConfig: {        stripeRows: true,        enableTextSelection: true    },	id:undefined,	isConsulta:false,	myScope:undefined,	maxdescadicional:0,	idconvenio:undefined,	idrangoenvios:undefined,	store_adicionales_actual:undefined,	permiteacceso:true,    initComponent: function () {    	    	//Obtiene el nivel del usuario    	var my_scope= this;    	var conn = new Ext.data.Connection();   		conn.request({   				scope:my_scope, 				url: '../catalogo/usuario/getNivelUsuarioSesion' ,				success: function(response, opts) {									var obj = Ext.decode(response.responseText);					if (obj.maxdescadicional!=undefined){						this.maxdescadicional = obj.maxdescadicional;											}				},				failure: function(response, opts) {	       			if (response.responseText!=undefined){	       				var obj = Ext.decode(response.responseText);	       				if (obj.message!=undefined){	       					Ext.Msg.alert('Error',obj.message);		       			}		       		}       							}   		});  		this.myScope = this;		//Si el grid no es de consulta entonces muestra la barra para administrar los datos		if (!this.isConsulta){			 this.editing = Ext.create('Ext.grid.plugin.CellEditing',{clicksToEdit: 1});			 this.plugins = this.editing;			 			/* this.tbar=[									];*/						this.bbar=[			           //	{ text: 'Salvar Cambios',iconCls: 'reload_blue',handler:this.saveInfo, scope:this.myScope },						{xtype: 'tbfill'},						{ text: 'Agregar',iconCls: 'agregar',handler:this.agregar, scope:this.myScope },						{xtype:'tbseparator'},						{ text: 'Borrar',iconCls: 'borrar',handler:this.eliminar,scope:this.myScope }				];		}					this.store =Ext.create('MyDesktop.store.StoreDetalleConvenio',				{baseParams:{idtarifa:this.idtarifa}});		this.store.getProxy().setExtraParam("idconvenio", this.idconvenio);		   		this.selType= 'checkboxmodel';        this.columns = [                        {text: 'Comentario',width: 130,sortable : true,dataIndex: 'comentario',                        	editor: {								xtype: 'myUpperCaseTextField',			                    maxLength:40,			                    required:false,			                    enforceMaxLength:true			                    			                                            	}		                        },                        {text: 'Ori',width: 50,sortable : true,dataIndex: 'siglasori'},                        {text: 'Des',width: 50,sortable : true,dataIndex: 'siglasdes'},						{text     : 'Peso Kg',width: 60,sortable : true,dataIndex: 'peso',							align: 'right',							editor: {								xtype: 'numberfield',								value: 1.0,								maxValue: 9999.99,								allowDecimals:true,								decimalPrecision:2,								decimalSeparator:'.',								thousandSeparator:',',						        required:true,						        minValue: 1.0							}									},						/*{text     : 'Peso Vol',width: 80,sortable : true,dataIndex: 'volumen'},						{text     : 'PesoBase',width: 80,sortable : true,dataIndex: 'volumen',							renderer:function(value, metaData, record, rowIndex, colIndex, store){								if (record.get('peso')>record.get('volumen')){									return Math.floor(record.get('peso') - record.get('sobrepeso') );								}else{									return Math.floor(record.get('volumen') - record.get('sobrepeso')) ;								}															}						},*/						{text     : 'Volumen',width: 90,sortable : true,dataIndex: 'volumen',							renderer:function(value, metaData, record, rowIndex, colIndex, store){								return Math.floor(record.get('alto')*record.get('ancho')*record.get('largo'))							}						},						//{text: 'SP',width: 60,sortable : true,dataIndex: 'sobrepeso'},						//{text: '$ Kg SP',width: 80,sortable : true,dataIndex: 'preciosobrepeso',renderer: 'usMoney'},						{text     : 'Alto',width: 50,sortable : true,dataIndex: 'alto',							align: 'right',							editor: {								xtype: 'numberfield',								value: 1.0,								maxValue: 999.99,								allowDecimals:true,								decimalPrecision:2,								decimalSeparator:'.',								thousandSeparator:',',						        required:true,						        minValue: 1.0						       							}									},						{text     : 'Largo',width: 50,sortable : true,dataIndex: 'largo',							align: 'right',							editor: {								xtype: 'numberfield',								value: 1.0,								maxValue: 999.99,								allowDecimals:true,								decimalPrecision:2,								decimalSeparator:'.',								thousandSeparator:',',						        required:true,						        minValue: 1.0						       							}									},						{text     : 'Ancho',width: 50,sortable : true,dataIndex: 'ancho',							align: 'right',							editor: {								xtype: 'numberfield',								value: 1.0,								maxValue: 999.99,								allowDecimals:true,								decimalPrecision:2,								decimalSeparator:'.',								thousandSeparator:',',						        required:true,						        minValue: 1.0						       							}									},												{text     : 'Tramo. KM',width: 80,sortable : true,dataIndex: 'coberturakm',							align: 'right'/*,							editor: {								xtype: 'numberfield',								value: 1.0,								maxValue: 9999.99,								allowDecimals:true,								decimalPrecision:2,								decimalSeparator:'.',								thousandSeparator:',',						        required:true,						        minValue: 1.0							}	*/								},						{text     : '$ Real',width: 90,sortable : true,dataIndex: 'precio_real',							align: 'right',renderer: 'usMoney'/*,							editor: {								xtype: 'numberfield',								value: 1.0,								maxValue: 9999.99,								allowDecimals:true,								decimalPrecision:2,								decimalSeparator:'.',								thousandSeparator:',',						        required:true,						        minValue: 1.0							}	*/								},						{text     : '$ Cotizado',width: 90,sortable : true,dataIndex: 'precio',							align: 'right',renderer: 'usMoney',							editor: {								xtype: 'numberfield',								value: 1.0,								maxValue: 99999.99,								allowDecimals:true,								decimalPrecision:2,								decimalSeparator:'.',								thousandSeparator:',',						        required:true,						        minValue: 1.0							}									},						{text     : '$ Kg SP',width: 90,sortable : true,dataIndex: 'preciosobrepeso',							align: 'right',renderer: 'usMoney'},						{text     : '% Desc.',width: 80,sortable : true,dataIndex: 'descuento'}									];                	this.on('validateedit', function(editor, e) {        		        		if (e.colIdx==3){//Columna de descuento        			if(this.maxdescadicional<e.value){    					Ext.Msg.alert('Verificar',"Descuento excede el "+ this.maxdescadicional +     							"% permitido para el usuario.");    					e.cancel = true;    		     		return;    				}	        		}         		        		if (e.colIdx==2){//Columna de precio        			if(e.value<=0){        				Ext.Msg.alert('Verificar',"Precio no puede ser cero.");        				e.cancel = true;        				return;        			}        		}	        	/*  var myTargetRow = 6;	        	  var column = editor.column;	        	  if (e.row == myTargetRow) {	        	    e.cancel = true;	        	    e.record.data[e.field] = e.value;	        	  }*/        	}, this);			this.callParent();    },	agregar:function(){				if (!this.permiteacceso){			mensajeAlert("Convenio ya fue autorizado, operación no permitida.");     		return;		}     	if(this.idconvenio==undefined){     		mensajeAlert("Identificador de documento invalido.");     		return;     	}					//Crea una forma de clientes para agregar los datos		var forma_agregar_detalle_cotiza = Ext.create('MyDesktop.view.FormDetalleCotizacion',				{	id:'agregar_detalle_cotizacion_',					isConsulta:false,					scope_view_pricipal:this,					idconvenio:this.idconvenio,					idrangoenvios:this.idrangoenvios,					operacion:'insert', 					tipodocto:'COTIZACION'				}); 		Ext.create('widget.window', {			id:'utils-win-agregar-detalle-convenio-cotiza',			title: "Agregar Detalle",			iconCls: 'agregar',			width: 420,			height: 370,			modal:true,			plain: true,			headerPosition: 'right',			layout: 'fit',			items: forma_agregar_detalle_cotiza					}).show();	  	},	modificar:function(){						if (!this.permiteacceso){			mensajeAlert("Convenio ya fue autorizado, operación no permitida.");     		return;		}				var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		Ext.Msg.alert('Verificar',"Debe de Seleccionar solo un registro para modificar");     		return;     	}		if(rows.length >1){     		Ext.Msg.alert('Verificar',"Seleccione solamente un registro a modificar");     		return;     	}	},			eliminar:function(){		if (!this.permiteacceso){			mensajeAlert("Convenio ya fue autorizado, operaci�n no permitida.");     		return;		}		var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		 Ext.Msg.alert('Verificar',"Seleccione los registros que desea eliminar");     		return;     	}		    	 Ext.MessageBox.confirm('Confirmacion', 'Desea borrar los registros seleccionados?', function(id, text){       		if ( (id === 'yes')  || (id === 'si') || (id === 'y' ) || (id === 's' ) ){        			if(rows.length == 0){  //step 3       				return ;       			}       			//Verifica que no pueda eliminar los adicionales obligatorios       			for(i=0;i<rows.length;i++){       				if (rows[i].get('estatus') == 1) {       					Ext.Msg.alert('Adicional Obligatorio',"El adicional "+ rows[i].get('descripcion') +        						 " no puede ser eliminado.");       	     			return;					}       			}       			var store = this.getView().getStore();       			//Elimina los registros seleccionados       			deleteSyncStore(this, store, rows,true);       		}       	 },this);     	 				},	showDetails:function(){			var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		Ext.Msg.alert('Verificar',"Debe de Seleccionar solo un registro para visualizar");     		return;     	}		if(rows.length >1){     		Ext.Msg.alert('Verificar',"Seleccione solamente un registro a visualizar");     		return;     	}		},	loadInfo:function(){		this.getView().getStore().load();		},	reloadInfo:function(){		this.getView().getStore().reload();		},	commitInfo:function(){		this.getView().getStore().save( );		this.getView().getStore().commitChanges();		},	saveInfo:function(){		updateSyncStore(this,this.getView().getStore(), true);	},	loadInfoWithId:function(id, permiteacceso){		this.permiteacceso = permiteacceso!=undefined?permiteacceso:true;		this.idconvenio = id;		this.store.getProxy().setExtraParam("idconvenio", this.idconvenio);		this.reloadInfo();	},		reload:function(id){		this.idconvenio = id;		this.getView().getStore().reload(				{					params:{idconvenio:this.idconvenio},					callback:function(r,options,success){						 if (r.length<=0){						 }					 }	  				});			}		});