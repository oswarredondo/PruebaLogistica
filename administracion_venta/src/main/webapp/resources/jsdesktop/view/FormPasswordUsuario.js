Ext.define('MyDesktop.view.FormPasswordUsuario', {    extend: 'Ext.form.Panel',    requires: [        'Ext.data.*',        'Ext.form.*'     ],    xtype: 'form-checkout',    url : '../modAdminEntidad.do?dispatch=creaCuentaUserEntidad',        frame: false,	border: false,    bodyPadding: 5,    showReadOnly:false,	isModificaPassword:false,	    initComponent: function(){    	        this. buttons= [                        /*{hidden: this.showReadOnly,            text: 'Limpiar',iconCls:'limpiar_white',            scope: this,            handler: this.onResetClick        },*/ {			hidden: this.showReadOnly,            text: 'Actualizar Password',iconCls:'activo',            scope: this,            handler: this.onCompleteClick        }];       var text_pass = '<p style="font-size: 90%;">Su password debe tener las siguientes caracteristicas:</p>'+		'<ul>'+		'  <li style="font-size: 90%;">Debe tener al minino 7 caracteres y maximo 20</li>'+		'  <li style="font-size: 90%;">Debe tener al menos un caracter entre 0 y 9</li>'+		'  <li style="font-size: 90%;">Debe tener al menos un caracter entre a y z</li>'+		'  <li style="font-size: 90%;">Debe tener al menos un caracter entre A y Z</li>'+		'  <li style="font-size: 90%;">Debe tener al menos un caracter de los siguientes signos @#$%</li>'+		'</ul>';		        Ext.apply(this, {            width: 550,            fieldDefaults: {                labelAlign: 'right',                labelWidth: 130,                msgTarget: 'qtip'            },			defaultType: 'textfield',			items: [			     {xtype:'hidden', name:'numcliente',value:cliente_usuario_windows }  ,			     {xtype:'label', html:text_pass }  ,			     				 {					xtype: 'myUpperCaseTextField',					allowBlank: false,					fieldLabel: 'Usuario',					name: 'login',					width: 400,					emptyText: 'Login/Usuario',					value: login_usuario_windows,					readOnly:true				},				{					 xtype: 'textfield',					allowBlank: false,					fieldLabel: 'Nuevo Password',					name: 'pass',					width: 400,					emptyText: '',					inputType: 'password'				},				{					 xtype: 'textfield',					allowBlank: false,					fieldLabel: 'Conf. Password',					name: 'confirmacionpass',					emptyText: '',					width: 400,					inputType: 'password'				}/*,				{					xtype:'checkbox',					fieldLabel: 'Enviarme Contrase�a',					name: 'enviarcontrase�a'				}*/			]            });        this.callParent();    },        onResetClick: function(){        this.getForm().reset();    },        onCompleteClick: function(){	    			var form = this.getForm();		 //Valida que la contraseña nueva cumpla con las politicas de seguridad        if (!validaPassword(getValueFieldToForm('pass',this))){        	alertMsg('Password Invalido','El password no cumple con la politicas de seguridad solicitadas, verifique.');        	return;        }        var myMask = new Ext.LoadMask(Ext.getBody(), {msg:"Actualizando password espere..."});		myMask.show();        	    if (form.isValid()) {			form.submit({				clientValidation: true,				url: '../catalogo/usuario/updatepassword' ,				success: function(form, action) {					myMask.hide( );					myMask.disable();					alertMsg('Confirmacion' , action.result.message);					},				failure: function(form, action) {					myMask.hide( );					myMask.disable();					if ( (action.result!=undefined) && (action.result.message!=undefined)){						alertMsg('Error' , action.result.message);					}else{						//Busca si existe un response del servier						if (action.response.responseText!=null){							alertMsg(action.response.statusText , action.response.responseText);						}					}									}			});			    }else{	    	myMask.hide( );			myMask.disable();	    	alertMsg("Error" , "Capture los datos requeridos.");	    }				//TODO: cuando la operacion es Agregar se manda el password al usuario		//a la cuenta que se indica        /*var form = this.getForm();        if (form.isValid()) {            Ext.MessageBox.alert('Submitted Values', form.getValues(true));        }*/    },	updateCampos:function(record){		//alert(Ext.getCmp(this.id));		var fields = Ext.getCmp(this.id).getForm().getFields( ) ;		this.updateFieldName(record,fields);							},	updateFieldName:function(record, fields){		var items = fields.items;		var valor ="";		for(i = 0; i < items.length; i++){			field = items[i];			if (field!=undefined){				if (field.getName()!=undefined){					//busca el nombre del campo que debe ser el mismo del nombre del campo de 					//la forma					valor = record.get(field.getName());					if (valor!=undefined){						//alert('Campo:' + field.getName() + ', valor:' +valor);						field.setValue(valor);					}else{						field.setValue("");					}								}			}		}	},		updateFieldReadOnly:function(record){			//alert(Ext.getCmp(this.id));		var fields = Ext.getCmp(this.id).getForm().getFields( ) ;				var items = fields.items;		var valor ="";		for(i = 0; i < items.length; i++){			field = items[i];			if (field!=undefined){				if (field.getName()!=undefined){					field.setReadOnly(true);								}			}		}				this.updateCampos(record);	}});