Ext.define('MyDesktop.view.FormContacto', {    extend: 'Ext.form.Panel',    requires: [        'Ext.data.*',        'Ext.form.*'    ],    xtype: 'form-checkout',            frame: false,	border: false,   // title: 'Contacto',    bodyPadding: 5,    showReadOnly:false,	operacion:undefined,	idcliente:undefined,    idcontacto:undefined,    gridprincipal:undefined,    winprincipal:undefined,    initComponent: function(){    	var operacion_aplicar = this.operacion;		this.myscope=this;		var idcliente_id = this.idcliente==undefined?'':this.idcliente;		var mygrid = this.gridprincipal;		var myscope_prin = this;    	this.items= [    	             {    	                 xtype: 'combobox',    	                 fieldLabel: 'Clasificación',    	                 editable :false,    	                 name: 'clasificacion',    	                 store: Ext.create('MyDesktop.store.StoreClasificacionCliente',{}),    	                 valueField: 'idtipo',    	                 displayField: 'descripcion',    	 				enforceMaxLength:true,    	 				maxLength:30,    	                 typeAhead: true,    	                 queryMode: 'local',    	                 allowBlank: false,    	                 emptyText: ''    	             },    					{    						xtype: 'fieldset',    						title: 'Informaci�n Contacto',    						defaultType: 'textfield',    						layout: 'anchor',    						defaults: {    							anchor: '100%',    								labelWidth: 90    						},    						items: [    						        {xtype: 'hidden', name:'idcliente', value: this.idcliente},    						        {xtype: 'hidden', name:'idcontacto', value: this.idcontacto},    						        {xtype: 'myUpperCaseTextField', name: 'nombre',fieldLabel: 'Nombre',flex: 2,emptyText:     						        	'Nombre',allowBlank: false,enforceMaxLength:true,    									maxLength:40},     						        {xtype: 'myUpperCaseTextField', name: 'apellido',fieldLabel: 'Apellido',flex: 3,    										margins: '0 0 0 6',emptyText: 'Apellido',allowBlank: false,    										enforceMaxLength:true,        									maxLength:40		    						        },    						        {fieldLabel: 'Email',name: 'email',vtype: 'email',allowBlank: true,width: 400,    						        	enforceMaxLength:true,    									maxLength:40	    						        },    						        {fieldLabel: 'Tel�fono', name: 'telefono',width: 250,    						        	enforceMaxLength:true,    				                         				                        regex:/^[0-9 \-]{1,}$/,    									maxLength:30    								},    								{fieldLabel: 'Ext.', name: 'extencion',width: 250,    									enforceMaxLength:true,    									 regex:/^[0-9 \-]{1,}$/,    									maxLength:30    								},	    								{fieldLabel: 'Celular',name: 'movil',width: 250,    									enforceMaxLength:true,    									 regex:/^[0-9 \-]{1,}$/,    									maxLength:30     								},    								  {xtype: 'myUpperCaseTextField', name: 'puesto',fieldLabel: 'Puesto',emptyText:       						        	'',allowBlank: true,enforceMaxLength:true,      									maxLength:50},     								  {xtype: 'myUpperCaseTextField', name: 'comentario',fieldLabel: 'Comentario',emptyText:       						        	'',allowBlank: true,enforceMaxLength:true,      									maxLength:50}    							]    					}    					];    	        this. buttons= [                {                	hidden: this.showReadOnly,		            text: 'Limpiar',iconCls:'limpiar_white',		            scope: this,		            handler: this.onResetClick                },                {					hidden: this.showReadOnly,		            text: 'Salvar',iconCls:'activo',		        					handler:function() {						var miforma= this.up('form').getForm();						if (miforma.isValid()) {							var out = [];							Ext.Object.each(miforma.getValues(), function(key, value){								out.push(key + '=' + value);							});							var myMask = new Ext.LoadMask(Ext.getBody(), {msg:"Agregando información espere..."});							myMask.show();															miforma.submit({								clientValidation: true,								url: '../catalogo/contacto/' + operacion_aplicar,								success: function(form, action) {									myMask.hide( );									myMask.disable();									if (operacion_aplicar!='update'){										form.reset();									}																											if (mygrid!=undefined){										mygrid.reload(idcliente_id);									}									if (myscope_prin.winprincipal !=undefined){										myscope_prin.winprincipal.close();									}									alertMsg('Confirmaci�n' , action.result.message);												},								failure: function(form, action) {									myMask.hide( );									myMask.disable();									if ( (action.result!=undefined) && (action.result.message!=undefined)){										alertMsg('Error' , action.result.message);									}else{										//Busca si existe un response del servier										if (action.response.responseText!=null){											alertMsg(action.response.statusText , action.response.responseText);										}									}																	}							});																			}else{							alertMsg('Verifique' ,'Complete los campos requeridos.');						}				}        }];        this.callParent();    },        onResetClick: function(){        this.getForm().reset();    },        onCompleteClick: function(){        var form = this.getForm();        if (form.isValid()) {            Ext.MessageBox.alert('Submitted Values', form.getValues(true));        }    },        onMailingAddrFieldChange: function(field){        /*var copyToBilling = this.down('[name=billingSameAsMailing]').getValue(),            copyField = this.down('[name=' + field.billingFieldName + ']');        if (copyToBilling) {            copyField.setValue(field.getValue());        } else {            copyField.clearInvalid();        }*/    },        /**     * Enables or disables the billing address fields according to whether the checkbox is checked.     * In addition to disabling the fields, they are animated to a low opacity so they don't take     * up visual attention.     */    onSameAddressChange: function(box, checked){      /*  var fieldset = box.ownerCt;        Ext.Array.forEach(fieldset.previousSibling().query('textfield'), this.onMailingAddrFieldChange, this);        Ext.Array.forEach(fieldset.query('textfield'), function(field) {            field.setDisabled(checked);            // Animate the opacity on each field. Would be more efficient to wrap them in a container            // and animate the opacity on just the single container element, but IE has a bug where            // the alpha filter does not get applied on position:relative children.            // This must only be applied when it is not IE6, as it has issues with opacity when cleartype            // is enabled            if (!Ext.isIE6) {                field.el.animate({opacity: checked ? 0.3 : 1});            }        });*/    },	updateCampos:function(record){		//alert(Ext.getCmp(this.id));		var fields = Ext.getCmp(this.id).getForm().getFields( ) ;		this.updateFieldName(record,fields);							},	updateFieldName:function(record, fields){		var items = fields.items;		var valor ="";		for(i = 0; i < items.length; i++){			field = items[i];			if (field!=undefined){				if (field.getName()!=undefined){					//busca el nombre del campo que debe ser el mismo del nombre del campo de 					//la forma					valor = record.get(field.getName());					if (valor!=undefined){						//alert('Campo:' + field.getName() + ', valor:' +valor);						field.setValue(valor);					}else{						field.setValue("");					}								}			}		}	},		updateFieldReadOnly:function(record){			//alert(Ext.getCmp(this.id));		var fields = Ext.getCmp(this.id).getForm().getFields( ) ;				var items = fields.items;		var valor ="";		for(i = 0; i < items.length; i++){			field = items[i];			if (field!=undefined){				if (field.getName()!=undefined){					field.setReadOnly(true);								}			}		}				this.updateCampos(record);	},	setWinPrincipal:function(ventana){		this.winprincipal = ventana;	}		});