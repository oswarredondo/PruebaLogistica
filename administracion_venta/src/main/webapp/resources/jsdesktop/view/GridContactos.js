Ext.define('MyDesktop.view.GridContactos', {    extend: 'Ext.grid.Panel',    requires: [        'Ext.grid.column.Action'    ],    stateful: true,  //  collapsible: true,    multiSelect: true,    frame:false,    border:false,    stateId: 'stateGridContacto',    height: 350,      viewConfig: {        stripeRows: true,        enableTextSelection: true    },	id:undefined,	isConsulta:false,	myScope:undefined,	idCliente:undefined,	nombreCliente:undefined,	isAutoLoad:true,    initComponent: function () {		this.myScope = this;				this.combo_tipos_busqueda= Ext.create('Ext.form.ComboBox', {					fieldLabel: '',					disabled: false,					editable:false,					forceSelection:true,					store: Ext.create('MyDesktop.store.StoreTiposBusquedaContactos',{}) ,					queryMode: 'local',					emptyText: 'Seleccione orden',					displayField: 'descripcion',					valueField: 'idtipo'		});		if (!this.isConsulta){			this.tbar=[						//{ text: 'Salvar Cambios',iconCls: 'reload_blue',handler:this.saveInfo, scope:this.myScope },						{xtype: 'tbfill'},						{xtype:'tbseparator'},						{ text: 'Agregar',iconCls: 'agregar',handler:this.agregar, scope:this.myScope },						{xtype:'tbseparator'},						{ text: 'Modificar',iconCls: 'editar',handler:this.modificar, scope:this.myScope },						{xtype:'tbseparator'},						{ text: 'Borrar',iconCls: 'borrar',handler:this.eliminar,scope:this.myScope }												];		}				//Si el grid no es de consulta entonces muestra la barra para administrar los datos		//if (!this.isConsulta){		//	 this.editing = Ext.create('Ext.grid.plugin.CellEditing');		//	 this.plugins = this.editing;		//}		var sm = Ext.create('Ext.selection.CheckboxModel',{mode : 'SINGLE'});		this.selModel= sm;				this.store = Ext.create('MyDesktop.store.StoreContacto',{			   autoLoad: this.isAutoLoad					});		this.selType= 'checkboxmodel';		      //  this.width = 650;        this.columns = [						//{text     : 'Id',flex     : 1,sortable : false,dataIndex: 'idcontacto'},						{text     : 'Clasificaci√≥n',flex     : 1,sortable : false,dataIndex: 'clasificacion'},												{text     : 'Nombre',flex     : 1,sortable : false,dataIndex: 'nombre',							field: {								xtype: 'myUpperCaseTextField',			                    maxLength:40,			                    minLength:1,			                    required:true,			                    enforceMaxLength:true			                    			                    							}								},						{text     : 'Apellido',flex     : 1,sortable : false,dataIndex: 'apellido',							field: {								xtype: 'myUpperCaseTextField',			                    maxLength:20,			                    minLength:1,			                    required:true,			                    enforceMaxLength:true			                    			                    							}								},						{text     : 'Email',flex     : 1,sortable : false,dataIndex: 'email',							field: {								xtype: 'myUpperCaseTextField',								vtype:'email',			                    maxLength:40,			                    minLength:1,			                    required:true,			                    enforceMaxLength:true			                    			                    							}							},						{text     : 'Telefono',flex     : 1,sortable : false,dataIndex: 'telefono',							field: {								xtype: 'myUpperCaseTextField',			                    maxLength:30,			                    minLength:1,			                    required:true,			                    enforceMaxLength:true			                    			                    							}							},						{text     : 'Ext.',flex     : 1,sortable : false,dataIndex: 'extencion',							field: {								xtype: 'myUpperCaseTextField',			                    maxLength:30,			                    minLength:1,			                    required:false,			                    enforceMaxLength:true			                    			                    							}							},						{text     : 'Movil',flex     : 1,sortable : false,dataIndex: 'movil',							field: {								xtype: 'myUpperCaseTextField',			                    maxLength:30,			                    minLength:1,			                    required:false,			                    enforceMaxLength:true			                    			                    							}							},						{text     : 'Puesto',flex     : 1,sortable : false,dataIndex: 'puesto'},						{text     : 'Comentario',flex     : 1,sortable : false,dataIndex: 'comentario'}        ];        this.callParent();    },	updateClienteSelected:function(idcliente, nombre, grid){		this.idCliente = idcliente;		this.nombreCliente=nombre;	},	agregar:function(){				if (this.idCliente==undefined){			Ext.Msg.alert('Verificar',"Seleccione un registro de cliente antes de agregar un registro de contacto");			return;		}						/*  var rec = new MyDesktop.models.ModeloContactos({			  idcontacto: 0,			  idcliente: this.idCliente,			  nombre:'',			  email:'',			  telefono:'',			  nombre:'',			  telefono2: ''	        }), edit = this.editing;		  edit.cancelEdit();	      this.store.insert(0, rec);	        edit.startEditByPosition({	            row: 0,	            column: 1	      });*/		//Crea una forma de clientes para agregar los datos		var forma_agregar = Ext.create('MyDesktop.view.FormContacto',{				id:'agregar_contacto_cli',operacion:'insert',				 idcliente: this.idCliente,				 gridprincipal:this		}); 		var ventana =Ext.create('widget.window', {			id:'utils-win-agregar_contacto_cli',			title: "Agregar Contacto",			width: 400,			height: 350,			modal:true,			plain: true,			headerPosition: 'right',			layout: 'fit',			items: forma_agregar					});		ventana.show();				forma_agregar.setWinPrincipal(ventana);			},	modificar:function(){		var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		alert("Debe de Seleccionar solo un registro para modificar");     		return;     	}		if(rows.length >1){     		alert("Seleccione solamente un registro a modificar");     		return;     	}				//Crea una forma de clientes para agregar los datos		var forma_modificar = Ext.create('MyDesktop.view.FormContacto',				{				id:'modificar_contacto_cli',operacion:'update',				 idcliente:rows[0].get('idcliente'),				 idcontacto: rows[0].get('idcontacto'),				 gridprincipal:this		}); 		forma_modificar.updateCampos(rows[0]);		var ventana =Ext.create('widget.window', {			id:'utils-win-Modificar_contacto_cli',			title: "Modificar Contacto",			width: 400,			height: 350,			modal:true,			plain: true,			headerPosition: 'right',			layout: 'fit',			items: forma_modificar					});		ventana.show();				forma_modificar.setWinPrincipal(ventana);	},			eliminar:function(){				var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		 Ext.Msg.alert('Verificar',"Seleccione los registros que desea eliminar");     		return;     	}		    	 Ext.MessageBox.confirm('Confirmacion', 'Desea borrar los registros seleccionados?', function(id, text){       		if ( (id === 'yes')  || (id === 'si') || (id === 'y' ) || (id === 's' ) ){        			if(rows.length == 0){  //step 3       				return ;       			}       			var store = this.getView().getStore();       			//Elimina los registros seleccionados       		         			deleteSyncStoreReloadParams(this, store, rows,{idcliente:this.idCliente} );       		}       	 },this);	},	showDetails:function(){			/*var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		Ext.Msg.alert('Verificar',"Debe de Seleccionar solo un registro para visualizar");     		return;     	}		if(rows.length >1){     		Ext.Msg.alert('Verificar',"Seleccione solamente un registro a visualizar");     		return;     	}		//Crea una forma de clientes para agregar los datos		var forma_showdetails = Ext.create('MyDesktop.view.FormContacto',{id:'showdetails_contacto',showReadOnly:true}); 		forma_showdetails.updateFieldReadOnly(rows[0]);		Ext.create('widget.window', {			id:'utils-win-agregar-cliente',			title: "Detalles Datos Contacto",			width: 600,			height: 340,			modal:true,			plain: true,			headerPosition: 'right',			layout: 'fit',			items: forma_showdetails					}).show();*/	},	reload:function(idcliente){				this.getView().getStore().reload(				{					params:{idcliente:idcliente},					callback:function(r,options,success){					}	  				});			},	loadInfo:function(){		this.getView().getStore().load();		},	commitInfo:function(){		this.getView().getStore().save( );		this.getView().getStore().commitChanges();		},	saveInfo:function(){				updateSyncStoreReloadParams(this,this.getView().getStore(),{idcliente:this.idCliente} );		/*updateSyncStore(this,this.getView().getStore(), true);		this.getView().getStore().save( );		this.getView().getStore().commitChanges();		;*/		},	setIdCliente:function(idcliente){		this.idCliente = idcliente;	},	getRegistro:function(){		var rows =  this.getView().getSelectionModel().getSelection();		if(rows.length >0){			return rows[0];		}		return undefined;	}	});