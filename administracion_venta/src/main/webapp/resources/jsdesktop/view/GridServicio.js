Ext.define('MyDesktop.view.GridServicio', {    extend: 'Ext.grid.Panel',    requires: [        'Ext.grid.column.Action'    ],    stateful: true,    collapsible: false,    multiSelect: true,    stateId: 'stateGridServicio',    viewConfig: {        stripeRows: true,        enableTextSelection: true    },	id:undefined,	isConsulta:false,	myScope:undefined,    initComponent: function () {		this.myScope = this;		var myscope=this;		//Si el grid no es de consulta entonces muestra la barra para administrar los datos		if (!this.isConsulta){			 this.editing = Ext.create('Ext.grid.plugin.CellEditing');			 this.plugins = this.editing;		}		this.tbar=[		       	{ text: 'Salvar Cambios',iconCls: 'reload_blue',handler:this.saveInfo, scope:this.myScope },								{xtype: 'tbfill'},				{ text: 'Agregar',iconCls: 'agregar',handler:this.agregar, scope:this.myScope },				{xtype:'tbseparator'},				{ text: 'Borrar',iconCls: 'borrar',handler:this.eliminar,scope:this.myScope }		];		this.bbar=[		           {xtype:'label', html:'Formas de Cobro:'},			       	{ text: 'Marcar como Contado',iconCls: 'reload_blue',handler:function(){			       		myscope.actualizarFormaCobro(1);			       	}, scope:this.myScope },			       	{xtype:'tbseparator'},					{ text: 'Marcar como Prepagado',iconCls: 'reload_blue',handler:function(){			       		myscope.actualizarFormaCobro(3);			       	}, scope:this.myScope },					{xtype:'tbseparator'},					{ text: 'Marcar como Convenio/Contrato',iconCls: 'reload_blue',handler:function(){			       		myscope.actualizarFormaCobro(2);			       	}, scope:this.myScope },			];				this.store = Ext.create('MyDesktop.store.StoreServicio',{});		this.selType= 'checkboxmodel';        this.columns = [						/*{							menuDisabled: true,							sortable: false,							xtype: 'actioncolumn',							width: 50,							items: [								{									getClass: function(v, meta, rec) {										if (rec.get('estatus') == 1) {											return 'activo' ;										} else {												return 'desactivado';										}									},									getTip: function(v, meta, rec) {										if (rec.get('estatus') == 1) {											return 'Activo' ;										} else {												return 'Desactivado';										}									},									handler: function(grid, rowIndex, colIndex) {										var rec = grid.getStore().getAt(rowIndex),										action = (rec.get('estatus') ==1 ? 'Activo' : 'Desactivado');										Ext.Msg.alert(action, action + ' ' + rec.get('nombre'));									}								}							]						},*/						{text     : 'Id Servicio',flex     : 1,							sortable : true,dataIndex: 'idservicio',							field: {									xtype: 'myUpperCaseTextField',				                    maxLength:2,				                    minLength:1,				                    required:true,				                    enforceMaxLength:true				                    				                    				            }								},												/*{text     : 'Nombre',flex     : 1,sortable : false,dataIndex: 'nombre',							field: {								xtype: 'myUpperCaseTextField',			                    maxLength:20,			                    minLength:1,			                    required:true,			                    enforceMaxLength:true			                    			                    							}							},*/						{text     : 'Nombre',flex     : 1,sortable : true,dataIndex: 'nombre',							field: {								xtype: 'myUpperCaseTextField',			                    maxLength:30,			                    minLength:1,			                    required:true,			                    enforceMaxLength:true			                    			                    							}							},						{text     : 'Descripcion',flex     : 1,sortable : true,dataIndex: 'descripcion',							field: {								xtype: 'myUpperCaseTextField',			                    maxLength:30,			                    minLength:1,			                    required:true,			                    enforceMaxLength:true			                    			                    							}							},						{text     : 'Codigo Id',flex     : 1,sortable : true,dataIndex: 'codigoid',							field: {								xtype: 'myUpperCaseTextField',			                    maxLength:20,			                    minLength:1,			                    required:true,			                    enforceMaxLength:true			                    			                    							}							},						{text     : 'Tipo Cobro',flex     : 1,sortable : true,dataIndex: 'descripcion_tipocobro'},						/*,						 {			                header: 'Genera Retorno',			                dataIndex: 'generaretorno',			                width: 130,			                editor: new Ext.form.field.ComboBox({			                    typeAhead: true,			                    triggerAction: 'all',			                    selectOnTab: true,			                    store: [			                        ['S','SI'],			                        ['N','NO']			                    ],			                    forceSelection: true,			                    lazyRender: true,			                    listClass: 'x-combo-list-small'			                })			            }*/			            									];        				this.callParent();    },	agregar:function(){		  var rec = new MyDesktop.models.ModeloServicio({			  identificador: 0,			  jerarquia:0,			  clave:'',			  descripcion: '',			  codigoid:'' , 			  nombre:'', 				  generaretorno:'',			  identidad:0,			  idorganizacion:0,			  estatus:0,			  tipocobro:''		    			   	        }), edit = this.editing;	      edit.cancelEdit();	      this.store.insert(0, rec);	        edit.startEditByPosition({	            row: 0,	            column: 1	      });	},	modificar:function(){		var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		Ext.Msg.alert('Verificar',"Debe de Seleccionar solo un registro para modificar");     		return;     	}		if(rows.length >1){     		Ext.Msg.alert('Verificar',"Seleccione solamente un registro a modificar");     		return;     	}			},		actualizarFormaCobro:function(tipocobro){		var myscope = this;		var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		 Ext.Msg.alert('Verificar',"Seleccione los registros que desea afectar");     		return;     	}		    	 Ext.MessageBox.confirm('Confirmacion', 'Desea marcar los registoas con el tipo de cobro seleccionado?', function(id, text){       		if ( (id === 'yes')  || (id === 'si') || (id === 'y' ) || (id === 's' ) ){        			if(rows.length === 0){  //step 3       				return ;       			}       			var identificadores = '';       			for (i=0;i<rows.length;i++){       				identificadores = identificadores + rows[i].get('identificador') + ',';       			}       			//Invoca la actualizacion       			var conn = new Ext.data.Connection();       	    	conn.request({       	    				scope:this,        	 				url: '../catalogo/servicio/updateTipoCobro' ,       	 				params:{       	 					identificadores:identificadores,          	 					tipocobro:tipocobro       	 				},       	 				success: function(response, opts) {       	 					var obj = Ext.decode(response.responseText);       	 					myscope.saveInfo();       	 				},       	 				failure: function(response, opts) {       	 					       	 	       			if (response.responseText!=undefined){       	 	       				var obj = Ext.decode(response.responseText);       	 	       				if (obj.message!=undefined){       	 	       					mensajeAlert(obj.message);       	 		       			}       	 		       		}       	        			       	 				}       	 	   		});       		}       	 },this);	},	eliminar:function(){		var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		 Ext.Msg.alert('Verificar',"Seleccione los registros que desea eliminar");     		return;     	}		    	 Ext.MessageBox.confirm('Confirmacion', 'Desea borrar los registros seleccionados?', function(id, text){       		if ( (id === 'yes')  || (id === 'si') || (id === 'y' ) || (id === 's' ) ){        			if(rows.length === 0){  //step 3       				return ;       			}       			this.getView().getStore().remove(rows);  //step 4       			this.commitInfo();       		}       	 },this);	},	showDetails:function(){			var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		Ext.Msg.alert('Verificar',"Debe de Seleccionar solo un registro para visualizar");     		return;     	}		if(rows.length >1){     		Ext.Msg.alert('Verificar',"Seleccione solamente un registro a visualizar");     		return;     	}			},	loadInfo:function(){		this.getView().getStore().load();		},	commitInfo:function(){		this.getView().getStore().save( );		this.getView().getStore().commitChanges();		},	saveInfo:function(){		this.getView().getStore().save( );		this.getView().getStore().commitChanges();		this.loadInfo();		}	});