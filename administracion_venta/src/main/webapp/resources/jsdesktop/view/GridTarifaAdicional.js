Ext.define('MyDesktop.view.GridTarifaAdicional', {    extend: 'Ext.grid.Panel',    requires: [        'Ext.grid.column.Action',        'Ext.grid.plugin.CellEditing',        'Ext.form.field.Text',        'Ext.toolbar.TextItem'    ],    stateful: true,    collapsible: false,    multiSelect: true,    stateId: 'stateGridTarifaAdicional',    viewConfig: {        stripeRows: true,        enableTextSelection: true    },	id:undefined,	isConsulta:false,	myScope:undefined,	maxdescadicional:0,	idtarifa:undefined,	idconvenio:undefined,	store_adicionales_actual:undefined,	permiteacceso:true,    initComponent: function () {    	    	//Obtiene todos los datos para poder comparar los descuentos en caso de que 		//sean cambiados		this.store_adicionales_actual = Ext.create('MyDesktop.store.StoreTarifasAdicional',				{baseParams:{ idconvenio:this.idconvenio}});		this.store_adicionales_actual.getProxy().setExtraParam("idconvenio", this.idconvenio);			var store_tipo_incremneto = Ext.create('MyDesktop.store.StoreTipoIncremento',{}) ;		    	var store_adicionales = Ext.create('MyDesktop.store.StoreAdicionales',{}) ;    	var my_scope= this;    	var conn = new Ext.data.Connection();   		conn.request({   				scope:my_scope, 				url: '../catalogo/usuario/getNivelUsuarioSesion' ,				success: function(response, opts) {									var obj = Ext.decode(response.responseText);					if (obj.maxdescadicional!=undefined){						this.maxdescadicional = obj.maxdescadicional;											}				},				failure: function(response, opts) {	       			if (response.responseText!=undefined){	       				var obj = Ext.decode(response.responseText);	       				if (obj.message!=undefined){	       					Ext.Msg.alert('Error',obj.message);		       			}		       		}       							}   		});  		this.myScope = this;		//Si el grid no es de consulta entonces muestra la barra para administrar los datos		if (!this.isConsulta){			 this.editing = Ext.create('Ext.grid.plugin.CellEditing',{clicksToEdit: 1});			 this.plugins = this.editing;			 			this.bbar=[			           { text: 'Salvar Cambios',iconCls: 'reload_blue',handler:this.saveInfo, scope:this.myScope },						{xtype: 'tbfill'},						{ text: 'Agregar',iconCls: 'agregar',handler:this.agregar, scope:this.myScope },						{xtype:'tbseparator'},						{ text: 'Borrar',iconCls: 'borrar',handler:this.eliminar,scope:this.myScope }						];		}											this.store =Ext.create('MyDesktop.store.StoreTarifasAdicional',				{baseParams:{idtarifa:this.idtarifa}});		this.store.getProxy().setExtraParam("idconvenio", this.idconvenio);		this.selType= 'checkboxmodel';        this.columns = [                        {text: 'Clave',width: 50,sortable : true,dataIndex: 'claveadicional'},						{text: 'Adicional',width: 260,sortable : true,dataIndex: 'descripcion'},						{text     : 'Precio',width: 100,sortable : true,dataIndex: 'precio',							align: 'right',renderer: 'usMoney',							editor: {								xtype: 'numberfield',								value: 1.0,								maxValue: 9999.99,								allowDecimals:true,								decimalPrecision:2,								decimalSeparator:'.',								thousandSeparator:',',						        required:true,						        minValue: 1.0							}									},						{text     : 'Descuento',width: 100,sortable : true,dataIndex: 'descuento',							align: 'right',							editor: {								xtype: 'numberfield',								value: 1.0,								maxValue: 99.99,								allowDecimals:true,								decimalPrecision:2,								decimalSeparator:'.',								thousandSeparator:',',						        required:true,						        minValue: 1.0						       							}									},						{				            text: 'Permitir',				            dataIndex: 'tipoincremento',				            sortable : true,				            width: 170,				            renderer: function (value, metaData, record, rowIndex, colIndex, store) {								var myrecord=undefined;								if (store_tipo_incremneto.getCount() > 0) {									store_tipo_incremneto.each(function(r) {										if (r.data['identificador'] == value) {											myrecord = r;										}									});								}								if (myrecord!=undefined){									return myrecord.get('descripcion');								}								return value;							}						}			];                	this.on('validateedit', function(editor, e) {        		        		if (e.colIdx==4){//Columna de descuento        			if(this.maxdescadicional<e.value){    					Ext.Msg.alert('Verificar',"Descuento excede el "+ this.maxdescadicional +     							"% permitido para el usuario.");    					e.cancel = true;    		     		return;    				}	        		}         		        		if (e.colIdx==3){//Columna de precio        			if(e.value<=0){        				mensajeAlert("Precio no puede ser cero.");        				e.cancel = true;        				return;        			}        			        			//Verifica el tipo validaci�n de acuerdo         			//Si es 0=Aumentar � Disminuir          			/*if ( e.record.data.tipoincremento !=0){          			              			          				if (e.record.data.tipoincremento==1){//Si es 1=Aumentar           					//data con tiene lo modificado, raw contiene el registro original          					if (e.record.data.precio <e.record.raw.precio){          						mensajeAlert("No puede disminuir el peso asignado al adicional de $"+e.record.raw.precio );                				e.cancel = true;                				return;          					}          				}else if(e.record.data.tipoincremento==2){//Si es 2=Disminuir          					if (e.record.data.precio <e.record.raw.precio){          						mensajeAlert("No puede aumentar el peso asignado al adicional de $"+e.record.raw.precio );                				e.cancel = true;                				return;          					}          					          				}else{          					mensajeAlert("No se permite cambiar el precio del adicional["+e.record.data.tipoincremento+"]");            				e.cancel = true;            				return;          				}          			}*/        		}	        	/*  var myTargetRow = 6;	        	  var column = editor.column;	        	  if (e.row == myTargetRow) {	        	    e.cancel = true;	        	    e.record.data[e.field] = e.value;	        	  }*/        	}, this);			this.callParent();    },	agregar:function(){				if (!this.permiteacceso){			mensajeAlert("Convenio ya fue autorizado, operación no permitida.");     		return;		}		//Crea una forma de clientes para agregar los datos		var grid_adicionales_para_tarifa = new MyDesktop.view.GridAdicional({id:this.id+'grid_adicional_tarifa', isConsulta:true}); 		grid_adicionales_para_tarifa.loadInfo();		var myscope = this;					var win_adicional_tarifa = Ext.create('widget.window', {			id:'utils-win-grid_adicionales_para_tarifa',			title: "Detalles Adicionales Disponibles",			width: 650,			height: 300,			modal:true,			plain: true,			headerPosition: 'right',			layout: 'fit',			items: grid_adicionales_para_tarifa,			buttons:[			         	{iconCls:'seleccionar_white',text:'Seleccionar',handler:			         		function(b,e){			         			var rows = grid_adicionales_para_tarifa.getRowsSelected();			         			if(rows.length <=0){			         	     		Ext.Msg.alert('Verificar',"Seleccione los registros que desea ");			         	     		return;			         	     	}			         			var registros='';			         			for (i=0;i<rows.length;i++){			           				registros = registros+  rows[i].get('identificador')+ "|";			           			}			         			var conn = new Ext.data.Connection();				       			conn.request({				       				url: '../tarifaadicional/insert' ,				       				params:{ids:registros, idconvenio:myscope.idconvenio},				       				success: function(response, opts) {				       					var obj = Ext.decode(response.responseText);				       					win_adicional_tarifa.close();				       					myscope.loadInfo();				       				},				       				failure: function(response, opts) {				       					var obj = Ext.decode(response.responseText);				       					Ext.Msg.alert('Error',obj.message);				       				}				       			});			         						         						         		}			         	}			         					       ]		});		win_adicional_tarifa.show();  	},	modificar:function(){						if (!this.permiteacceso){			mensajeAlert("Convenio ya fue autorizado, operaci�n no permitida.");     		return;		}				var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		Ext.Msg.alert('Verificar',"Debe de Seleccionar solo un registro para modificar");     		return;     	}		if(rows.length >1){     		Ext.Msg.alert('Verificar',"Seleccione solamente un registro a modificar");     		return;     	}				},			eliminar:function(){		if (!this.permiteacceso){			mensajeAlert("Convenio ya fue autorizado, operación no permitida.");     		return;		}		var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		 Ext.Msg.alert('Verificar',"Seleccione los registros que desea eliminar");     		return;     	}		    	 Ext.MessageBox.confirm('Confirmacion', 'Desea borrar los registros seleccionados?', function(id, text){       		if ( (id === 'yes')  || (id === 'si') || (id === 'y' ) || (id === 's' ) ){        			if(rows.length == 0){  //step 3       				return ;       			}       			//Verifica que no pueda eliminar los adicionales obligatorios       			for(i=0;i<rows.length;i++){       				if (rows[i].get('estatus') == 1) {       					Ext.Msg.alert('Adicional Obligatorio',"El adicional "+ rows[i].get('descripcion') +        						 " no puede ser eliminado.");       	     			return;					}       			}       			var store = this.getView().getStore();       			//Elimina los registros seleccionados       			deleteSyncStore(this, store, rows,true);       		}       	 },this);     	 				},	showDetails:function(){			var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		Ext.Msg.alert('Verificar',"Debe de Seleccionar solo un registro para visualizar");     		return;     	}		if(rows.length >1){     		Ext.Msg.alert('Verificar',"Seleccione solamente un registro a visualizar");     		return;     	}		},	loadInfo:function(){		this.getView().getStore().load();		},	commitInfo:function(){		this.getView().getStore().save( );		this.getView().getStore().commitChanges();		},	saveInfo:function(){		updateSyncStore(this,this.getView().getStore(), true);				//this.getView().getStore().save( );		//this.getView().getStore().commitChanges();		//this.loadInfo();		},	loadInfoWithId:function(id, permiteacceso){		this.permiteacceso = permiteacceso!=undefined?permiteacceso:true;				this.idconvenio = id;		this.store.getProxy().setExtraParam("idconvenio", this.idconvenio);		this.reloadInfo();	},		reload:function(id){		this.idconvenio = id;		this.getView().getStore().reload(				{					params:{idconvenio:this.idconvenio},					callback:function(r,options,success){						 if (r.length<=0){						 }					 }	  				});			},	reloadInfo:function(){		this.getView().getStore().reload();		}	});