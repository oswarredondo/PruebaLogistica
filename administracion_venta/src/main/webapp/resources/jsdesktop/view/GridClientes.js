Ext.define('MyDesktop.view.GridClientes', {    extend: 'Ext.grid.Panel',    requires: [        'Ext.grid.column.Action' //,       //'Ext.ux.grid.FiltersFeature'     ],    /*plugins: [ 'bufferedrenderer'],    features: [         {	        ftype : 'groupingsummary',	        groupHeaderTpl : '{name}',	        hideGroupedHeader : false,	        enableGroupingMenu : false	    }, {	        ftype: 'filters',	        local: true	    }, {	        ftype: 'summary',	        dock: 'bottom'	    }    ],*/    stateful: true,    collapsible: false,    multiSelect: true,   // title: 'Clientes',    viewConfig: {        stripeRows: true,        enableTextSelection: true    },   	id:undefined,	isConsulta:false,	myScope:undefined,	combo_tipos_busqueda:undefined,	grid_direcciones:undefined,	grid_contactos:undefined,    initComponent: function () {		this.myScope = this;		//this.iconCls='clientes';		//Si el grid no es de consulta entonces muestra la barra para administrar los datos		if (!this.isConsulta){					}		this.combo_tipos_busqueda= Ext.create('Ext.form.ComboBox', {			fieldLabel: '',			disabled: false,			editable:false,			forceSelection:true,			store: Ext.create('MyDesktop.store.StoreTiposBusquedaClientes',{}) ,			queryMode: 'local',			emptyText: 'Seleccione Tipo',			displayField: 'descripcion',			valueField: 'idtipo'		});		this.tbar=[				{						xtype: 'buttongroup', // <--- grouping the buttons						items:[						       								{xtype: 'label', text:'Buscar por:'	},								this.combo_tipos_busqueda,								{xtype: 'label', text:'Patrón:'	},								{xtype: 'myUpperCaseTextField', id:'idpatronCliente', allowBlank: false},								{ iconCls: 'buscar_blue',handler:this.buscar, scope:this},								{xtype: 'tbfill'}																	       						       ]				}   							];					this.store = Ext.create('MyDesktop.store.StoreClientes',{});		this.selType= 'checkboxmodel';		var sm = Ext.create('Ext.selection.CheckboxModel',{mode : 'SINGLE'});		this.selModel= sm;		this.loadMask=true;                  this.columns = [                        {text     : 'Id',width:30,sortable : true,dataIndex: 'idcliente'},						{							menuDisabled: true,							sortable: false,							xtype: 'actioncolumn',							width:30,							items: [								{									getClass: function(v, meta, rec) {										if (rec.get('estatus') == 1) {											return 'activo' ;										}if (rec.get('estatus') == 3) {											return 'clientebloqueado';										}else {											return 'desactivado';										}									},									getTip: function(v, meta, rec) {										if (rec.get('estatus') == 1) {											return 'Activo' ;										}if (rec.get('estatus') == 3) {											return 'Bloqueado';										} else {											return 'Desactivado';										}									},									handler: function(grid, rowIndex, colIndex) {										var rec = grid.getStore().getAt(rowIndex),										action = (rec.get('estatus') ==1 ? 'Activo' : 'Desactivado');										mensajeConfirm( action + ' ' + rec.get('nombre'));									}								}							]						},						/*{							menuDisabled: true,							sortable: false,							xtype: 'actioncolumn',							width:30,							items: [								{									getClass: function(v, meta, rec) {										if (rec.get('tipocliente') == 1) {											return 'clientes' ;										}else {											return 'cuenta_blue';										}									},									getTip: function(v, meta, rec) {										if (rec.get('tipocliente') == 1) {											return 'Cliente' ;										}else {											return 'Prospecto';										}									},									handler: function(grid, rowIndex, colIndex) {										var rec = grid.getStore().getAt(rowIndex),										action = (rec.get('estatus') ==1 ? 'Activo' : 'Desactivado');										Ext.Msg.alert(action, action + ' ' + rec.get('nombre'));									}								}							]						},*/						{text     : 'Creado por',flex     : 1,sortable : false,dataIndex: 'logincreador', hidden:true},											{text     : 'Num.Cliente',flex     : 1,sortable : true,dataIndex: 'numcliente'},						{text     : 'Razon Social',flex     : 1,sortable : true,dataIndex: 'descripcion'},						//{text     : 'Referencia',flex     : 1,sortable : true,dataIndex: 'referencia'},						{text     : 'R.F.C',flex     : 1,sortable : true,dataIndex: 'rfc'},						{text     : 'Tipo',flex     : 1,sortable : true,dataIndex: 'tipopersona'}																];			this.callParent();    },	agregar:function(){		//Crea una forma de clientes para agregar los datos		var forma_agregar = Ext.create('MyDesktop.view.FormClientes',{id:'agregar_cliente',operacion:'insert'}); 		var ventana = Ext.create('widget.window', {			id:'utils-win-agregar-cliente',			title: "Agregar Datos Cliente",			iconCls: 'agregar',			width: 400,			height: 480,			modal:true,			plain: true,			headerPosition: 'right',			layout: 'fit',			items: forma_agregar					});		forma_agregar.setWinPrincipal(ventana);		ventana.show();					},	modificar:function(){		var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		mensajeAlert("Debe de Seleccionar solo un registro para modificar");     		return;     	}		if(rows.length >1){     		mensajeAlert("Seleccione solamente un registro a modificar");     		return;     	}		for (i=0;i<rows.length;i++){     		if (rows[i].get('estatus')==3){     			mensajeAlert("Registro "+rows[i].get('descripcion')+ " esta bloqueado, operación inválida.");         		return;     		}						}				//Crea una forma de clientes para agregar los datos		var forma_modificar = Ext.create('MyDesktop.view.FormClientes',{id:'modificar_cliente',operacion:'update',idcliente:rows[0].get('idcliente')}); 		forma_modificar.updateCampos(rows[0]);		var ventana = Ext.create('widget.window', {			id:'utils-win-agregar-cliente',			title: "Modificar Datos Cliente",			width: 400,			iconCls: 'editar',			height: 480,			modal:true,			plain: true,			headerPosition: 'right',			layout: 'fit',			items: forma_modificar					});		forma_modificar.setWinPrincipal(ventana);		ventana.show();	},		showDetails:function(){			var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		mensajeAlert("Debe de Seleccionar solo un registro para modificar");     		return;     	}		if(rows.length >1){     		mensajeAlert("Seleccione solamente un registro a modificar");     		return;     	}		//Crea una forma de clientes para agregar los datos		var forma_showdetails = Ext.create('MyDesktop.view.FormClientes',{id:'showdetails_cliente',showReadOnly:true}); 		forma_showdetails.updateFieldReadOnly(rows[0]);		Ext.create('widget.window', {			id:'utils-win-agregar-cliente',			title: "Detalles Datos Cliente",			width: 600,			height: 500,			modal:true,			plain: true,			headerPosition: 'right',			layout: 'fit',			items: forma_showdetails					}).show();	},	reasignar:function(){		var myscope =this;		var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		mensajeAlert("Debe de Seleccionar solo un registro para modificar");     		return;     	}		if(rows.length >1){			mensajeAlert("Seleccione solamente un registro a modificar");     		return;     	}		//Crea una forma de clientes para agregar los datos		var gridUsuarios = Ext.create('MyDesktop.view.GridUsuariosMismoAgrupamiento',{}); 		Ext.create('widget.window', {			id:'utils-win-agregar-cliente',			title: "Usuarios disponibles",			width: 500,			height: 500,			modal:true,			plain: true,			headerPosition: 'right',			layout: 'fit',			items: gridUsuarios,			buttons:[			         {text:'Asignar', handler:function(){			        	   //Obtiene los registros seleccionados del grid			        	   var registro = gridUsuarios.getRowSelected();			        	   if (registro==undefined){			        		   mensajeAlert('Seleccione el registro deseado.');			        		   return;			        	   }			        	   			        	   Ext.MessageBox.confirm('Confirmar',"Desea reasignar el cliente al usuario seleccionado?",			        			   function(id, text){			   	       		if ( (id === 'yes')  || (id === 'si') || (id === 'y' ) || (id === 's' ) ){ 			   	       						   	       			var conn = new Ext.data.Connection();			   	       			conn.request({			   	       				url: '../catalogo/clientes/updateUsuarioCreador' ,			   	       				params:{login:registro.get('login'), idcliente:rows[0].get('idcliente')},			   	       				success: function(response, opts) {			   	       					var obj = Ext.decode(response.responseText);			   	       					mensajeConfirm(obj.message);			       								   	       					myscope.buscar('00', '');			   	       				},			   	       				failure: function(response, opts) {			   	       					var obj = Ext.decode(response.responseText);			   	       					mensajeAlert(obj.message);			   	       				}			   	       			});			   	       		}			   	       	 },this);			         				         	}			         }			  ]					}).show();					},	eliminar:function(){			}, 	bloquear:function(estatus){		var myscope= this;		var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		 mensajeAlert("Seleccione los registros que desea bloquear.");     		return;     	}		var mensaje = 'Desea bloquear los clientes seleccionados?';		if (estatus==1){			mensaje = 'Desea reactivar los clientes seleccionados?';		}		 Ext.MessageBox.confirm('Confirmar',mensaje, function(id, text){	       		if ( (id === 'yes')  || (id === 'si') || (id === 'y' ) || (id === 's' ) ){ 	       		//Obtiene todos los registros seleccionados	       			var registros ='';	       			for (i=0;i<rows.length;i++){	       					       				registros = registros+  rows[i].get('idcliente')+ "|";	       			}	       			var conn = new Ext.data.Connection();	       			conn.request({	       				url: '../catalogo/clientes/bloquear' ,	       				params:{idsclientes:registros, estatus:estatus},	       				success: function(response, opts) {	       					var obj = Ext.decode(response.responseText);	       				// Ext.MessageBox.alert('Confirmaci�n',obj.message);	       						       					myscope.buscar('00', '');	       						       						       				},	       				failure: function(response, opts) {	       					var obj = Ext.decode(response.responseText);	       					Ext.Msg.alert('Error',obj.message);	       				}	       			});	       		}	       	 },this);	},	activar:function(){		var myscope= this;		var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		mensajeAlert("Seleccione los registros que desea activar");     		return;     	}		     	for (i=0;i<rows.length;i++){     		if (rows[i].get('estatus')==3){     			mensajeAlert("Registro "+rows[i].get('descripcion')+ " esta bloqueado, operaci�n inválida.");         		return;     		}						}     			 Ext.MessageBox.confirm('Confirmar','Desea activar los clientes seleccionados?', function(id, text){	       		if ( (id === 'yes')  || (id === 'si') || (id === 'y' ) || (id === 's' ) ){ 	       		//Obtiene todos los registros seleccionados	       			var registros ='';	       			for (i=0;i<rows.length;i++){	       					       				registros = registros+  rows[i].get('idcliente')+ "|";	       			}	       			var conn = new Ext.data.Connection();	       			conn.request({	       				url: '../catalogo/clientes/activar' ,	       				params:{idsclientes:registros},	       				success: function(response, opts) {	       					var obj = Ext.decode(response.responseText);	       					mensajeConfirm(obj.message);	       						       					myscope.buscar('00', '');	       						       						       				},	       				failure: function(response, opts) {	       					var obj = Ext.decode(response.responseText);	       					Ext.Msg.alert('Error',obj.message);	       				}	       			});	       		}	       	 },this);					},	desactivar:function(){		var rows =  this.getView().getSelectionModel().getSelection();		var myscope= this;     	if(rows.length <=0){     		mensajeAlert("Seleccione los registros que desea desactivar");     		return;     	}		    	for (i=0;i<rows.length;i++){     		if (rows[i].get('estatus')==3){     			mensajeAlert("Registro "+rows[i].get('descripcion')+ " esta bloqueado, operaci�n inválida.");         		return;     		}						}    	     	 Ext.MessageBox.confirm('Confirmar','Desea desactivar los clientes seleccionados?', function(id, text){	       		if ( (id === 'yes')  || (id === 'si') || (id === 'y' ) || (id === 's' ) ){ 	       		//Obtiene todos los registros seleccionados	       			var registros ='';	       			for (i=0;i<rows.length;i++){	       					       				registros = registros+  rows[i].get('idcliente')+ "|";	       			}	       			var conn = new Ext.data.Connection();	       			conn.request({	       				url: '../catalogo/clientes/desactivar' ,	       				params:{idsclientes:registros},	       				success: function(response, opts) {	       					var obj = Ext.decode(response.responseText);	       					mensajeConfirm(obj.message);	       						       					myscope.buscar('00', '');	       						       						       				},	       				failure: function(response, opts) {	       					var obj = Ext.decode(response.responseText);	       					Ext.Msg.alert('Error',obj.message);	       				}	       			});	       		}	       	 },this);					},		setProxyURL:function(url){		//Actualiza el URL para poder redireccionar el cargado de datos		this.getView().getStore().getProxy().url = url;		this.getView().getStore().load();	},	reload:function(idcliente){			},		buscar:function(tipobusqueda, patronbusqueda){				//Busca los clientes de acuerdo al patrion seleccionado				var tipobusqueda = (this.combo_tipos_busqueda.getValue()!=undefined &&		Ext.util.Format.trim(this.combo_tipos_busqueda.getValue()) !='')?Ext.util.Format.trim(this.combo_tipos_busqueda.getValue()):'';				var patronbusqueda = Ext.util.Format.trim(Ext.getCmp('idpatronCliente').getValue());		if (tipobusqueda==''){			tipobusqueda='00';		}		if (tipobusqueda!='00'){			if (patronbusqueda==''){				mensajeAlert('Indique coincidencia a buscar.');				return;			}		}				//Limpia los grids e inicia la busqueda		if (this.grid_direcciones!=undefined){			this.grid_direcciones.reload(-1);		}		if (this.grid_contactos!=undefined){			this.grid_contactos.reload(-1);		}				//this.grid_clientes.buscar(tipobusqueda,patronbusqueda);				this.getView().getStore().reload(					{						params:{tipobusqueda:tipobusqueda,patronbusqueda:patronbusqueda},						callback:function(r,options,success){							 if (r.length<=0){								 Ext.Msg.show({									 title: 'Aviso',									 msg: 'No existe información con el criterio de busqueda selecionado.',									 modal: false,									 icon: Ext.Msg.INFO,									 buttons: Ext.Msg.OK														 });  															 }						 }	  					});	},	getRowSelected:function(){		var rows =  this.getView().getSelectionModel().getSelection();		if(rows.length >1){			return rows[0];		}		return undefined;	}	});