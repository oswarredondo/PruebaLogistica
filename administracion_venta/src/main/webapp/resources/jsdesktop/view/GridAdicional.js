Ext.define('MyDesktop.view.GridAdicional', {    extend: 'Ext.grid.Panel',    requires: [        'Ext.grid.column.Action',        'Ext.grid.plugin.CellEditing',        'Ext.form.field.Text',        'Ext.toolbar.TextItem'    ],    stateful: true,    collapsible: false,    multiSelect: true,    stateId: 'stateGridAdicional',    viewConfig: {        stripeRows: true,        enableTextSelection: true    },	id:undefined,	isConsulta:false,	myScope:undefined,    initComponent: function () {    	    	var store_sino = Ext.create('MyDesktop.store.StoreTipoAdicional',{}) ;    	var store_tipo_incremneto = Ext.create('MyDesktop.store.StoreTipoIncremento',{}) ;		this.myScope = this;		//Si el grid no es de consulta entonces muestra la barra para administrar los datos		if (!this.isConsulta){			 this.editing = Ext.create('Ext.grid.plugin.CellEditing',{clicksToEdit: 1});			 this.plugins = this.editing;			 			 this.tbar=[												{ text: 'Salvar Cambios',iconCls: 'reload_blue',handler:this.saveInfo, scope:this.myScope },												{xtype: 'tbfill'},						{ text: 'Agregar',iconCls: 'agregar',handler:this.agregar, scope:this.myScope },						{xtype:'tbseparator'},						{ text: 'Borrar',iconCls: 'borrar',handler:this.eliminar,scope:this.myScope }									];		}				this.store = Ext.create('MyDesktop.store.StoreAdicionales',{});		this.selType= 'checkboxmodel';        this.columns = [											{text     : 'Clave',width: 80,							sortable : true,dataIndex: 'clave',							field: {									xtype: 'myUpperCaseTextField',				                    maxLength:2,				                    minLength:1,				                    required:true,				                    enforceMaxLength:true				                    				                    				            }								},						{text     : 'Descripcion',width: 200,sortable : true,dataIndex: 'descripcion',							field: {								xtype: 'myUpperCaseTextField',			                    maxLength:30,			                    minLength:1,			                    required:true,			                    enforceMaxLength:true			                    			                    							}							},						{text     : 'Precio',width: 95,sortable : true,dataIndex: 'precio',							align: 'right',renderer: 'usMoney',							editor: {								xtype: 'numberfield',								value: 1.0,								maxValue: 9999.99,								allowDecimals:true,								decimalPrecision:2,								decimalSeparator:'.',								thousandSeparator:',',						        required:true,						        minValue: 1.0						       							}									},						{				            text: 'Tipo',				            dataIndex: 'tipo',				            sortable : true,				            width: 170,				            renderer: function (value, metaData, record, rowIndex, colIndex, store) {								var myrecord=undefined;								if (store_sino.getCount() > 0) {									store_sino.each(function(r) {										if (r.data['identificador'] == value) {											myrecord = r;										}									});								}								if (myrecord!=undefined){									return myrecord.get('descripcion');								}								return value;							},				            editor: {				            	  xtype: 'combobox',					                name: 'tipo',					                store: Ext.create('MyDesktop.store.StoreTipoAdicional',{}) ,					                valueField: 'idtipo',					                displayField: 'descripcion',									enforceMaxLength:true,									maxLength:30,					                typeAhead: true,					                queryMode: 'local',					                value:'3',					                allowBlank: false,					                emptyText: ''				            }						},						{				            text: 'Permitir',				            dataIndex: 'tipoincremento',				            sortable : true,				            width: 170,				            renderer: function (value, metaData, record, rowIndex, colIndex, store) {								var myrecord=undefined;								if (store_tipo_incremneto.getCount() > 0) {									store_tipo_incremneto.each(function(r) {										if (r.data['identificador'] == value) {											myrecord = r;										}									});								}								if (myrecord!=undefined){									return myrecord.get('descripcion');								}								return value;							},				            editor: {				            	  xtype: 'combobox',					                name: 'tipoincremento',					                store: Ext.create('MyDesktop.store.StoreTipoIncremento',{}) ,					                valueField: 'identificador',					                displayField: 'descripcion',									enforceMaxLength:true,									maxLength:30,					                typeAhead: true,					                queryMode: 'local',					                allowBlank: false,					                value:'0',					                emptyText: ''				            }						}			];			this.callParent();    },	agregar:function(){		  var rec = new MyDesktop.models.ModeloAdicionales({			  identificador: 0,			  clave:'',			  descripcion: '',			  precio:0.0,			  tipo:'1',			  tipoincremento:0	        }), edit = this.editing;	      edit.cancelEdit();	      this.store.insert(0, rec);	        edit.startEditByPosition({	            row: 0,	            column: 1	      });	        	},	modificar:function(){		var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		Ext.Msg.alert('Verificar',"Debe de Seleccionar solo un registro para modificar");     		return;     	}		if(rows.length >1){     		Ext.Msg.alert('Verificar',"Seleccione solamente un registro a modificar");     		return;     	}			},			eliminar:function(){		var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		 Ext.Msg.alert('Verificar',"Seleccione los registros que desea eliminar");     		return;     	}		    	 Ext.MessageBox.confirm('Confirmacion', 'Desea borrar los registros seleccionados?', function(id, text){       		if ( (id === 'yes')  || (id === 'si') || (id === 'y' ) || (id === 's' ) ){        			if(rows.length === 0){  //step 3       				return ;       			}       			this.getView().getStore().remove(rows);  //step 4       			this.commitInfo();       		}       	 },this);     	 				},	showDetails:function(){			var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		Ext.Msg.alert('Verificar',"Debe de Seleccionar solo un registro para visualizar");     		return;     	}		if(rows.length >1){     		Ext.Msg.alert('Verificar',"Seleccione solamente un registro a visualizar");     		return;     	}		},	loadInfo:function(){		this.getView().getStore().load();		},	commitInfo:function(){		this.getView().getStore().save( );		this.getView().getStore().commitChanges();		},	saveInfo:function(){		/*this.getView().getStore().save( );		this.getView().getStore().commitChanges();		this.loadInfo();*/		updateSyncStore(this,this.getView().getStore(), true);		},	getRowsSelected:function(){		return this.getView().getSelectionModel().getSelection();	}	});