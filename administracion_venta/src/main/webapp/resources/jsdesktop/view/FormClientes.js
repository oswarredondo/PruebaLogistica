Ext.define('MyDesktop.view.FormClientes', { extend: 'Ext.form.Panel',    xtype: 'contact-form',            frame: false,    width: 400,    layout: 'anchor',    border: false,    bodyPadding: 10,    fieldDefaults: {        labelAlign: 'top',        labelWidth: 100,        labelStyle: 'font-weight:bold'    },	comboTipos:undefined,	showReadOnly:false,    defaults: {        anchor: '100%',        margins: '5 0 10 5'    },	forma: undefined,	myscope:undefined,	operacion:undefined,	idcliente:undefined,	winprincipal:undefined,	initComponent: function () {		var operacion_aplicar = this.operacion;		this.myscope=this;		var idcliente_id = this.idcliente==undefined?'':this.idcliente;		var scope_gen= this;		this.items= [			{xtype:'hidden', name:'idcliente', value: idcliente_id},				// idcliente     idgrupo     numcliente     descripcion          rfc     estatus     observacion     clavegrupocliente     descripciongrupocliente    			{				xtype: 'myUpperCaseTextField',				fieldLabel: 'Num. Cliente SIPA',				enforceMaxLength:true,				maxLength:20,				labelAlign: 'top',				 name: 'numcliente',				margin: '0',				allowBlank: true,				hidden:true			}, 			{				xtype: 'myUpperCaseTextField',				fieldLabel: 'Raz칩n Social',				enforceMaxLength:true,				maxLength:40,				labelAlign: 'top',				 name: 'descripcion',				margin: '0',				allowBlank: false			}, 			{				xtype: 'hidden',				fieldLabel: 'Referencia',				enforceMaxLength:true,				maxLength:20,				labelAlign: 'top',				 name: 'referencia',				margin: '0',				allowBlank: false			}, 			 {                xtype: 'combobox',                fieldLabel: 'Tipo Persona',                editable :false,                name: 'tipopersona',                store: Ext.create('MyDesktop.store.StoreTiposPersona',{}),                valueField: 'idtipo',                displayField: 'descripcion',				enforceMaxLength:true,				maxLength:30,                typeAhead: true,                queryMode: 'local',                allowBlank: false,                emptyText: ''            },                     			{				xtype: 'myUpperCaseTextField',				fieldLabel: 'R.F.C',				enforceMaxLength:true,				maxLength:20,				labelAlign: 'top',				 name: 'rfc',				margin: '0',				allowBlank: false			}, 		    {                xtype: 'combobox',                fieldLabel: 'Grupo',                editable :false,                name: 'idgrupo',                store: Ext.create('MyDesktop.store.StoreGrupoCliente',{}),                valueField: 'identificador',                displayField: 'nombre',				enforceMaxLength:true,				maxLength:30,                typeAhead: true,                queryMode: 'local',                allowBlank: false,                emptyText: 'Seleccione grupo...'            },			{				xtype: 'myUpperCaseTextArea',				fieldLabel: 'Observaciones',				enforceMaxLength:true,				maxLength:80,				labelAlign: 'top',				 name: 'observacion',				height: 90,				margin: '0',				allowBlank: true			}		],		this.buttons= [               {                	hidden: this.showReadOnly,		            text: 'Limpiar',iconCls:'limpiar_white',		            scope: this,		            handler: function(){		            	var form = this.up('form').getForm();		            	form.reset();		            }                },				{ hidden: this.showReadOnly, text: 'Salvar', iconCls:'activo',handler:function() {						var form = this.up('form').getForm();						if (form.isValid()) {							var out = [];							Ext.Object.each(form.getValues(), function(key, value){								out.push(key + '=' + value);							});							var myMask = new Ext.LoadMask(Ext.getBody(), {msg:"Agregando informaci칩n espere..."});							myMask.show();																																			form.submit({								params:{idcliente:idcliente_id},								clientValidation: true,								url: '../catalogo/clientes/' + operacion_aplicar,								success: function(form, action) {									myMask.hide( );									myMask.disable();									if (operacion_aplicar!='update'){										form.reset();									}									if (scope_gen.winprincipal!=undefined){										scope_gen.winprincipal.close();									}									mensajeConfirm(action.result.message);												},								failure: function(form, action) {									myMask.hide( );									myMask.disable();																		mensajeAlert(action.result.message);								}							});																			}else{							mensajeWarning('Complete los campos requeridos.');						}					}			}		];			this.callParent();			},	getValueField:function(campo){		var fields = Ext.getCmp(this.id).getForm().getFields( ) ;		var valor = '';		var items = fields.items;		for(i = 0; i < items.length; i++){			field = items[i];			if (field!=undefined){				if ((field.getName()!=undefined) && (field.getName()==campo)){					valor= field.getValue();								}			}		}		return valor;	},   	updateCampos:function(record){		//alert(Ext.getCmp(this.id));		var fields = Ext.getCmp(this.id).getForm().getFields( ) ;		this.updateFieldName(record,fields);							},	updateFieldName:function(record, fields){		var items = fields.items;		var valor ="";		for(i = 0; i < items.length; i++){			field = items[i];			if (field!=undefined){				if (field.getName()!=undefined){					//busca el nombre del campo que debe ser el mismo del nombre del campo de 					//la forma					valor = record.get(field.getName());					if (valor!=undefined){						//alert('Campo:' + field.getName() + ', valor:' +valor);						field.setValue(valor);					}else{						field.setValue("");					}								}			}		}	},	updateFieldReadOnly:function(record){			//alert(Ext.getCmp(this.id));		var fields = Ext.getCmp(this.id).getForm().getFields( ) ;				var items = fields.items;		var valor ="";		for(i = 0; i < items.length; i++){			field = items[i];			if (field!=undefined){				if (field.getName()!=undefined){					field.setReadOnly(true);								}			}		}				this.updateCampos(record);	},		showGridCps: function(b, e){		var fields = Ext.getCmp(this.id).getForm().getFields( ) ;		var tipoconsulta='cp'  ;		var patron ='';		var boton = b.id.split("_")[0];		if (boton=='btnBuscarCP'){			 tipoconsulta='cp'  ;			 patron=getValueFormField('cp',fields);   //Ext.getCmp('idcp').getValue();		}else if (boton=='btnBuscarColonia'){			 tipoconsulta='colonia'  ;			 patron=getValueFormField('colonia',fields);   //Ext.getCmp('idcolonia').getValue();		}else if (boton=='btnBuscarMunicipio'){			 tipoconsulta='municipio'  ;			 patron=getValueFormField('municipio',fields);   //Ext.getCmp('idmunicipio').getValue();		}else{			alert('Tipo de consulta inv치lida.');		}						var gridcps = Ext.create('MyDesktop.view.GridConsultaCPs', { 			isEditable:true,			cp_field:'cp' ,colonia_field:'colonia', municipio_field:'municipio',estado_field:'estado',			fields: fields,form:Ext.getCmp(this.id).getForm(),			tipoconsulta:tipoconsulta,patron:patron,			cp:patron, colonia:patron,municipio: patron		}); 		  		var buscacps_window = new Ext.Window({				width    : 880,height   : 350,				layout   : 'border',				title	: 'Busqueda de c칩digos postales',				closable:false,				headerPosition: 'left',				items    : [				   {items   : gridcps,layout :'fit',region :'center',height   : 100}				   ],				buttons: [					{text   : 'Salir',handler: function(){buscacps_window.close();}}		        ]			}); 		gridcps.setScopeWin(buscacps_window);			 buscacps_window.show();		},	setWinPrincipal:function(winp){		this.winprincipal = winp;	}	});