Ext.define('MyDesktop.grid.GridAgendaOR', {    extend: 'Ext.grid.Panel',    xtype: 'row-expander-grid',    requires: [        'Ext.grid.column.Action',        //'Ext.grid.plugin.CellEditing',        'Ext.form.field.Text',        'Ext.toolbar.TextItem',        'Ext.menu.Menu'    ],    //stateful: true,    collapsible: false,    multiSelect: true,    stateId: 'stateGridAgendaOR',    viewConfig: {       stripeRows: false,        enableTextSelection: true    },       plugins: [{        ptype: 'rowexpander',        rowBodyTpl : new Ext.XTemplate(      	  '<p><b>Fecha Solicitud:</b> {fechacaptura}</p>',      	  '<p><b>Quién Captura:</b> {quiencaptura}</p>',            '<p><b>Depto Atiende:</b> {depto_que_atiende}</p>',            '<p><b>Quién Atiende:</b> {nombre_quien_atiende}</p><br>',            '<p><b>Datos Remitente:</b> {datosorigen}</p>',            '<p><b>Datos Destino:</b> {datosdestino}</p>',            '<p><b>Solución:</b> {tiposolucion}</p>',            '<p><b>Fecha Cierre:</b> {fechacierre}</p>',            '<p><b>Cierre:</b> {comentariocierre}</p>',                                           {            formatChange: function(v){                var color = v >= 0 ? 'green' : 'red';                return '<span style="color: ' + color + ';">' + Ext.util.Format.usMoney(v) + '</span>';            }        })    }],    	uuid:undefined,	idregistro:undefined,	id:undefined,	isConsulta:false,	myScope:undefined,	uuid:undefined,	idregistro:undefined,	mystore:undefined,	isCancelar:true,	icita:true,	irechazo:true,	encabezados:'',	ismenuDesabled:false,	customStore:undefined,	ocultaBotonPDF:false,	ocultaBotonExportar:false,	isFueraSitio:false,    initComponent: function () {        	var ismenuDesabled=false;    	var my_scope = this;    	    	var today = new Date();    	this.store = Ext.create('MyDesktop.store.StoreAgendaOR',{}) ;    	var sm = Ext.create('Ext.selection.CheckboxModel',{mode : 'SINGLE'});		this.selModel= sm;    	  this.columns = [  						 { header   : 'Estatus', dataIndex:'estatus', tooltip:'estatus', width: 100, sortable : true },  						 { header   : 'Prioridad',dataIndex:'prioridad',  tooltip:'prioridad', width: 100, sortable : true },  						 { header   : 'Folio', dataIndex:'folio', tooltip:'folio', width: 100, sortable : true },  						 { header   : 'Guía', dataIndex:'iddocumento', tooltip:'iddocumento', width: 170, sortable : true },  						 { header   : 'Reclama',dataIndex:'quiensolicita',  tooltip:'quiensolicita', width: 170, sortable : true },  						 { header   : 'Nombre', dataIndex:'nombresolicita', tooltip:'nombresolicita', width: 170, sortable : true },  						 { header   : 'Teléfono', dataIndex:'telefonosolicita', tooltip:'telefonosolicita', width: 170, sortable : true },  						// { header   : 'Remite', dataIndex:'datosorigen', tooltip:'datosorigen', width: 170, sortable : true },  						// { header   : 'Destino', dataIndex:'datosdestino', tooltip:'datosdestino', width: 170, sortable : true },  						 { header   : 'Problema', dataIndex:'tipoproblema', tooltip:'tipoproblema', width: 170, sortable : true },  						 { header   : 'Solución', dataIndex:'tiposolucion', tooltip:'tiposolucion', width: 170, sortable : true }  			];    	      	               	  var combo_tipos_busqueda= Ext.create('Ext.form.ComboBox', {    			fieldLabel: '',    			 width: 200,    			disabled: false,    			editable:false,    			id:'tipobusqueda'+this.id,    			store: Ext.create('MyDesktop.store.StoreTiposBusquedaOR',{}) ,    			queryMode: 'local',    			emptyText: 'Seleccione orden',    			displayField: 'descripcion',    			valueField: 'idtipo'    		});    		combo_tipos_busqueda.setValue("10");    		    	  this.dockedItems= [    	               		/*{     	               			xtype: 'toolbar',    	               			dock: 'bottom',    	               			items: [    	       			                 	       		           	       	       			                  	       		           	    {xtype:'tbfill'},    	       		           	    {text: "Cancelar",tooltip:'Cambia el estatus de la gu�a a CANCELADO',      	       		           	    	scope: my_scope,iconCls:'deleteRed16x16',       	       		           	    	handler:my_scope.cancelarRecord},    	               			]    	               		},*/    	               		{     	               			xtype: 'toolbar',    	               			dock: 'top',    	               			items: [						{xtype:'label', text:'Buscar por:'},    						combo_tipos_busqueda,						{xtype:'tbseparator'},								{xtype:'myUpperCaseTextField', id:'iddatoabuscar'+my_scope.id, maxLength:500,allowBlank:true,width:250 },								{xtype:'tbseparator'},								  { tooltip:'Realiza la búsqueda ',iconCls:'search_blue', handler:my_scope.realizaConsulta, scope:this} 								    	       			           	               			]    	               		},    	               		{     	               			xtype: 'toolbar',    	               			dock: 'left',    	               			items: [									{text: "Buscar Guia",tooltip:'Muestra las notas de la guía ',											scope: my_scope,iconCls:'dir_revisar',											handler:my_scope.buscarGuiaRastreo},	       	               			     { text: "Crear Orden Rastreo", tooltip:'Crea una OR ',iconCls:'estatus30',     	       			            	scope: my_scope,handler:my_scope.crearOrgenAgenda},     	       			            		    	       			            { text: "Cerrar Caso", tooltip:'Cierra el caso',iconCls:'wallpaper_blue',    	       			            	scope: my_scope, handler:my_scope.cerrarCaso},    	       			             { text: "Cancelar Caso", tooltip:'Cierra el caso',iconCls:'deleteRed16x16',         	       			            	scope: my_scope, handler:my_scope.cancelarCaso},         	       			            {xtype:'tbseparator'},	               	       			    { text: "Reabrir Caso", tooltip:'Reabre el caso de orden de restreo',                 	       			 scope: my_scope, iconCls:'activo',handler:my_scope.reabrierCaso},    	         	       			            	                 	       			{xtype:'tbseparator'}    	       			                	       			           	               			]    	               		},    	               		{     	               			xtype: 'toolbar',    	               			dock: 'right',    	               			items: [    	               			     {text: "Notas",tooltip:'Muestra las notas de la guía ', 	       			            		scope: my_scope,iconCls:'notas_blue', 	       			            		handler:my_scope.abreVentanaNotas},	 	       			            	{xtype:'tbseparator'},	     	       			            { text: "Asignar Caso A..", tooltip:'Asignar la orden a un usuario',        	       			            	scope: my_scope, iconCls:'usuarios_blue',handler:my_scope.cerrarCaso},        	       			        { text: "Reasigna a Plaza", tooltip:'Reasigna la OR a otra plaza',            	       			            	scope: my_scope, iconCls:'entidad_blue',handler:my_scope.cerrarCaso},    	    	       			            { text: "Formato PDF", tooltip:'Imprime PDF Orden Rastreo',    	       			            	scope: my_scope, iconCls:'pdf_blue',handler:my_scope.cerrarCaso}    	       			           	               			]    	               		}    	              ];							this.callParent();    },    reabrierCaso:function(){    	var rows =  this.getView().getSelectionModel().getSelection();    	var myscope = this;     	if(rows.length <=0){     		mensajeAlert("Debe de seleccionar un registro. ");     		return;     	}		if(rows.length >1){     		mensajeAlert("Seleccione solamente un registro. ");     		return;     	}		if (( rows[0].get('estatus')!='CERRADO') && ( rows[0].get('estatus')!='CANCELADO')){     		mensajeAlert("Caso no ha sido cerrado ó cancelado, acción inválida.");     		return;     	}		if ( rows[0].get('estatus')=='REABRIERTO'){     		return;     	}						 Ext.MessageBox.confirm('Confirmacion', "¿Desea reabir el caso seleccionado?", function(id, text){		       		if ( (id === 'yes')  || (id === 'si') || (id === 'y' ) || (id === 's' ) ){ 					       			var conn = new Ext.data.Connection();						 //Obtiene los datos de fecha inicial y final						 conn.request({								url:'../agendarastreo/reabircaso',								method:'GET',								params:{folio:rows[0].get('folio')},								//form:'forma_resumen',								success:function (response, opts){																			var obj = Ext.decode(response.responseText);																				if (response.failure!=undefined){											mensajeAlert(response.failure);										}else{											mensajeAlert(obj.message);											myscope.realizaConsulta();										}																						},								failure:function (response, opts){									var obj = Ext.decode(response.responseText);									mensajeAlert("Error ",response.message);								}																});			 		       		}	       	 },myscope);		    },    crearOrgenAgenda:function(){    	var forma_cita = new MyDesktop.form.FormAgregaAgendaOR({    		iddocumento: '',    		remite:'',    		destino:'',    		operacion:'insert',    		isConGuia:false    		    	});      	    	var win_historia = Ext.create('widget.window', {						title: "Orden Rastreo" ,			width: 650,			height: 580,			modal:true,			plain: true,			headerPosition: 'right',			layout: 'fit',			items: forma_cita					});    	    	win_historia.show();    },    buscarGuiaRastreo:function(){    	var grid_ras= new MyDesktop.grid.GridConsultaEtiquetas({			autoScroll: true,			buscarHistoriaUps:true,			forceFit    : true,			scrollOffset: 0		});					var win_rastreo = Ext.create('widget.window', {					title: "Rastreo Envios" ,			width: 1200,			height: 400,			modal:true,			plain: true,			headerPosition: 'right',			layout: 'fit',			items: grid_ras					});				win_rastreo.show();    	    	    },        cancelarCaso:function(){    	var rows =  this.getView().getSelectionModel().getSelection();    	var myscope = this;     	if(rows.length <=0){     		mensajeAlert("Debe de seleccionar un registro. ");     		return;     	}		if(rows.length >1){     		mensajeAlert("Seleccione solamente un registro. ");     		return;     	}		if (( rows[0].get('estatus')=='CERRADO') || ( rows[0].get('estatus')=='CANCELADO')){     		mensajeAlert("Caso ya fue cerrado o cancelado.");     		return;     	}		    	var forma_cerrarcaso = new MyDesktop.form.FormCierreAgendaOR({    		grid_scope: myscope, isCancelar:true    	});      	forma_cerrarcaso.updateCampos(rows[0]);    	var win_cerrar_caso = Ext.create('widget.window', {						title: "Cancelar folio:" + rows[0].get('folio') ,			width: 500,			height: 280,			modal:true,			plain: true,			headerPosition: 'right',			layout: 'fit',			items: forma_cerrarcaso					});    	forma_cerrarcaso.setWinPrincipal(win_cerrar_caso);    	forma_cerrarcaso.setWinPrincipal(win_cerrar_caso);    	    	win_cerrar_caso.show();    },    cerrarCaso:function(){    	var rows =  this.getView().getSelectionModel().getSelection();    	var myscope = this;     	if(rows.length <=0){     		mensajeAlert("Debe de seleccionar un registro. ");     		return;     	}		if(rows.length >1){     		mensajeAlert("Seleccione solamente un registro. ");     		return;     	}		if (( rows[0].get('estatus')=='CERRADO') || ( rows[0].get('estatus')=='CANCELADO')){     		mensajeAlert("Caso ya fue cerrado o cancelado.");     		return;     	}		    	var forma_cerrarcaso = new MyDesktop.form.FormCierreAgendaOR({    		grid_scope: myscope    	});      	forma_cerrarcaso.updateCampos(rows[0]);    	var win_cerrar_caso = Ext.create('widget.window', {						title: "Cerrar folio:" + rows[0].get('folio') ,			width: 500,			height: 280,			modal:true,			plain: true,			headerPosition: 'right',			layout: 'fit',			items: forma_cerrarcaso					});    	forma_cerrarcaso.setWinPrincipal(win_cerrar_caso);    	forma_cerrarcaso.setWinPrincipal(win_cerrar_caso);    	    	win_cerrar_caso.show();    	    },	    abreVentanaNotasRow:function(row, isConsulta, scope){    	var identificador_str = row.get('folio');		var tipodocto_str = "ORASTREO";		var customStore=  Ext.create('MyDesktop.store.StoreAttachment',					{													baseParams:{								identificador:identificador_str,								idtipodocumento:tipodocto_str						},						proxy: {					        type: 'ajax',					        api: {					            read: '../attachmentnotaagenda/getDatosNotaAgenda?identificador=' +identificador_str+					            '&idtipodocumento=' + tipodocto_str					        },					        reader: {					                 type: 'json',					                 successProperty: 'success',					                 root : 'proxiArray',					                 messageProperty: 'message',					                 totalProperty : 'totalCount',					        },					        writer: {					            	 type: 'json',					                 writeAllFields: true,					                 encode: false,					                 root: 'proxiArray'					        },					        listeners: {					             exception: function(proxy, response, operation){					                     Ext.MessageBox.show({					                         title: 'ERROR ',					                         msg: operation.getError(),					                         icon: Ext.MessageBox.ERROR,					                         buttons: Ext.Msg.OK					                     });					                 }					        }						}					});			var grid_historia_attachement = new MyDesktop.grid.GridNotasAttachment({			autoScroll: true,			forceFit    : true,			customStore:customStore,			isFueraSitio:scope.isFueraSitio,			isConsulta: (isConsulta!=undefined?isConsulta:false),			idtipodocumento: tipodocto_str ,			identificador:row.get('folio'),			ids_str:identificador_str,			tipos_docs_str:tipodocto_str, 			scrollOffset: 0,			getTotalWidth: function() {				return "auto";			}		});				//grid_historia_attachement.loadInfo();				var win_archivos_adjuntos = Ext.create('widget.window', {			id:'utils-win-agregar-cliente',			title: "Notas:" +row.get('idDocumento') ,			width: 800,			height: 500,			modal:true,			plain: true,			headerPosition: 'right',			layout: 'fit',			items: grid_historia_attachement					});				win_archivos_adjuntos.show();    },	abreVentanaNotas:function(){		var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		mensajeAlert("Debe de seleccionar un registro a visualizar. ");     		return;     	}		if(rows.length >1){     		mensajeAlert("Seleccione solamente un registro a visualizar. ");     		return;     	}				this.abreVentanaNotasRow(rows[0],	this.isConsulta, this);    	    }, 	cancelarRecord:function(){		/*var my_scope = this;		//		if (!my_scope.isConsulta){			 var documentos ='';			 	var serv_selected =  this.getView().getSelectionModel().getSelection();			 					if (serv_selected==undefined) return;				if (serv_selected.length<=0){					mensajeAlert('Seleccione los registros a cancdelar');  					return;				}			 	 			 	 //Verifica todos los registros para armar la solicitud y checar si no estan confirmados				 for(i=0;i<serv_selected.length;i++){					 if ((serv_selected[i].get("quienRecibe")!=undefined) && (serv_selected[i].get("quienRecibe")!='')){						 mensajeAlert('Error', 'El documento ' + serv_selected[i].get("idDocumento") + ' ya esta confirmado, no puede ser cancelado.' );						 return;					 }					 if ((serv_selected[i].get("fechaRecibe")!=undefined) && (serv_selected[i].get("fechaRecibe")!='')){						 mensajeAlert('Error', 'El documento ' + serv_selected[i].get("idDocumento") + ' ya esta confirmado, no puede ser cancelado.' );						 return;					 }					 					 var arr =  serv_selected[i].get('estatus').split(",");						if (arr.length<=0){							return '';						}else{							 //if (serv_selected[i].get("estatus")=='C') {					    	if (arr[1]=='CANCELADA'){							 mensajeAlert('Error', 'El documento ' + serv_selected[i].get("idDocumento") + ' ya se encuentra cancelado.' );							 return;					    	}						}										 documentos = documentos+serv_selected[i].get("idDocumento")+",";									 }				 				 Ext.MessageBox.confirm('Confirmacion', "Solo se cancelar�n las guias que que no tengan confirmacion de entrega" +				 		" y que no tengan historia, desea continuar, �Desea continuar?", function(id, text){			       		if ( (id === 'yes')  || (id === 'si') || (id === 'y' ) || (id === 's' ) ){ 							       			var conn = new Ext.data.Connection();							 //Obtiene los datos de fecha inicial y final							 conn.request({									url:'../busqueda_etiquetas/cancelarguia',									method:'GET',									params:{documentos:documentos},									//form:'forma_resumen',									success:function (response, opts){																					var obj = Ext.decode(response.responseText);																						if (response.failure!=undefined){												mensajeAlert(response.failure);											}else{												my_scope.realizaConsulta();											}																									},									failure:function (response, opts){										var obj = Ext.decode(response.responseText);										mensajeAlert("Error ",response.message);									}																		});				 			       		}		       	 },this);		}				//Actualiza los datos del grid		return ;*/    },     realizaConsulta:function(){    	this.buscar(1, this);    	    },	buscar:function(tipoConsulta, myscope){				var tipoBusqueda=Ext.getCmp("tipobusqueda"+myscope.id).getValue();		var tipoBusqueda=Ext.getCmp("tipobusqueda"+myscope.id).getValue();							if (tipoConsulta==1){//Consulta info			myscope.getView().getStore().reload(					{						params:{							tipobusqueda:tipoBusqueda, 							iddatoabuscar:Ext.getCmp('iddatoabuscar'+myscope.id).getValue()													},						callback:function(r,options,success){													 }	  					});		}		/*if (tipoConsulta==2){//Exporta a excel			showAndHideWindows('../busqueda_etiquetas/exportaConsultaEtiquetasExcel?tipobusqueda='+tipoBusqueda+					"&iddatoabuscar="+Ext.getCmp('iddatoabuscar'+myscope.id).getValue()+"&tipoDocumento="+tipoDocumento+					"&fechaini="+ fechaini +"&fechafin="+fechafin);					}*/					    	    },           exportarExcel:function(){    	//this.buscar(2, this);    				},		showVentanaRechazos:function(){    	    },		getRowsSelected:function(){		return this.getView().getSelectionModel().getSelection();	}	});