Ext.define('MyDesktop.grid.GridRecoleccionProgramada', {    extend: 'Ext.grid.Panel',    xtype: 'row-expander-grid',    requires: [        'Ext.grid.column.Action',        'Ext.grid.plugin.CellEditing',        'Ext.form.field.Text',        'Ext.toolbar.TextItem'    ],    stateful: false,    collapsible: false,    multiSelect: true,    stateId: 'stateGridRecoleccionPrograma',    plugins: [{        ptype: 'rowexpander',        rowBodyTpl : new Ext.XTemplate(        		'<table  id="rounded-corner"><thead>',    			'<tr><th scope="col"><b>Identificador:</b> {idsolicitud}({idregistro}), <b>Plaza:</b> {plaza}, <b>Ruta</b>:{rutaasignada}, <b>Fecha incial</b>:{fechainicio},  <b>Fecha final</b>:{fechafin},<b>Hora/Observacion</b>:{observacion}</th></tr></thead><tbody>',    			  '<tr class="odd"><td><b>Tipo:</b> {descripciontiposolicitud}, <b>Empaque</b>:{idempaque}</td></tr>',               '<tr class="odd"><td><b>Razon Social:</b> {razonsocial}, <b>Atencion</b>:{preguntarpor}</td></tr>',    			'<tr><td><b>Direccion:</b> {calle}, <b>Colonia</b>:{colonia}, <b>C.P</b>:{cp}, <b>Municipio</b>:{municipio}, <b>Estado</b>:{estado}</td></tr>',    			'<tr class="odd"><td><b>Telefono:</b> {telefono}, <b>Celular</b>:{celular}</td></tr>',     			'<tr><td><b>Cant. Piezas:</b> {cantidadpzas}, <b>Peso kg (pieza)</b>:{pesokg}, <b>Dimensiones(pieza)</b>:Ancho={ancho},Alto={alto},Largo={largo}</td></tr>',    			'</tbody></table>',        {            formatChange: function(v){                var color = v >= 0 ? 'green' : 'red';                return '<span style="color: ' + color + ';">' + Ext.util.Format.usMoney(v) + '</span>';            }        })    }],    viewConfig: {        stripeRows: true,        enableTextSelection: true    },	uuid:undefined,	idregistro:undefined,	id:undefined,	isConsulta:false,	myScope:undefined,	uuid:undefined,	mystore:undefined,	maniana:undefined,	tiporecol:undefined,    initComponent: function () {    	//Fecha del sistema    	var myscope = this;    	var fechaActual=new Date();    	myscope.maniana = new Date(fechaActual.getTime() + (1 * 24 * 3600 * 1000));    	var grid_recol;    	   	  // this.editing = Ext.create('Ext.grid.plugin.CellEditing',{clicksToEdit: 2});       this.store = Ext.create('MyDesktop.store.StoreRecolecciones',{});              var isadm = checkEnable('administrar.ordenes.recolecion.administrador');          			var gridMenu = Ext.create('Ext.menu.Menu', {    		    items: [       	         {text:'Desbloquear',handler:myscope.ejecutaAccionDesbloquear,iconCls:'BLOQUEADO',       	        	 itemId:'menuItemDesbloquear',name:'menuItemDesbloquear',       	        	disabled:checkEnable("btn-menu-contextual-opcion-desbloquear"),       	        	 scope:myscope},               	         {text:'Cancelar',handler:myscope.cancelarRecol,iconCls:'CANCELADA'     	        	 ,itemId:'menuItemCamcelar',name:'menuItemCamcelar',     	        	disabled:checkEnable("btn-menu-contextual-opcion-cancelar"),     	        	 scope:myscope},     	         {text:'Activar',handler:myscope.activar,iconCls:'ACTIVO',itemId:'menuItemActivar',     	        	 name:'menuItemActivar', scope:myscope,     	        	disabled:checkEnable("btn-menu-contextual-opcion-activar")	      	         },     	         {xtype:'menuseparator'},     	         {text:'Reasignar ruta',handler:myscope.reasignar,iconCls:'ruta_blue',itemId:'menuItemReasignaRuta',      	        	 name:'menuItemReasignaRuta', scope:myscope,     	        	disabled:checkEnable("btn-menu-contextual-opcion-reasignar-ruta")	      	         },       			 {xtype:'menuseparator'},     			 {text:'Ver Historia',handler:myscope.verHistoria,iconCls:'HISTORIA',       				 itemId:'menuItemVerHistoria', name:'menuItemVerHistoria', scope:myscope},     			 {xtype:'menuseparator'}		       ]		  }); 						this.listeners= {		      beforeitemcontextmenu: function(view, record, item, index, e)		      {		        e.stopEvent();		        gridMenu.showAt(e.getXY());		      }		};				this.bbar= [      		        { iconCls:'agregar',itemId:'itemmenuNueva',text:'Generar Solicitud',       		        	handler:myscope.showAgregarOrdenRecol,      		        	tooltip:'Genera una nueva Solicitud de Recoleccion',scope:myscope,      		        	disabled:checkEnable("btn-agregar-solicitud-recoleccion-programada")      		        },      		        	 { iconCls:'editar',itemId:'itemmenuModificar',text:'Modificar Solicitud',      		        		handler:myscope.showModificarOrdenRecol,          		        	tooltip:'Modifica los datos de la Solicitud de Recoleccion',scope:myscope,          		        	disabled:checkEnable("btn-modificar-solicitud-recoleccion-programada")      		        	 },      		         {xtype:'tbfill'},      		       {iconCls:'CITARECOL',itemId:'itemmenuDiasMes',text:'Configura Días Recolección',      		        	 handler:myscope.showProgramacion,      		        	 tooltip:'Configura los días del Mes o Semana para recolección',scope:myscope,      		        	disabled:checkEnable("btn-configurar-dias-recoleccion-solicitud-programada") 	       		       }    		             		        ];		 this.tbar= [		             {xtype:'label', text:'Buscar por:'}, 		         	{							xtype: 'combobox',							id: 'idtipobuqueda',							width:220,							//labelWidth: 0,							allowBlank: false,							store: Ext.create('MyDesktop.store.StoreTipoBusquedaRecoleccion'),							forceSelection:true,							valueField: 'idtipo',							displayField: 'descripcion',							typeAhead: true,							queryMode: 'local',							emptyText: '',							value:'7'						},				       {xtype:'tbseparator'},			           {xtype:'label', text:'Tipo documento:'},			           {														xtype: 'combobox',							id: 'idtipoDocumento',							width:210,							//labelWidth: 0,							allowBlank: false,							store: Ext.create('MyDesktop.store.StoreTipoRecoleccion'),							forceSelection:true,							valueField: 'idtipo',							displayField: 'descripcion',							typeAhead: true,							queryMode: 'local',							emptyText: '',							value:'1',													},							             			        	 //{xtype:'hidden', id:'idencabezados', value:encabezados },   						{xtype:'label', text:'Patrón:'},    						{xtype:'myUpperCaseTextField', id:'iddatoabuscar', maxLength:30,allowBlank:true,width:130 },												{xtype:'tbseparator',hidden:false},						{xtype:'label', text:'Fecha inicial:',hidden:false}, 						{ xtype:'datefield',id:'idfechainicio',maxLength:30,allowBlank:false,width:105, value:fechaActual,hidden:false },						//{ xtype:'timefield',id:'idhoraInicial',allowBlank:false,width:80 , format:'H:i'},												{xtype:'tbspacer',hidden:false},				        {xtype:'label', text:'final:',hidden:false}, 				        { xtype:'datefield',id:'idfechafin',maxLength:30,allowBlank:false,width:105, value:fechaActual,hidden:false},				       // { xtype:'timefield',id:'idhoraFinal',allowBlank:false,width:80 ,format:'H:i'},				       // {xtype:'tbseparator'} //,				        { iconCls:'buscar_blue', handler:myscope.buscaInformacionRecolecciones, scope:this}			    ];					        	    var ismenuDesabled=false;		this.selType= 'checkboxmodel';        this.columns = [                    	{							menuDisabled: true,	sortable: false,							xtype: 'actioncolumn',	width: 40,							items: [								{									getClass: function(v, meta, rec) {																				if (rec.get('estatus') == 'C') {											return 'CANCELADA' ;										} if (rec.get('estatus') == 'A'){											return 'ACTIVO';										} if (rec.get('estatus') == 'H'){											return 'HISTORIA';										}   if (rec.get('estatus') == 'L'){											return 'BLOQUEADO';										}									},									getTip: function(v, meta, rec) {										if (rec.get('estatus') == 'C') {											return 'CANCELADA' ;										} if (rec.get('estatus') == 'A'){											return 'ACTIVO';										} if (rec.get('estatus') == 'H'){											return 'CON HISTORIA';										}  if (rec.get('estatus') == 'L'){											return 'BLOQUEADA';										}									},									handler: function(grid, rowIndex, colIndex) {										 var rec = grid.getStore().getAt(rowIndex);										//if (rec.get('estatus') == 'H') {										 myscope.abreVentanaHistoriaRow(rec);										//}									}								}							]						},						{							menuDisabled: true,	sortable: false,							xtype: 'actioncolumn',	width: 40,							items: [								{									getClass: function(v, meta, rec) {																				if (rec.get('idtiporecol') == '1') {											return 'DIARECOL' ;										} if (rec.get('idtiporecol') == '2'){																						return 'DIADELMES';										} if (rec.get('idtiporecol') == '3'){											return 'CITARECOL';										} 									},									getTip: function(v, meta, rec) {										if (rec.get('idtiporecol') == '1') {											return 'ORD. RECOL. X DIA SEMANA ' ;										} if (rec.get('idtiporecol') == '2'){											return 'ORD. RECOL. X DIA MES ';										} if (rec.get('idtiporecol') == '3'){											return 'ORD. RECOL. ESPORADICA ';										} 									},									handler: function(grid, rowIndex, colIndex) {										 var rec = grid.getStore().getAt(rowIndex);										//if (rec.get('estatus') == 'H') {												my_scope.abreVentanaHistoriaRow(rec);										//}									}								}							]						},						                      //  {id :'estatus', header   : '', tooltip:'Estatus', width: 50, sortable : true, hidden:false, dataIndex: 'estatus' ,menuDisabled: ismenuDesabled, renderer:showEstatusRecol  },                        {id :'idsolicitud',header   : 'Sol. Origen ', tooltip:'Identificador',css:css_solicitante, width: 140, sortable : true, hidden:false, dataIndex: 'idsolicitud' ,menuDisabled: ismenuDesabled  },                       // {id :'idrecoleccion',header   : 'Id. Recol', tooltip:'Identificador',css:css_solicitante, width: 150, sortable : true, hidden:false, dataIndex: 'idrecoleccion' ,menuDisabled: ismenuDesabled  },                        {id :'rutaasignada',header   : 'Ruta', tooltip:'Ruta asignada',css:css_solicitante, width: 80, sortable : true, hidden:false, dataIndex: 'rutaasignada' ,menuDisabled: ismenuDesabled  },                                    {id :'quiensolicita',header   : 'Quién Solicita', tooltip:'Quién Solicita',css:css_solicitante, width: 190, sortable : true, hidden:false, dataIndex: 'quiensolicita' ,menuDisabled: ismenuDesabled  },                        {id :'telefonosolicita', header   : 'Telefono ', tooltip:'Telefono',css:css_solicitante, width: 130, sortable : true, hidden:true, dataIndex: 'telefonosolicita' ,menuDisabled: ismenuDesabled  },                        {id :'correosolicita',  header   : 'Correo E.', tooltip:'Correo E.',css:css_solicitante, width: 130, sortable : true, hidden:true, dataIndex: 'correosolicita' ,menuDisabled: ismenuDesabled  },                       	                                   {id :'numcliente', header   : 'Num.Cte.',tooltip:'Número de cliente',css:css_lugarrecol, width    : 90, sortable : true, hidden:false,dataIndex: 'numcliente',menuDisabled: ismenuDesabled },                        {id :'contrato', header   : 'Contrato', tooltip:'Contrato',css:css_lugarrecol,width    : 100, sortable : true, hidden:false,dataIndex: 'contrato',menuDisabled: ismenuDesabled,renderer:formatoCeldaTexto },                        {id :'razonsocial', header   : 'Razón Social ', tooltip:'Razón Social',css:css_lugarrecol,width    : 190, sortable : true, hidden:false,dataIndex: 'razonsocial',menuDisabled: ismenuDesabled,renderer:formatoCeldaTexto },                        {id :'preguntarpor', header   : 'Atención', tooltip:'Atención',css:css_lugarrecol,width    : 200, sortable : true, hidden:false,dataIndex: 'preguntarpor',menuDisabled: ismenuDesabled,renderer:formatoCeldaTexto },                        //{id :'calle', header   : 'Dirección', tooltip:'Dirección',css:css_lugarrecol,width    : 200, sortable : true, hidden:false,dataIndex: 'calle',menuDisabled: ismenuDesabled,renderer:formatoCeldaTexto },                        //{id :'cp', header   : 'C.P', tooltip:'C.P',width    : 70,css:css_lugarrecol, sortable : true, hidden:false,dataIndex: 'cp',menuDisabled: ismenuDesabled,renderer:formatoCeldaTexto },                        //{id :'estado', header   : 'Estado', tooltip:'Estado',css:css_lugarrecol,width    : 150, sortable : true, hidden:false,dataIndex: 'estado',menuDisabled: ismenuDesabled },                        //{id :'telefono', header   : 'Teléfono', tooltip:'Teléfono',css:css_lugarrecol,width    : 100, sortable : true, hidden:true,dataIndex: 'telefono',menuDisabled: ismenuDesabled },                        //{id :'email', header   : 'Correo E.', tooltip:'Correo E.',css:css_lugarrecol,width: 150, sortable : true, hidden:true,dataIndex: 'email',menuDisabled: ismenuDesabled },                        //{id :'observacion', header: 'Hora/Observa',css:css_recoleccion,tooltip:'Hora/observación realizada',width: 90, sortable : true, hidden:false, dataIndex: 'observacion', menuDisabled: ismenuDesabled,menuDisabled: ismenuDesabled,renderer:formatoCeldaTexto },                        {id :'pesototal', header   : 'Peso',css:css_recoleccion,tooltip:'Peso total a recolectar', width: 80, sortable : true, hidden:false,dataIndex: 'pesototal',menuDisabled: ismenuDesabled,                        		renderer:function (value, metaData, record, rowIndex, colIndex, store) {                        			metaData.attr = 'style="white-space:normal"';                        			return (record.get('pesokg')* record.get('cantidadpzas') );                        		}                         },                        {id :'volumen', header   : 'Volumen',css:css_recoleccion,tooltip:'Volumen total a recolectar', width: 80, sortable : true, hidden:false,dataIndex: 'volumen',menuDisabled: ismenuDesabled,                        	renderer:function (value, metaData, record, rowIndex, colIndex, store) {                    			metaData.attr = 'style="white-space:normal"';                    			return (record.get('alto')* record.get('ancho')* record.get('largo'))* record.get('cantidadpzas') ;                    		}                         }			];			this.callParent();    },	/*agregar:function(){		  var rec = new MyDesktop.models.ModeloAdicionales({			  identificador: 0,			  clave:'',			  descripcion: '',			  precio:0.0,			  tipo:'0'	        }), edit = this.editing;	      edit.cancelEdit();	      this.store.insert(0, rec);	        edit.startEditByPosition({	            row: 0,	            column: 1	      });	        	},	modificar:function(){		var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		Ext.Msg.alert('Verificar',"Debe de Seleccionar solo un registro para modificar");     		return;     	}		if(rows.length >1){     		Ext.Msg.alert('Verificar',"Seleccione solamente un registro a modificar");     		return;     	}			},			eliminar:function(){		var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		 Ext.Msg.alert('Verificar',"Seleccione los registros que desea eliminar");     		return;     	}		    	 Ext.MessageBox.confirm('Confirmacion', '¿Desea borrar los registros seleccionados?', function(id, text){       		if ( (id === 'yes')  || (id === 'si') || (id === 'y' ) || (id === 's' ) ){        			if(rows.length === 0){  //step 3       				return ;       			}       			this.getView().getStore().remove(rows);  //step 4       			this.commitInfo();       		}       	 },this);     	 				},	showDetails:function(){			var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		Ext.Msg.alert('Verificar',"Debe de Seleccionar solo un registro para visualizar");     		return;     	}		if(rows.length >1){     		Ext.Msg.alert('Verificar',"Seleccione solamente un registro a visualizar");     		return;     	}		},	loadInfo:function(){		this.getView().getStore().load();		},	commitInfo:function(){		this.getView().getStore().save( );		this.getView().getStore().commitChanges();		},	saveInfo:function(){		this.getView().getStore().save( );		this.getView().getStore().commitChanges();		this.loadInfo();		},	setUUIDIdRegistro:function(uuid,idregistro){		this.uuid=uuid;		this.idregistro = ideregistro;	},*/	getRowsSelected:function(){		return this.getView().getSelectionModel().getSelection();	},	reasignar:function (b, e){		var selected = this.getView().getSelectionModel().getSelection();		var formareasignar ;		var tipoasignacion =''; 		var myscope=this;		var title ='';    	if(selected.length==0){			mensajeAlert('Seleccione los registros que desea afectar.');			return;		}		if ( (b.id == 'btnReasignaRuta') || (b.itemId == 'menuItemReasignaRuta')){			title='Indique la nueva ruta';			formareasignar = new Ext.form.FormPanel({				border:false,				labelWidth:40,				defaults: {					xtype:'textfield',					width: 250				},				items:[					{xtype: 'myUpperCaseTextField',id:'idrutaasignada',						name:'idrutaasignada',allowBlank:false,maxLength:10,enforceMaxLength:true}				]			});			tipoasignacion = 'btnWinReasignarRuta';						}else 	if ( (b.itemId == 'menuItemReasignaFecha') || (b.itemId == 'btnReasignaFecha')){						var rows = myscope.getView().getSelectionModel().getSelection();			var indice=0;	    	for (indice=0;indice<rows.length;indice++){	    		if (rows[indice].get('idtiporecol')!='3'){	    			mensajeAlert('El cambio de fecha solo es permitido para ORDENES ' +	    					'DE RECOLECCION ESPORADICAS ' + rows[indice].get('idtiporecol'));	    			return;	    		}	    	}	    				title='Indique la nueva fecha';			formareasignar =  new Ext.form.FormPanel({					border:false,					labelWidth: 90,					defaults: {						xtype:'textfield',						width: 150					},					items:[						{xtype:'datefield',id:'fechaasignar',name:'fechaasignar',width: 200,							allowBlank:false,minValue:myscope.maniana,value:myscope.maniana}					]			});			tipoasignacion = 'btnWinReasignarFecha';		}else{			return;		}					var winreasignar = new Ext.Window({			id:'idwinreasignar',			title: title,			bodyStyle: 'padding:10px;background-color:#fff;',			width:300,			closable:false,			modal:true,			height:120,			items:[formareasignar],			buttons: [{id:'btnWinReasignarRuta',name:'btnWinReasignarRuta',text:'Reasignar',						handler:function(){										var ejecuta_accion='';							if (tipoasignacion == 'btnWinReasignarFecha'){								if(!formareasignar.getForm().isValid()){									mensajeAlert('Capture el valor requerido.');																		return;								}								ejecuta_accion='actualizaFechaRecoleccion';															}else if (tipoasignacion == 'btnWinReasignarRuta'){								if(!formareasignar.getForm().isValid()){									alert('Indique la nueva ruta a asignar.');									return;								}								ejecuta_accion='actualizaRutaRecoleccion';							}else{								return;							}														myscope.ejecutaAccion(ejecuta_accion,'',myscope);							winreasignar.close();						},						scope:this					},					{text:'Salir',handler:function(){						formareasignar.getForm().reset();winreasignar.hide();},scope:this					}]		});					winreasignar.show();			},	cancelarRecol:function (obj, e){		var myscope = this;		var rows = this.getView().getSelectionModel().getSelection();    	if(rows.length==0){			mensajeAlert('Seleccione los registros que desea CANCELAR.');			return;		}    	    	var formacancelar = new Ext.form.FormPanel({			border:false,			labelWidth: 20,			defaults: {				xtype:'textfield',				width: 200			},			items:[				{xtype: 'myUpperCaseTextField',id:'idmotivocancela',name:'idmotivocancela',					allowBlank:false,maxLength:50,width:300,enforceMaxLength:true}			]		});			var wincancelar  = new Ext.Window({				id:'idwincancelar',				title: 'Indique motivo de cancelación',				bodyStyle: 'padding:10px;background-color:#fff;',				width:340,				closable:false,				modal:true,				height:120,				items:[formacancelar],				buttons: [{id:'btnWinCancelar',name:'btnWinCancelar',text:'Aceptar',					handler:function(){												myscope.activarCancelar(obj.itemId , formacancelar,rows,myscope);						wincancelar.close();					},					scope:this				},				{text:'Salir',handler:function(){						formacancelar.getForm().reset();wincancelar.hide();						wincancelar.close();									},scope:this}]		});			wincancelar.show();	},		ejecutaAccion:function (dispatch,estatus,scope){				var idsrecoleccion='';		var rows = this.getView().getSelectionModel().getSelection();		var indice=0;    	for (indice=0;indice<rows.length;indice++){    		idsrecoleccion+=rows[indice].get('idregistro')+',';     		if (rows[indice].get('estatus')=='L'){    			mensajeAlert('Ha seleccionado registros con estatus BLOQUEADO [' +rows[indice].get('idrecoleccion')+ '], ' +    					'debe desbloquear los registros antes de realizar cualquier otra operación.');    			return;    		}    	}    	    	var idmotivocancela=Ext.getCmp('idmotivocancela')!=undefined?Ext.getCmp('idmotivocancela').getValue():'';    	var idrutaasignada=Ext.getCmp('idrutaasignada')!=undefined?Ext.getCmp('idrutaasignada').getValue():'';    	var fechaasignar=Ext.getCmp('fechaasignar')!=undefined?Ext.getCmp('fechaasignar').getRawValue():'';		var conn = new Ext.data.Connection();        conn.request({            url: '../solicitudrecoleccion/'+dispatch,            method: 'POST',            params:{idtiporecol:1,idsrecoleccion:idsrecoleccion, 					estatus:estatus,rutaasignada: idrutaasignada, 					fecharecol:fechaasignar,					motivocancelacion: idmotivocancela},            success: function(response, opts) {            					var obj = Ext.decode(response.responseText);				scope.buscaInformacionRecolecciones();		   },		   failure: function(response, opts) {							  mensajeAlert('server-side failure with status code ' + response.status);		   }		        });          	},	ejecutaAccionDesbloquear:function (b, e){				var idsrecoleccion='';		var rows =  this.getView().getSelectionModel().getSelection();		if (rows.length==0){			mensajeAlert('Seleccione los registros a desbloquear.');			return;		}				var indice=0;    	for (indice=0;indice<rows.length;indice++){    		idsrecoleccion+=rows[indice].get('idsolicitud')+',';     		if (rows[indice].get('estatus')!='L'){    			mensajeAlert('Seleccione solo registros con estatus BLOQUEADO.');    			return;    		}    	}    	if (!confirm('¿Desea desbloquear los registros seleccionados?')){    		return;    	}		var conn = new Ext.data.Connection();        conn.request({            url: '../solicitudrecoleccion/desbloqueaOrdenSolicitudRecoleccion',            method: 'POST',            params:{dispatch:'',idtiporecol:1,        		idsrecoleccion:idsrecoleccion},            success: function(response, opts) {            					var obj = Ext.decode(response.responseText);				if (obj.isOK==false){					mensajeAlert(obj.mensaje);				}else{					 buscaInformacionManifiesto();					//alert('');									}  		   },		   failure: function(response, opts) {								mensajeAlert('server-side failure with status code ' + response.status);		   }		        });          	},	/**	* Realiza la activación o cancelación de los registros seleccionados	*/	activarCancelar: function (itemId, formacancelar, rows, scope){		var msgNoSeleccionados ='';			var msgConfirmacion ='';			var estatus ='';		//menuItemCamcelar,menuItemActivar		//btnActivar,btnCancelar		if ( (itemId == 'btnActivar') || (itemId == 'menuItemActivar')){			msgNoSeleccionados ="Seleccione los registros que desea cancelar.";			msgConfirmacion = '¿Desea activar todas las ordenes de recoleccion seleccionadas?';			//Indica el estatus Cancelado para que el action lo cambie a A (Activado)			estatus='C';		}else if( (itemId == 'menuItemCamcelar') || (itemId == 'btnCancelar') || (itemId == 'btnWinCancelar' )){			if(!formacancelar.getForm().isValid()){				mensajeAlert('Motivo de la cancelación es invalida');				return;			}					msgNoSeleccionados ="Seleccione los registros que desea cancelar.";			msgConfirmacion = '¿Desea cancelar todas las ordenes de recoleccion seleccionadas?';			//Indica el estatus Activo para que el action lo cambie a C (Cancelado)			estatus='A';		}	else{			return;		}		    	if(rows.length==0){			mensajeAlert(msgNoSeleccionados);			return ;		}		//Confirma si desea cancelar los documentos		if (confirm(msgConfirmacion)){			scope.ejecutaAccion('cambiaEstatusSolicitudRecoleccion',estatus,scope);			}		},		activar: function (){		var scope = this;		//Indica el estatus C (Cancelado) para que el action lo cambie a A(ACTIVO)		scope.ejecutaAccion('cambiaEstatusSolicitudRecoleccion','C',scope);		},	/***	* Genera nuevamente el PDF de un manifiesto ya impreso anteriormente	*/	reimprimirmanifiesto:function (b, e){		var mensaje ='';		var dispatch ='';		if ( (b.id == 'menuItemReImprimir') || (b.id == 'btnReimprimir')){			if ( Ext.util.Format.trim(Ext.getCmp('txtmanifiesto').getValue()).length==0){				mensajeAlert('Indique el identificador del manifiesto que desea reimprimir.');				return;			}			Ext.getCmp('txtmanifiesto').setValue(Ext.util.Format.trim(Ext.getCmp('txtmanifiesto').getValue()));			dispatch='reimprimirManifiesto';				}if ( (b.id == 'menuItemImprimir') || (b.id == 'btnImprimir')){			mensaje ='Se imprimiera el manfiesto ';			if ( Ext.util.Format.trim(Ext.getCmp('txtruta').getValue()).length>0){				mensaje = mensaje+ ' de la RUTA: ' +Ext.getCmp('txtruta').getValue();			}else{				mensaje = mensaje+' de TODAS las rutas.';			}						Ext.getCmp('txtruta').setValue(Ext.util.Format.trim(Ext.getCmp('txtruta').getValue())) ;			if (!confirm(mensaje+' Los registros marcados con estatus CANCELADO no seran incluidos en el manifiesto ¿Desea imprimir ahora el Manifiesto?')){				return;			}			dispatch='generaManifiesto';		}else{			return;		}				var conn = new Ext.data.Connection();        conn.request({            url: '../solicitudrecoleccion/'+ dispatch,            method: 'POST',            params:{ manifiesto:Ext.getCmp('txtmanifiesto').getValue(),			rutaasignada: Ext.getCmp('txtruta').setValue(), fecharecol:Ext.getCmp('idfecha').setRawValue()	},            success: function(response, opts) {				var obj = Ext.decode(response.responseText);				//Envia la info para que se invoque la generacion del PDF con el 				//Manifiesto indicado				visorPDF('utils-win-vista-pdf_reimpresion'+ rows[0].get('idregistro'),						"Visor PDF" ,"../imprime_etiquetas/viewPDFArchivoReimpresion?pdf=" + obj.pdfname);		   },		   failure: function(response, opts) {			  console.debug('server-side failure with status code ' + response.status);		   }		        });        	},	buscarrecolecciones: function (obj, e){		//Obtiene la ruta		buscaInformacionManifiesto('','',this);	},	buscaInformacionManifiesto :function (ruta,fecha, myscope){			},	buscaInformacionRecolecciones :function (obj, e){		var myscope=this;		//Verifica el tipo de busqueda		var va= Ext.getCmp('iddatoabuscar').getValue();		var idtiporecol= Ext.getCmp('idtipoDocumento').getValue();		Ext.getCmp('iddatoabuscar').setValue(Ext.util.Format.trim(Ext.util.Format.uppercase(va)));		va= Ext.getCmp('iddatoabuscar').getValue();		if (Ext.getCmp('idtipobuqueda').getValue()!='2'){			if (va==''){				mensajeAlert('Indique el dato a buscar.');				return;			}						if ((Ext.getCmp('idtipobuqueda').getValue()=='1') || (Ext.getCmp('idtipobuqueda').getValue()=='5') ||				(Ext.getCmp('idtipobuqueda').getValue()=='7') 				){				if (va.length<4){					mensajeAlert('Indique al menos 4 caracteres a buscar');					return;				}			}		}else{			if ((Ext.getCmp('idfechainicio').getRawValue()=='') || (Ext.getCmp('idfechainicio').getRawValue()=='')){				alert('Seleccione fecha inicio y fecha final');				return;			}		}				myscope.getView().getStore().reload({				 params:{					 //dispatch:'busquedaSolicitudRecoleccion',					 idtiporecol:idtiporecol,					 idsolicitud:Ext.getCmp('iddatoabuscar').getValue(),					 idrecoleccion:Ext.getCmp('iddatoabuscar').getValue(),					 quiensolicita:Ext.getCmp('iddatoabuscar').getValue(),					 numcliente:Ext.getCmp('iddatoabuscar').getValue(),					 razonsocialcliente:Ext.getCmp('iddatoabuscar').getValue(),				     contrato:Ext.getCmp('iddatoabuscar').getValue(),					 razonsocial:Ext.getCmp('iddatoabuscar').getValue(),					 preguntarpor:Ext.getCmp('iddatoabuscar').getValue(),					 tipoconsulta: Ext.getCmp('idtipobuqueda').getValue(),					 fechainicio:Ext.getCmp('idfechainicio').getRawValue(),					 fechafin:Ext.getCmp('idfechafin').getRawValue()				},					 callback:function(r,options,success){						 if (r.length<=0){							 Ext.Msg.show({								 title: 'Aviso',								 msg: 'No existen Ordenes de Recolección para la consulta realizada.',								 modal: false,								 icon: Ext.Msg.INFO,								 buttons: Ext.Msg.OK													 });  						 }					 }	  		 } );	},	verHistoria:function(){		var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		mensajeAlert("Debe de Seleccionar solo un registro a visualizar. ");     		return;     	}		if(rows.length >1){     		mensajeAlert("Seleccione solamente un registro a visualizar. ");     		return;     	}		this.abreVentanaHistoriaRow(rows[0]);	    }, 	abreVentanaHistoriaRow:function(row, scope){		var grid_historia_= new MyDesktop.grid.GridHistoriaRecoleccion({			autoScroll: true,					forceFit    : true,			scrollOffset: 0,			getTotalWidth: function() {				return "auto";			},			iddocumento:row.get('idsolicitud')		});			var win_historia = Ext.create('widget.window', {			id:'utils-win-agregar-cliente',			title: "Historia:" + row.get('idsolicitud'),			width: 900,			height: 350,			modal:true,			plain: true,			headerPosition: 'right',			layout: 'fit',			items: grid_historia_					});		//var parametros = {iddocumento:rows[0].get('idDocumento')};		//Si se desea cambiar el URL que despacha la solicitud		//grid_historia_cotizaciones.getStore.getProxy().url = '';		//grid_historia_.buscar(parametros);				win_historia.show()    	    },        showAgregarOrdenRecol: function (b, e) {    	//Crea una forma de clientes para agregar los datos		var forma_agregar = Ext.create('MyDesktop.form.FormDatosOrdenRecolecion',				{id:'agregar_cliente',operacion:'agregarSolicitudRecoleccion',				main_grid:this, accion:'insert'}); 				var main_window = Ext.create('widget.window', {			id:'utils-win-agregar-cliente1',			title: "Modificar Recolección",			iconCls: 'agregar',			width: 900,			height: 680,			modal:true,			resizable:false,			plain: true,			headerPosition: 'right',			layout: 'fit',			items: forma_agregar					});		main_window.show();		forma_agregar.setMainWindow(main_window);		forma_agregar.verificaHoraSistema();		    },    showModificarOrdenRecol: function (b, e) {    	    	var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		mensajeAlert("Debe de Seleccionar solo un registro para modificar. ");     		return;     	}		if(rows.length >1){     		mensajeAlert("Seleccione solamente un registro para modificar. ");     		return;     	}						    	//Crea una forma de clientes para agregar los datos		var forma_agregar = Ext.create('MyDesktop.form.FormDatosOrdenRecolecion',				{id:'agregar_cliente',operacion:'agregarSolicitudRecoleccion',				main_grid:this, accion:'update'}); 				forma_agregar.updateCampos(rows[0]);		var main_window = Ext.create('widget.window', {			id:'utils-win-agregar-cliente1',			title: "Agregar Recolección",			iconCls: 'editar',			width: 900,			height: 680,			modal:true,			resizable:false,			plain: true,			headerPosition: 'right',			layout: 'fit',			items: forma_agregar					});		main_window.show();		forma_agregar.setMainWindow(main_window);		forma_agregar.setPesoTotal(forma_agregar);		forma_agregar.setVolumenTotal(forma_agregar);		forma_agregar.verificaHoraSistema();		    },	    refreshDatosCreada :function (idsolicitud, tipo){		var myscope=this;		  var datoabuscar =idsolicitud;	    			myscope.getView().getStore().reload({					 params:{						 //dispatch:'busquedaSolicitudRecoleccion',						 idtiporecol:tipo,						 idsolicitud:datoabuscar,						 idrecoleccion:datoabuscar,						 quiensolicita:datoabuscar,						 numcliente:datoabuscar,						 razonsocialcliente:datoabuscar,					     contrato:datoabuscar,						 razonsocial:datoabuscar,						 preguntarpor:datoabuscar,						 tipoconsulta: '7',						 fechainicio:'',						 fechafin:''					},						 callback:function(r,options,success){							 if (r.length<=0){								 Ext.Msg.show({									 title: 'Aviso',									 msg: 'No existen Ordenes de Recolección para la consulta realizada.',									 modal: false,									 icon: Ext.Msg.INFO,									 buttons: Ext.Msg.OK														 });  							 }						 }	  			 } );				},	showProgramacion:function(){		var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		mensajeAlert("Debe de Seleccionar solo un registro. ");     		return;     	}		if(rows.length >1){     		mensajeAlert("Seleccione solamente un registro. ");     		return;     	}		var tiporecol = rows[0].get('idtiporecol');		var grid_programacion; 		if (tiporecol=='1'){//Semanal			grid_programacion = Ext.create('MyDesktop.grid.GridDiasProgramados',					{   						iddocumento:rows[0].get('idsolicitud'),						tiporecol:tiporecol,						main_grid:this, accion:'update'					}); 		}else if (tiporecol=='2'){//Mensual			grid_programacion = Ext.create('MyDesktop.grid.GridDiasProgramados',					{						iddocumento:rows[0].get('idsolicitud'),						tiporecol:tiporecol,						main_grid:this, accion:'update'					}); 		}else{			mensajeAlert("Tipo de recolección no programada.");     		return;		}				var main_window = Ext.create('widget.window', {			title: "Programación de Recolección:"+rows[0].get('idsolicitud'),			iconCls: 'editar',			width: 400,			height: 400,			modal:true,			resizable:false,			plain: true,			headerPosition: 'right',			layout: 'fit',			items: grid_programacion					});		main_window.show();	}	});