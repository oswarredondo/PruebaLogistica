Ext.define('MyDesktop.grid.GridNotasAttachment', {    extend: 'Ext.grid.Panel',    requires: [        'Ext.grid.column.Action',        'Ext.grid.plugin.CellEditing',        'Ext.form.field.Text',        'Ext.toolbar.TextItem'    ],    stateful: true,    collapsible: false,    multiSelect: true,    stateId: 'stateGridAdicional',    viewConfig: {        stripeRows: true,        enableTextSelection: true    },	id:undefined,	isConsulta:false,	myScope:undefined,	ids_str:undefined,//Contiene los identificadores de los posibles documentos aconsultar	tipos_docs_str:undefined, //Contiene los tipos de documnetos posibles a consultar	idtipodocumento:undefined,//Contiene el tipo de documento que se esta trabajando	identificador:undefined,//Contiene el identificador del documento que se esta procesando	customStore:undefined,	isFueraSitio:false,    initComponent: function () {		this.myScope = this;		var extensiones = '.txt,.png,.jpg,.jpeg,.csv,.pdf,.gif.html, htm';		var myscope = this;		//Si el grid no es de consulta entonces muestra la barra para administrar los datos		if (!this.isConsulta){			 this.editing = Ext.create('Ext.grid.plugin.CellEditing');			 this.plugins = this.editing;			this.bbar=[							{xtype: 'tbfill'},							{ text: 'Agregar',iconCls: 'agregar',handler:this.agregar, scope:this.myScope },							{xtype:'tbseparator'},							{ text: 'Borrar',iconCls: 'borrar',handler:this.eliminar,scope:this.myScope }											];		}		if (this.customStore==undefined){			this.store = Ext.create('MyDesktop.store.StoreAttachment',{baseParams:{				identificador:this.ids_str, idtipodocumento:this.tipos_docs_str}});		}else{			this.store = this.customStore;		}				this.store.getProxy().setExtraParam("identificador", this.ids_str);		this.store.getProxy().setExtraParam("idtipodocumento", this.tipos_docs_str);							this.selType= 'checkboxmodel';        this.columns = [											{text     : 'Descripcion',width: 250,							sortable : false,dataIndex: 'descripcion'	},						{text     : 'Fecha',width: 150,sortable : false,dataIndex: 'fecha'},						{text     : 'Subido Por',width: 75,sortable : false,dataIndex: 'login'},						{							menuDisabled: true,							sortable: false,							xtype: 'actioncolumn',							width: 40,							items: [								{									getClass: function(v, meta, rec) {										return 'download_blue';									},									getTip: function(v, meta, rec) {										//return 'Descargar archivo:' + rec.get('nombre_archivo') ;										return 'Descargar archivo';									},									handler: function(grid, rowIndex, colIndex) {																			var rec = grid.getStore().getAt(rowIndex);										if ((rec.get('extension')=='') || (rec.get('extension')=='null')){											return;										}										var url = '<iframe src="../attachmentnotaagenda/downloadFile?fileName=' + 												rec.get('nombre_archivo')+ '" style="width:100%;height:100%;border:none;"></iframe>';																				if (myscope.isFueraSitio){											var url = '<iframe src="./attachmentnotaagenda/downloadFile?fileName=' + 											rec.get('nombre_archivo')+ '" style="width:100%;height:100%;border:none;"></iframe>';										}										Ext.MessageBox.confirm('Confirmar','¿Desea descargar el archivo  ?', function(id, text){									       		if ( (id === 'yes')  || (id === 'si') || (id === 'y' ) || (id === 's' ) ){ 										       		var window_att_view = Ext.create('widget.window', {														id:'utils-win-descarga-'+ rec.get('nombre_archivo')+rec.get('fecha'),														title: "Descarga de Archivo:" + rec.get('nombre_archivo'),														width: 350,														height: 300,														hideAnimDuration:5,														tbar:[{xtype:'label', text:'Terminada la descarga, cierre la ventana'}],														modal:true,														plain: true,										                html : url,														headerPosition: 'right',														layout: 'fit'																											}).show();										       												       		window_att_view.hide();									       		}									       											       												});																			}								}							]						},						{							menuDisabled: true,							sortable: false,							xtype: 'actioncolumn',							width: 40,							items: [								{									getClass: function(v, meta, rec) {										if ( !isExtencionValida(extensiones, rec.get('extension') )) {											return 'view_white';										}else{											return 'view_blue';										}									},									getTip: function(v, meta, rec) {										//return 'Visualizar archivo:' + rec.get('nombre_archivo') ;										return 'Visualizar archivo' ;									},									handler: function(grid, rowIndex, colIndex) {										var rec = grid.getStore().getAt(rowIndex);										if ((rec.get('extension')=='') || (rec.get('extension')=='null')){											return;										}																				//Solo para extenciones validas										if (isExtencionValida(extensiones, rec.get('extension') )) {											var url='../attachmentnotaagenda/viewArchivoNotaAgenda?fileName=' + rec.get('nombre_archivo');											if (myscope.isFueraSitio){												url='./attachmentnotaagenda/viewArchivoNotaAgenda?fileName=' + rec.get('nombre_archivo');											}											visorPDF(													'utils-win-vistaprevia-'+ rec.get('nombre_archivo')+rec.get('fecha'),													"Vista Previa:" + rec.get('nombre_archivo'),url	);										}									}								}							]						}									];			this.callParent();    },	agregar:function(){				var rows =  this.getView().getSelectionModel().getSelection();				//Crea una forma de clientes para agregar los datos		var forma_attachment = Ext.create('MyDesktop.form.FormUploadAttachmentAgenda',				{identificador:this.identificador,					idtipodocumento:this.idtipodocumento,gridscope:this,					url: '../attachmentnotaagenda/uploadNotaAgenda'				}); 		Ext.create('widget.window', {			id:'utils-win-agregar-cliente-attachment',			title: "Comentario/Archivo",			width: 450,			iconCls: 'editar',			height: 250,			modal:true,			plain: true,			layout: 'fit',			items: forma_attachment					}).show();			        	},	eliminar:function(){		var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		 Ext.Msg.alert('Verificar',"Seleccione los registros que desea eliminar");     		return;     	}		    	 Ext.MessageBox.confirm('Confirmacion', '¿Desea borrar los registros seleccionados?', function(id, text){       		if ( (id === 'yes')  || (id === 'si') || (id === 'y' ) || (id === 's' ) ){        			if(rows.length == 0){  //step 3       				return ;       			}       			       			var registros ='';       			for (i=0;i<rows.length;i++){       				       				registros = registros+  rows[i].get('nombre_archivo')+ "|";       			}       			var conn = new Ext.data.Connection();       			conn.request({       				url: '../attachmentnotaagenda/delete' ,       				params:{ids:registros},       				success: function(response, opts) {       					var obj = Ext.decode(response.responseText);       					Ext.Msg.alert('Confirmación',obj.message);       				},       				failure: function(response, opts) {       					var obj = Ext.decode(response.responseText);       					Ext.Msg.alert('Error',obj.message);       				}       			});       			       			this.getView().getStore().remove(rows);  //step 4       			this.commitInfo();       		}       	 },this);     	 				},	loadInfo:function(){		this.getView().getStore().load();		},	commitInfo:function(){		this.getView().getStore().save( );		this.getView().getStore().commitChanges();		},	saveInfo:function(){		this.getView().getStore().save( );		this.getView().getStore().commitChanges();		this.loadInfo();		}	});