Ext.define('MyDesktop.form.FormPropiedadesTemplateLineaEtiq', { extend: 'Ext.form.Panel',    xtype: 'formPropiedadesTemplateLineaEtiq-form',    frame: false,    width: 400,    layout: 'anchor',    method:'POST',    border: false,    bodyPadding: 10,    fieldDefaults: {       // labelAlign: 'top',        labelWidth: 100,        labelStyle: 'font-weight:bold'    },	showReadOnly:false,    defaults: {        anchor: '100%',        margins: '0 0 10 0'    },	forma: undefined,	myscope:undefined,	operacion:undefined,	main_window:undefined,	uuid:undefined,	idregistro:undefined,	idtemplate:undefined,	autoScroll:true,	operacion:undefined,	main_grid:undefined,	tipo:undefined,				initComponent: function () {		this.myscope=this;		var scope_main = this;						var grid_campos= new MyDesktop.grid.GridCamposDisponibles({ width:200, height:395}); 			var operacion_aplicar = this.operacion;		this.items= [		             {xtype : 'hidden', name:"_csrf", value:vt},		             {xtype : 'hidden',name: 'idregistro', value:scope_main.idregistro},     				        {xtype : 'hidden',name: 'idtemplate', value:scope_main.idtemplate}, 				        ,					{					    xtype: 'container',					    layout: 'hbox',					    defaultType: 'textfield',					    margin: '0 0 5 0',					    items: [					       grid_campos,					       {				                xtype: 'fieldset',				                title: titulo_datos_etiqueta,				                defaultType: 'textfield',				                layout: 'anchor',				                defaults: {				                    anchor: '100%'				                },				                items: [									{xtype: 'myUpperCaseTextField', flex: 1,										fieldLabel: 'Bloque',name:'bloque',										margins: '0 0 0 0',enforceMaxLength:true,maxLength:30, readOnly:false},																												{xtype: 'textfield', flex: 1,										fieldLabel: field_campo,name:'campo',										margins: '0 0 0 0',enforceMaxLength:true,maxLength:100, readOnly:false, value:scope_main.tipo},																			{xtype: 'textfield', flex: 1,											fieldLabel: field_Tipo,name:'type',										margins: '0 0 0 0',enforceMaxLength:true,maxLength:30, readOnly:true, value:scope_main.tipo},																			{xtype: 'textfield', flex: 1,											fieldLabel:field_etiqueta ,name:'etiqueta', 										margins: '0 0 0 0',enforceMaxLength:true,maxLength:100},																			{xtype : 'numberfield',name: 'x',											fieldLabel: field_x,										value: 0,minValue: 0,maxValue: 99999.99,allowDecimals:true,decimalPrecision:2,decimalSeparator:'.' },    									{xtype : 'numberfield',name: 'y',											fieldLabel: field_y,									    	value: 0,minValue: 0,maxValue: 99999.99,allowDecimals:true,decimalPrecision:2,decimalSeparator:'.'},																		{xtype : 'numberfield',name: 'width',									    		fieldLabel: field_ancho,									    	value: 0.5,minValue:0,maxValue: 99.99,allowDecimals:true,decimalPrecision:2,decimalSeparator:'.'}, 																		{xtype : 'numberfield',name: 'heigth',									    		fieldLabel: field_alto,									        	value: 0,minValue: 0,maxValue: 999.99,allowDecimals:true,decimalPrecision:2,decimalSeparator:'.'}, 									{xtype : 'numberfield',name: 'border',									        		fieldLabel: field_borde,										value: 0,minValue: 0,maxValue: 999.99,allowDecimals:true,decimalPrecision:2,decimalSeparator:'.'}, 									    {									        xtype: 'combobox',									        fieldLabel: fieldForzoso(field_rotacion),									        editable :false,									        name: 'rotation',									        store: Ext.create('MyDesktop.store.StoreTemplateRotacion',{}),									        valueField: 'idtipo',									        displayField: 'descripcion',											enforceMaxLength:true,											maxLength:30,											value:'0',									        typeAhead: true,									        queryMode: 'local',									        allowBlank: false,  										        emptyText: ''									    },	      	 																		{									        xtype: 'combobox',									        fieldLabel: fieldForzoso(field_font),									        editable :false,									        name: 'font',									        store: Ext.create('MyDesktop.store.StoreTemplateFont',{}),									        valueField: 'idtipo',									        displayField: 'descripcion',											enforceMaxLength:true,											maxLength:30,											value:'Times-Roman',									        typeAhead: true,									        queryMode: 'local',									        allowBlank: false,  										        emptyText: ''									    },										{xtype : 'numberfield',name: 'fontsize',									    	fieldLabel: field_font_size,									    	value: 3,minValue: 1,maxValue: 30,allowDecimals:false,									    	decimalPrecision:2,allowDecimals:true,},									    	 									    	 {									            xtype: 'combobox',									            fieldLabel: fieldForsozo(field_linea_base),									            editable :false,									            name: 'baseline',									            store: Ext.create('MyDesktop.store.StoreTemplateBaseLine',{}),									            valueField: 'idtipo',									            displayField: 'descripcion',												enforceMaxLength:true,												maxLength:30,												value:'1',									            typeAhead: true,									            queryMode: 'local',									            allowBlank: false,  										            emptyText: ''									        }				               ]			                }  					            					    ]					}    		      		       /* {	                xtype: 'combobox',	                fieldLabel: 'Campo Posible:',	                editable :false,	                name: 'campoinfo',	                store: Ext.create('MyDesktop.store.StoreTemplateCampoDisponible',{}),	                valueField: 'idtipo',	                displayField: 'descripcion',					enforceMaxLength:true,					maxLength:30,					 value:'',	                typeAhead: true,	                queryMode: 'local',	                allowBlank: false,	                emptyText: ''	            },*/		    		        	,			];				this.buttons= [		              						{ hidden: this.showReadOnly,							text: titulo_btn_salvar, iconCls:'activo',handler:function() {								var form = this.up('form').getForm();								if (form.isValid()) {									var out = [];									Ext.Object.each(form.getValues(), function(key, value){										out.push(key + '=' + value);									});									var myMask = new Ext.LoadMask(Ext.getBody(), {msg:msg_generando_infomacion_espere});									myMask.show();																		form.submit({										clientValidation: true,										submitEmptyText: false,										url: './template_etiquetas/' + operacion_aplicar,										success: function(form, action) {											myMask.hide( );											myMask.disable();																						if (scope_main.main_grid!=undefined){												scope_main.main_grid.buscar(scope_main.idtemplate);											}																						if (scope_main.main_window!=undefined){												scope_main.main_window.close();											}											//mensajeConfirm(action.result.message);																},										failure: function(form, action) {											myMask.hide( );											myMask.disable();																						alertMsg('Error' , action.result.message);										}									});																									}else{									mensajeAlert(msg_datos_requeridos);								}							}					}				];				this.callParent();			},       	updateCampos:function(record){		//alert(Ext.getCmp(this.id));		var fields = Ext.getCmp(this.id).getForm().getFields( ) ;		this.updateFieldName(record,fields);							},	updateFieldName:function(record, fields){		var items = fields.items;		var valor ="";		for(i = 0; i < items.length; i++){			field = items[i];			if (field!=undefined){				if (field.getName()!=undefined){					//busca el nombre del campo que debe ser el mismo del nombre del campo de 					//la forma					valor = record.get(field.getName());					if (valor!=undefined){						//alert('Campo:' + field.getName() + ', valor:' +valor);						field.setValue(valor);					}else{						field.setValue("");					}								}			}		}	},	updateFieldReadOnly:function(record){			//alert(Ext.getCmp(this.id));		var fields = Ext.getCmp(this.id).getForm().getFields( ) ;				var items = fields.items;		var valor ="";		for(i = 0; i < items.length; i++){			field = items[i];			if (field!=undefined){				if (field.getName()!=undefined){					field.setReadOnly(true);								}			}		}				this.updateCampos(record);	},			updateFieldCte:function(valor, campo){		var fields = Ext.getCmp(this.id).getForm().getFields( ) ;				var items = fields.items;		for(i = 0; i < items.length; i++){			field = items[i];			if (field!=undefined){				if ((field.getName()!=undefined) && (field.getName()==campo)){					field.setValue(valor);								}			}		}	},		/****	 * Devuelve los valores de todos los campo	 */	getValueFields:function(){		var fields = Ext.getCmp(this.id).getForm().getFields( ) ;		var valor = '';		var items = fields.items;		var valorporpiedades = '';		for(i = 0; i < items.length; i++){			field = items[i];			if (field!=undefined){				valorporpiedades= valorporpiedades +"|"+ field.getValue();			}		}		return valorporpiedades;	},	getValueField:function(campo){		var fields = Ext.getCmp(this.id).getForm().getFields( ) ;		var valor = '';		var items = fields.items;		for(i = 0; i < items.length; i++){			field = items[i];			if (field!=undefined){				if ((field.getName()!=undefined) && (field.getName()==campo)){					valor= field.getValue();								}			}		}		return valor;	},	setUUIDIdRegistro:function(uuid,idregistro){		this.uuid=uuid;		this.idregistro = idregistro;	},	getCampoValor:function(){		return this.getForm().getFieldValues();	},	setMainWindows:function(windows){		this.main_window=windows;	},		setMainGrid:function(grid){		this.main_grid=grid;	},		});