Ext.define('MyDesktop.form.FormUploadAttachment', {	extend: 'Ext.form.Panel',	xtype: 'contact-form',	frame: false,	method: 'POST',	width: 400,	layout: 'anchor',	border: false,	bodyPadding: 10,	fieldDefaults: {		labelAlign: 'top',		labelWidth: 100,		labelStyle: 'font-weight:bold'	},	comboTipos: undefined,	showReadOnly: false,	defaults: {		anchor: '100%',		margins: '5 0 10 5'	},	myscope: undefined,	identificador: undefined,	idtipodocumento: undefined,	gridscope: undefined,	url: './attachmentnota/upload',	descripcion_file: '',	sendJSON: false,	winimport: undefined,	initComponent: function() {		var myurl = this.url;		var mysc = this;		this.myscope = this;		var grid_scope = this.gridscope;		var tamanio_archivo_excel = 1;		//getValorParametroSistema('rotulacion.tamanio.archivo.excel.en.megas');		var fileobject = {			xtype: 'filefield',			id: 'form-file-fail',			emptyText: '',			fieldLabel: field_archivo,			name: 'file_upload',			allowBlank: true,			buttonText: '',			buttonConfig: {				iconCls: 'folder_white'			}		};		if (this.sendJSON) {			fileobject = {				xtype: 'filefield',				id: 'form-file-fail',				emptyText: '',				fieldLabel: 'Archivo (MAX ' + getValorParametroSistema('rotulacion.tamanio.archivo.excel.en.megas') + " MB)",				name: 'file_upload',				allowBlank: true,				buttonText: '',				buttonConfig: {					iconCls: 'folder_white'				},				listeners: {					'change': function(obj, value, eOpts) {						var file = Ext.getCmp('form-file-fail').getEl().down('input[type=file]').dom.files;						var archivo = file[0];						var size_max_file = (tamanio_archivo_excel * 1024) * 1024;;						if (archivo.size > size_max_file) {							mensajeAlert("El archivo  " + tamanio_archivo_excel +								" excede el tamaño maximo permitido de " +								tamanio_archivo_excel + " MB.")							return;						}						var f = file[0];						{							var reader = new FileReader();							var name = f.name;							var X = XLSX;							reader.onload = function(e) {								var ventana = creaVentanaEspera(msg_cargando_archivo);								var data = e.target.result;								var arr = mysc.fixdata(data);								wb = X.read(btoa(arr), { type: 'base64' });								//wb = X.read(data, {type: 'binary'});								var jsondata = mysc.process_wb(wb);								Ext.Ajax.timeout = 99999999; // 5 min								Ext.Ajax.request({									url: myurl,									method: 'POST',									defaultHeaders: { '_csrf_header': hv, "_csrf": vt },									headers: { 'Content-Type': 'application/json' },									params: { identificador: mysc.identificador, idtipodocumento: mysc.idtipodocumento, "_csrf": vt },									jsonData: jsondata,									success: function(response) {										var jsonResp = Ext.JSON.decode(response.responseText);										ventana.close();										if (!jsonResp.success) {											mensajeAlert("Revise los campos tanto obligatorios como opcionales de su archivo e intente de nuevo.");										} else {											if (grid_scope != undefined) {												grid_scope.loadInfoCierra(mysc.winimport);											}										}									},									failure: function(response) {										ventana.close();										var jsonResp = Ext.JSON.decode(response.responseText);										mensajeAlert(jsonResp.message);									}								});							};						};						reader.readAsArrayBuffer(f)					}				}			};		}		this.items = [			{ xtype: 'hidden', name: 'identificador', value: this.identificador, allowBlanks: false },			{ xtype: 'hidden', name: 'idtipodocumento', value: this.idtipodocumento, allowBlanks: false },			{ xtype: 'hidden', name: "_csrf", value: vt },			{				xtype: 'myUpperCaseTextField',				name: 'descripcion',				fieldLabel: field_descripcion,				value: this.descripcion_file,				allowBlank: false			}, fileobject		];		//Solo cuando la carga es distinta a Excel		if (!this.sendJSON) {			this.buttons = [				{					text: titulo_btn_limpir,					iconCls: 'limpiar_white',					handler: function() {						this.up('form').getForm().reset();					}				},				{
					hidden: this.showReadOnly,					text: titulo_btn_salvar, iconCls: 'activo', handler: function() {						var form = this.up('form').getForm();						if (form.isValid()) {							var ventana = creaVentanaEspera(msg_cargando_archivo);							form.submit({								clientValidation: true,								defaultHeaders: { '_csrf_header': hv, "_csrf": vt },								params: { "_csrf": vt },								url: myurl, //'./attachmentnota/upload',								timeOut: 9999999,								timeout: 9999999,								success: function(form, action) {									ventana.close();									alertMsg('Confirmación', action.result.message);									if (grid_scope != undefined) {										grid_scope.loadInfo();									}								},								failure: function(form, action) {									ventana.close();									alertMsg(titulo_error, action.result.message);								}							});						} else {							alertMsg(titulo_verifique, msg_datos_requeridos);						}					}				}			];		}		this.callParent();	},	updateCampos: function(record) {		//alert(Ext.getCmp(this.id));		var fields = Ext.getCmp(this.id).getForm().getFields();		this.updateFieldName(record, fields);	},	updateFieldName: function(record, fields) {		var items = fields.items;		var valor = "";		for (i = 0; i < items.length; i++) {			field = items[i];			if (field != undefined) {				if (field.getName() != undefined) {					//busca el nombre del campo que debe ser el mismo del nombre del campo de 					//la forma					valor = record.get(field.getName());					if (valor != undefined) {						//alert('Campo:' + field.getName() + ', valor:' +valor);						field.setValue(valor);					} else {						field.setValue("");					}				}			}		}	},	updateFieldReadOnly: function(record) {		//alert(Ext.getCmp(this.id));		var fields = Ext.getCmp(this.id).getForm().getFields();		var items = fields.items;		var valor = "";		for (i = 0; i < items.length; i++) {			field = items[i];			if (field != undefined) {				if (field.getName() != undefined) {					field.setReadOnly(true);				}			}		}		this.updateCampos(record);	},	fixdata: function(data) {		var o = "", l = 0, w = 10240;		for (; l < data.byteLength / w; ++l) o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w, l * w + w)));		o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w)));		return o;	},	process_wb: function(wb) {		var output = "";		var tipo = "json";		switch (tipo) {			case "json":				output = JSON.stringify(this.to_json(wb), 2, 2);				break;			case "form":				//output = to_formulae(wb);				break;			default:				output = this.to_csv(wb);		}		return output;		/*if(out.innerText === undefined) out.textContent = output;		else out.innerText = output;		if(typeof console !== 'undefined') console.log("output", new Date());*/	},	to_json: function(workbook) {		var result = {};		var X = XLSX;		workbook.SheetNames.forEach(function(sheetName) {			var roa = X.utils.sheet_to_row_object_array(workbook.Sheets[sheetName]);			if (roa.length > 0) {				result[sheetName] = roa;			}		});		return result;	},	to_csv: function(workbook) {		var result = [];		workbook.SheetNames.forEach(function(sheetName) {			var csv = X.utils.sheet_to_csv(workbook.Sheets[sheetName]);			if (csv.length > 0) {				result.push("SHEET: " + sheetName);				result.push("");				result.push(csv);			}		});		return result.join("\n");	},	setWinImport: function(winimport) {		this.winimport = winimport;	}});