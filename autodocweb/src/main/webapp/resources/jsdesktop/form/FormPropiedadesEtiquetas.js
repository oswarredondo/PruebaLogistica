Ext	.define(		'MyDesktop.form.FormPropiedadesEtiquetas',		{			extend: 'Ext.form.Panel',			xtype: 'formPropiedadesEtiquetas-form',			frame: false,			width: 400,			layout: 'anchor',			border: false,			method: 'POST',			bodyPadding: 10,			fieldDefaults: {				// labelAlign: 'top',				labelWidth: 100,				labelStyle: 'font-weight:bold'			},			showReadOnly: false,			defaults: {				anchor: '100%',				margins: '0 0 10 0'			},			forma: undefined,			myscope: undefined,			operacion: undefined,			main_window: undefined,			uuid: undefined,			remitente: undefined,			destinatario: undefined,			idregistro: undefined,			// indica el sufijo que debe tener el nombre del campo, esto			// sirve apara			// poder identificar remy destino			sufijo: '',			autoScroll: true,			tipo_formulario: undefined,			gridfrecuencias: undefined,			initComponent: function() {				this.myscope = this;				var scope_main = this;				var store_folios = Ext.create(					'MyDesktop.store.StoreFoliosServicios', {				});				store_folios.getProxy().setExtraParam("tipo_formulario", this.tipo_formulario);				this.gridfrecuencias = Ext.create(					'MyDesktop.grid.GridDatosGuiaMadre', {					cporigen: "",					cpdestino: "",					idgarantia: "",					tipobusqueda: 1,					width: 300,					height: 200,					title: 'Guías'				});				/*				 * Se crea un combobox para poner odos los usuarios de				 * la misma identidad organizacion y num de cliente				 */				var combo_contenido = Ext.create('Ext.form.ComboBox', {					fieldLabel: fieldForzoso(field_contenido),					name: 'contenido',					id: 'idcmbcontenido',					flex: 3,					disabled: false,					editable: false,					allowBlank: false,					forceSelection: true,					store: Ext.create(						'MyDesktop.store.StoreContenidoAsegurado',						{}),					queryMode: 'local',					emptyText: 'Seleccione Contenido',					displayField: 'producto',					valueField: 'producto'				});				combo_contenido.getStore().sort([{					property: 'producto',					direction: 'ASC'				}]);				var combo_contenido_sat = Ext.create('Ext.form.ComboBox', {					fieldLabel: fieldForzoso(field_contenido),					name: 'contenido',					id: 'idcmbcontenidosat',					flex: 3,					anyMatch: true,					allowBlank: false,					editable:  true,					typeAhead: true,					transform: 'stateSelect',					forceSelection: true,					queryMode: 'local',					selectOnFocus: true,					triggerAction: 'all',					emptyText: 'Seleccione Contenido',					displayField: 'descripcionmcia',					valueField: 'clavemcia',					store: Ext.create(						'MyDesktop.store.StoreMercanciaSat',						{})				});				/*				var txt_contenido = Ext.create(					'MyDesktop.objetos.TextFieldUpperCase', {					name: 'contenido',					id: 'idtxtcontenido',					flex: 3,					fieldLabel: fieldForzoso(field_contenido),					emptyText: '',					allowBlank: false,					enforceMaxLength: true,					maskRe: /[^~^]/,					maxLength: 40				});				*/				var contenedor = Ext.create('Ext.container.Container',					{						labelStyle: 'font-weight:bold;padding:0',						layout: 'hbox',						id: 'idcontenedor',						emptyText: 'Tarifa',						defaultType: 'textfield',						items: [combo_contenido_sat]					});				this.items = [					{						xtype: 'hidden',						name: "guiamadre",						value: "#"					},					{						xtype: 'hidden',						name: "_csrf",						value: vt					},					{						xtype: 'hidden',						name: 'uuid',						value: scope_main.uuid					},					{						xtype: 'hidden',						name: 'idregistro',						value: 0					},					{						xtype: 'hidden',						name: 'tiporotulo',						value: 'AMBAS'					},					{						xtype: 'combobox',						fieldLabel: fieldForzoso(field_servicio),						name: 'idservicio',						id: 'serviciocombo' + scope_main.id,						allowBlank: false,						store: Ext.create('MyDesktop.store.StoreFoliosServicios'),						forceSelection: true,						valueField: 'idServicio',						displayField: 'descripcionServicio',						typeAhead: true,						queryMode: 'local',						emptyText: field_servicios_disponibles,						listeners: {							scope: scope_main,							'select': scope_main.validarSeguro						}					},					{						xtype: 'numberfield',						name: 'numpiezas',						fieldLabel: fieldForzoso(field_cantidad_etiquetas),						value: 1,						minValue: 1,						maxValue: 1000,						allowDecimals: false,						decimalPrecision: 0					},					{						xtype: 'myUpperCaseTextField',						flex: 1,						fieldLabel: fieldForzoso(field_referencia),						name: 'referencia',						width: 100,						margins: '0 0 0 0',						allowBlank: false,						enforceMaxLength: true,						maskRe: /[^~^]/,						maxLength: 20					},					{						xtype: 'combobox',						fieldLabel: fieldForzoso(field_tipo_entrega),						editable: false,						name: 'nacional',						store: Ext							.create(								'MyDesktop.store.StoreTiposEntregaTerritorio',								{}),						hidden: true,						valueField: 'idtipo',						displayField: 'descripcion',						enforceMaxLength: true,						maxLength: 30,						value: tipo_nacional,						typeAhead: true,						queryMode: 'local',						allowBlank: false,						emptyText: ''					},					{						xtype: 'combobox',						fieldLabel: fieldForzoso(field_tipoempaque),						store: Ext.create('MyDesktop.store.StoreTiposEmpaques',{}),						value: TIPO_PAQUETE,						editable: false,						name: 'tipoempaque',						valueField: 'idtipo',						displayField: 'descripcion',						enforceMaxLength: true,						maxLength: 30,						typeAhead: true,						queryMode: 'local',						allowBlank: false,						emptyText: ''					},					{						xtype: 'combobox',						fieldLabel: fieldForzoso(msg_es_multiple),						editable: false,						name: 'es_multiple',						store: Ext.create(							'MyDesktop.store.StoreSINO', {}),						valueField: 'identificador',						displayField: 'descripcion',						enforceMaxLength: true,						maxLength: 30,						value: TIPO_NO,						typeAhead: true,						queryMode: 'local',						allowBlank: false,						emptyText: ''					},					{						xtype: 'combobox',						fieldLabel: fieldForzoso(msg_es_retorno),						editable: false,						name: 'tiene_retorno',						store: Ext.create(							'MyDesktop.store.StoreSINO', {}),						valueField: 'identificador',						displayField: 'descripcion',						enforceMaxLength: true,						maxLength: 30,						value: TIPO_NO,						typeAhead: true,						queryMode: 'local',						allowBlank: false,						emptyText: ''					},					{						xtype: 'combobox',						fieldLabel: fieldForzoso('Cita'),						editable: false,						name: 'tiene_cita',						store: Ext.create(							'MyDesktop.store.StoreSINO', {}),						valueField: 'identificador',						displayField: 'descripcion',						enforceMaxLength: true,						maxLength: 30,						value: TIPO_NO,						typeAhead: true,						queryMode: 'local',						allowBlank: false,						emptyText: '',						listeners: {							select: function(combo, records) {								var SN = records[0]									.get("identificador");								if (SN == "SI") {									Ext.getCmp('idfechaInicial')										.setReadOnly(false);									Ext.getCmp('idhoraInicial')										.setReadOnly(false);								} else {									Ext.getCmp('idfechaInicial')										.setReadOnly(true);									Ext.getCmp('idfechaInicial')										.setValue("");									Ext.getCmp('idhoraInicial')										.setReadOnly(true);									Ext.getCmp('idhoraInicial')										.setValue("");								}							}						}					},					{						xtype: 'datefield',						fieldLabel: 'Fecha Cita',						name: 'fecha_cita',						id: 'idfechaInicial',						maxLength: 30,						readOnly: true,						allowBlank: true					},					{						xtype: 'timefield',						fieldLabel: 'Hora Cita',						name: 'hora_cita',						id: 'idhoraInicial',						allowBlank: true,						readOnly: true,						format: 'H:i'					},					{						xtype: 'combobox',						fieldLabel: fieldForzoso(msg_es_asegurar),						editable: false,						name: 'tiene_seguro',						id: 'idcmbtieneseguro',						store: Ext.create(							'MyDesktop.store.StoreSINO', {}),						valueField: 'identificador',						displayField: 'descripcion',						enforceMaxLength: true,						maxLength: 30,						value: TIPO_NO,						typeAhead: true,						queryMode: 'local',						allowBlank: false,						emptyText: '',						readOnly: true,						listeners: {							select: function(combo, records) {								var SN = records[0]									.get("identificador");								if (SN == "SI") {									contenedor										.remove(											'idcmbcontenidosat',											false);									contenedor.add(combo_contenido);								} else {									contenedor										.remove(											'idcmbcontenido',											false);									contenedor.add(combo_contenido_sat);								}							}						}					},					contenedor,					{						xtype: 'tbspacer',						height: 5					},					{						xtype: 'numberfield',						name: 'valordeclarado' + scope_main.sufijo,						id: 'idtxtvalordeclarado',						fieldLabel: field_valor_declarado,						readOnly: false,						value: 1,						minValue: 0.5,						maxValue: 150000,						allowDecimals: true,						decimalPrecision: 2,						decimalSeparator: '.'					},					{						xtype: 'numberfield',						name: 'valor_asegurado'							+ scope_main.sufijo,						fieldLabel: field_valor_segurado,						value: 0,						minValue: 0,						maxValue: 99999.99,						allowDecimals: true,						decimalPrecision: 2,						decimalSeparator: '.',						hidden: true					},					{						xtype: 'numberfield',						name: 'pesofisico' + scope_main.sufijo,						fieldLabel: field_peso,						value: 1,						minValue: 0.5,						maxValue: 1000,						allowDecimals: true,						decimalPrecision: 2,						decimalSeparator: '.'					},					{						xtype: 'numberfield',						name: 'largo' + scope_main.sufijo,						fieldLabel: field_largo,						value: 1,						minValue: 0.5,						maxValue: 999.99,						allowDecimals: true,						decimalPrecision: 2,						decimalSeparator: '.'					},					{						xtype: 'numberfield',						name: 'alto' + scope_main.sufijo,						fieldLabel: field_alto,						value: 1,						minValue: 0.5,						maxValue: 999.99,						allowDecimals: true,						decimalPrecision: 2,						decimalSeparator: '.'					},					{						xtype: 'numberfield',						name: 'ancho' + scope_main.sufijo,						fieldLabel: field_ancho,						value: 1,						minValue: 0.5,						maxValue: 999.99,						allowDecimals: true,						decimalPrecision: 2,						decimalSeparator: '.'					},					{						xtype: 'myUpperCaseTextField',						flex: 1,						fieldLabel: field_observacion,						name: 'observacion' + scope_main.sufijo,						width: 100,						margins: '0 0 0 0',						enforceMaxLength: true,						maskRe: /[^~^]/,						maxLength: 150					},					scope_main.gridfrecuencias				];				this.tbar = [{					xtype: 'tbfill'				}, {					hidden: !this.showBtnSalvar,					text: this.btnTitleSalvar,					tooltip: tooltip_agregar_cartera_direcciones,					iconCls: 'activo',					scope: scope_main,					handler: this.agregarRegistro				}];				this.callParent();			},			updateCampos: function(record) {				var fields = Ext.getCmp(this.id).getForm().getFields();				this.updateFieldName(record, fields);			},			updateFieldName: function(record, fields) {				var items = fields.items;				var valor = "";				for (i = 0; i < items.length; i++) {					field = items[i];					if (field != undefined) {						if (field.getName() != undefined) {							valor = record.get(field.getName());							if (valor != undefined) {								field.setValue(valor);							} else {								field.setValue("");							}						}					}				}			},			agregarRegistro: function() {				var numpiezas = this.getValueField("numpiezas");				var multiple = this.getValueField("es_multiple");				if (!this.isValid()) {					mensajeAlert("Capture los datos requeridos de generales");					return;				}				if (multiple == "SI" && numpiezas == 1) {					mensajeAlert("Una guia multiple debe tener mas de 1 etiqueta");					return;				}				this.setLoading('Cargar datos');				var DescripcionServicio = this					.getTextField("idservicio");									var formJson = Ext.getCmp(this.id).getForm()					.getValues();				this.gridfrecuencias.addRow(formJson,					DescripcionServicio, this);			},			formToGrid: function() {				var datosGrid = this.gridfrecuencias.obtenerStoreGrid();				return datosGrid;			},			updateFieldReadOnly: function(record) {				var fields = Ext.getCmp(this.id).getForm().getFields();				var items = fields.items;				var valor = "";				for (i = 0; i < items.length; i++) {					field = items[i];					if (field != undefined) {						if (field.getName() != undefined) {							field.setReadOnly(true);						}					}				}				this.updateCampos(record);			},			updateFieldCte: function(valor, campo) {				var fields = Ext.getCmp(this.id).getForm().getFields();				var items = fields.items;				for (i = 0; i < items.length; i++) {					field = items[i];					if (field != undefined) {						if ((field.getName() != undefined)							&& (field.getName() == campo)) {							field.setValue(valor);						}					}				}			},			/***********************************************************			 * Devuelve los valores de todos los campo			 */			getValueFields: function() {				var fields = Ext.getCmp(this.id).getForm().getFields();				var valor = '';				var items = fields.items;				var valorporpiedades = '';				for (i = 0; i < items.length; i++) {					field = items[i];					if (field != undefined) {						valorporpiedades = valorporpiedades + "|"							+ field.getName() + ' : '							+ field.getValue();					}				}				return valorporpiedades;			},			getValueField: function(campo) {				var fields = Ext.getCmp(this.id).getForm().getFields();				var valor = '';				var items = fields.items;				for (i = 0; i < items.length; i++) {					field = items[i];					if (field != undefined) {						if ((field.getName() != undefined)							&& (field.getName() == campo)) {							valor = field.getValue();						}					}				}				return valor;			},			// Metodo de ayuda para obtener el texto de la descripcion y			// no el ID			getTextField: function(campo) {				var fields = Ext.getCmp(this.id).getForm().getFields();				var valor = '';				var items = fields.items;				for (i = 0; i < items.length; i++) {					field = items[i];					if (field != undefined) {						if ((field.getName() != undefined)							&& (field.getName() == campo)) {							valor = field.getRawValue();						}					}				}				return valor;			},			setUUIDIdRegistro: function(uuid, idregistro) {				this.uuid = uuid;				this.idregistro = idregistro;			},			getCampoValor: function() {				return this.getForm().getFieldValues();			},			validaEnrutamiento: function(combo, records, eOpts) {				var cp_rem = this.remitente.getValueField("cp_rem");				var cp_des = this.destinatario.getValueField("cp_des");				var garantia = records[0].get('idServicio').split("-")[3];				this.checacobertura(cp_rem, cp_des, garantia, this);			},			checacoberturafrecuencias: function() {				var cp_rem = this.remitente.getValueField("cp_rem");				var cp_des = this.destinatario.getValueField("cp_des");				var garantia = this.getValueField('idservicio').split(					"-")[3];				this.checacobertura(cp_rem, cp_des, garantia, this);			},			checacobertura: function(cp_rem, cp_des, garantia,				scope_main) {				garantia = garantia.split("-")[3];				var conn = new Ext.data.Connection();				conn					.request({						url: './rotular_etiquetas/getenrutamientos',						method: 'POST',						defaultHeaders: {							'_csrf_header': hv,							"_csrf": vt						},						params: {							cp_rem: cp_rem,							cp_des: cp_des,							garantia: garantia,							"_csrf": vt						},						success: function(response, opts) {							var obj = Ext								.decode(response.responseText);							if (obj.success == true) {								scope_main.gridfrecuencias									.reLoadInfo(cp_rem, cp_des,										garantia, 1);							} else {								scope_main.gridfrecuencias									.cleanRecords();								scope_main.gridfrecuencias									.reLoadInfo("", "", "", 1);								mensajeAlert(obj.message);							}						},						failure: function(response, opts) {							if (response.responseText != undefined) {								var obj = Ext									.decode(response.responseText);								mensajeAlert(obj.message);							}							scope_main.gridfrecuencias								.cleanRecords();						}					});			},			activarTxt: function() {				var contenedor = Ext.getCmp('idcontenedor');				var txt_contenido = Ext.getCmp('idcmbcontenidosat');				contenedor.remove('idcmbcontenido', false);				contenedor.add(txt_contenido);			},			validarSeguro: function() {				var idservicio = this.getValueField("idservicio");				idservicio = idservicio.split("-")[0];				var conn = new Ext.data.Connection();				conn					.request({						url: './rotular_etiquetas/validarSeguro',						method: 'POST',						defaultHeaders: {							'_csrf_header': hv,							"_csrf": vt						},						params: {							idservicio: idservicio,							"_csrf": vt						},						success: function(response, opts) {							var obj = Ext								.decode(response.responseText);							if (obj.success == true) {								Ext.getCmp('idcmbtieneseguro')									.setReadOnly(false);								Ext.getCmp('idcmbtieneseguro')									.setValue("NO");							} else {								Ext.getCmp('idcmbtieneseguro')									.setReadOnly(true);																	Ext.getCmp('idcmbtieneseguro')									.setValue("NO");																	Ext.getCmp('idcontenedor').remove(									'idcmbcontenido', false);								Ext									.getCmp('idcontenedor')									.add(										Ext											.getCmp('idtxtcontenido'));							}						},						failure: function(response, opts) {							if (response.responseText != undefined) {								var obj = Ext									.decode(response.responseText);								mensajeAlert(obj.message);							}						}					});			},			validarTarima: function() {				if (this.tipo_formulario == "LTL") {					var largo = this.getValueField("largo" + this.sufijo);					var alto = this.getValueField("alto" + this.sufijo);					var ancho = this.getValueField("ancho" + this.sufijo);					if ((ancho > 110 && largo >= 120 && alto >= 190)						|| (ancho >= 110 && largo > 120 && alto >= 190)						|| (ancho >= 110 && largo >= 120 && alto > 190)) {						Ext.getCmp('idCmbTipoEmpaque').setValue("TARIMA DOBLE");					} else {						Ext.getCmp('idCmbTipoEmpaque').setValue("TARIMA SENCILLA");					}				}			}		});