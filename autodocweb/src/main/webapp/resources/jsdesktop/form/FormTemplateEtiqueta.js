Ext.define('MyDesktop.form.FormTemplateEtiqueta', { extend: 'Ext.form.Panel',    xtype: 'formTemplateEtiqueta-form',    frame: false,    width: 400,    layout: 'anchor',    border: false,    method:'POST',    bodyPadding: 10,    fieldDefaults: {       // labelAlign: 'top',        labelWidth: 100,        labelStyle: 'font-weight:bold'    },	showReadOnly:false,    defaults: {        anchor: '100%',        margins: '0 0 10 0'    },	forma: undefined,	myscope:undefined,	operacion:undefined,	main_window:undefined,	uuid:undefined,	idregistro:undefined,	idtemplate:undefined,	autoScroll:true,	operacion:undefined,	main_grid:undefined,	main_detalle:undefined,	tipo:undefined,	idtemplateReadOnly:false,	isclonar:false,		initComponent: function () {		this.myscope=this;		var scope_main = this;		var operacion_aplicar = this.operacion;		this.items= [		        {xtype : 'hidden', name:"_csrf", value:vt},		        {xtype : 'hidden',name: 'idregistro', value:scope_main.idregistro},     		         		        {xtype: 'myUpperCaseTextField', flex: 1,fieldLabel: 'Ident. Clone',name:'idtemplateclone',width:100,  					margins: '0 0 0 0',enforceMaxLength:true,maxLength:30, hidden:!scope_main.isclonar,allowBlanks:true},						        	{xtype: 'myUpperCaseTextField', flex: 1,fieldLabel: field_identificador,name:'idtemplate',width:100,  					margins: '0 0 0 0',enforceMaxLength:true,maxLength:30, readOnly:scope_main.idtemplateReadOnly,					value:scope_main.idtemplate,allowBlanks:false},									{xtype: 'myUpperCaseTextField', flex: 1,fieldLabel: field_descripcion,name:'descripcion',width:100,  					margins: '0 0 0 0',enforceMaxLength:true,maxLength:40,readOnly:scope_main.isclonar,					allowBlanks:false},				{xtype: 'myUpperCaseTextField', flex: 1,fieldLabel: field_estructura_guia,name:'estructuraguia',width:100,  						margins: '0 0 0 0',enforceMaxLength:true,maxLength:200,readOnly:scope_main.isclonar,						allowBlanks:true},		       		{xtype : 'numberfield',name: 'ancho',fieldLabel: field_ancho + ' mm',		        	value: 0,minValue: 1,maxValue: 9999.99,allowDecimals:true,decimalPrecision:2,decimalSeparator:'.' ,		        	readOnly:scope_main.isclonar},    		        {xtype : 'numberfield',name: 'alto',fieldLabel: field_alto +' mm',			        	value: 0,minValue: 1,maxValue: 9999.99,allowDecimals:true,decimalPrecision:2,decimalSeparator:'.',			        	readOnly:scope_main.isclonar},			    {			                xtype: 'combobox',			                fieldLabel: 'Tipo Acuse:',			                editable :false,			                name: 'acuseSoloLeyenda',			                store: Ext.create('MyDesktop.store.StoreTipoLeyendaAcuse',{}),			                valueField: 'idtipo',			                displayField: 'descripcion',							enforceMaxLength:true,							maxLength:30,							value:'1',			                typeAhead: true,			                queryMode: 'local',			                allowBlank: false,			                emptyText: ''			    },    				        	    			];				this.buttons= [						{ hidden: this.showReadOnly, text: titulo_btn_salvar, iconCls:'activo',handler:function() {								var form = this.up('form').getForm();								if (form.isValid()) {									var out = [];									Ext.Object.each(form.getValues(), function(key, value){										out.push(key + '=' + value);									});																											if (scope_main.isclonar){										if (scope_main.getValueField('idtemplateclone') ==''){											mensajeAlert('Indique el identificador del template nuevo');											return;										}									}																		var myMask = new Ext.LoadMask(Ext.getBody(), {msg:"Agregando información espere..."});									myMask.show();																		form.submit({										clientValidation: true,										submitEmptyText: false,										url: './template_etiquetas/' + operacion_aplicar,										params:{"_csrf":vt},										success: function(form, action) {											myMask.hide( );											myMask.disable();																						if (scope_main.main_grid!=undefined){												scope_main.main_grid.buscar();																							}																						if (scope_main.main_detalle!=undefined){												scope_main.main_detalle.buscar('');											}																						if (scope_main.main_window!=undefined){												scope_main.main_window.close();											}											//mensajeConfirm(action.result.message);																},										failure: function(form, action) {											myMask.hide( );											myMask.disable();																						mensajeAlert(action.result.message);										}									});																									}else{									mensajeAlert(msg_generando_infomacion_espere);								}							}					}				];				this.callParent();			},       	updateCampos:function(record){		//alert(Ext.getCmp(this.id));		var fields = Ext.getCmp(this.id).getForm().getFields( ) ;		this.updateFieldName(record,fields);							},	updateFieldName:function(record, fields){		var items = fields.items;		var valor ="";		for(i = 0; i < items.length; i++){			field = items[i];			if (field!=undefined){				if (field.getName()!=undefined){					//busca el nombre del campo que debe ser el mismo del nombre del campo de 					//la forma					valor = record.get(field.getName());					if (valor!=undefined){						//alert('Campo:' + field.getName() + ', valor:' +valor);						field.setValue(valor);					}else{						field.setValue("");					}								}			}		}	},	updateFieldReadOnly:function(record){			//alert(Ext.getCmp(this.id));		var fields = Ext.getCmp(this.id).getForm().getFields( ) ;				var items = fields.items;		var valor ="";		for(i = 0; i < items.length; i++){			field = items[i];			if (field!=undefined){				if (field.getName()!=undefined){					field.setReadOnly(true);								}			}		}				this.updateCampos(record);	},			updateFieldCte:function(valor, campo){		var fields = Ext.getCmp(this.id).getForm().getFields( ) ;				var items = fields.items;		for(i = 0; i < items.length; i++){			field = items[i];			if (field!=undefined){				if ((field.getName()!=undefined) && (field.getName()==campo)){					field.setValue(valor);								}			}		}	},		/****	 * Devuelve los valores de todos los campo	 */	getValueFields:function(){		var fields = Ext.getCmp(this.id).getForm().getFields( ) ;		var valor = '';		var items = fields.items;		var valorporpiedades = '';		for(i = 0; i < items.length; i++){			field = items[i];			if (field!=undefined){				valorporpiedades= valorporpiedades +"|"+ field.getValue();			}		}		return valorporpiedades;	},	getValueField:function(campo){		var fields = Ext.getCmp(this.id).getForm().getFields( ) ;		var valor = '';		var items = fields.items;		for(i = 0; i < items.length; i++){			field = items[i];			if (field!=undefined){				if ((field.getName()!=undefined) && (field.getName()==campo)){					valor= field.getValue();								}			}		}		return valor;	},	setUUIDIdRegistro:function(uuid,idregistro){		this.uuid=uuid;		this.idregistro = idregistro;	},	getCampoValor:function(){		return this.getForm().getFieldValues();	},	setMainWindows:function(windows){		this.main_window=windows;	},		setMainGrid:function(grid){		this.main_grid=grid;	},		});