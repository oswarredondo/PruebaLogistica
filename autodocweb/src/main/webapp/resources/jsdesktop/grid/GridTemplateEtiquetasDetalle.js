Ext.define('MyDesktop.grid.GridTemplateEtiquetasDetalle', {    extend: 'Ext.grid.Panel',    requires: [        'Ext.grid.column.Action',        'Ext.grid.plugin.CellEditing',        'Ext.form.field.Text',        'Ext.toolbar.TextItem',        'Ext.ux.grid.FiltersFeature'    ],    stateful: true,    collapsible: false,    multiSelect: true,    stateId: 'stateGridTemplateEtiquetas',    viewConfig: {        stripeRows: true,        enableTextSelection: true    },	uuid:undefined,	idregistro:undefined,	id:undefined,	isConsulta:false,	myScope:undefined,	uuid:undefined,	idtemplate:undefined,	idregistro:undefined,	mystore:undefined,	    initComponent: function () {    	var mainscope = this;    	this.store = Ext.create('MyDesktop.store.StoreEtiquetasTemplateDetalle',{});    	//this.editing = Ext.create('Ext.grid.plugin.CellEditing',{clicksToEdit: 2});		 //this.plugins = this.editing;		 				 		 var filters = {			        ftype: 'filters',			        // encode and local configuration options defined previously for easier reuse			        encode: false, // json encode the filter query			        local: true,   // defaults to false (remote filtering)			        // Filters are most naturally placed in the column definition, but can also be			        // added here.			        filters: [{			            type: 'boolean',			            dataIndex: 'visible'			        }]			    };		 		 this.features= [filters];		 		this.selType= 'checkboxmodel';        this.columns = [                       						{				            xtype:'actioncolumn', 				            width:60,				            items: [ 				                    {										icon: './resources/images48x48/Editor16x16Green.png',										tooltip: 'Editar línea',									   										handler: function(grid, rowIndex, colIndex) {											var rows =  grid.getSelectionModel().getSelection();											if(rows.length <=0){												mensajeAlert("Seleccione los registros que desea modificar");												return;											}											mainscope.modificar(rows[0],mainscope);										}				                    },				                    {xtype:'tbseparator'},								 {									icon: './resources/images48x48/CloseRed16x16.png',									tooltip: 'Borrar línea',								   									handler: function(grid, rowIndex, colIndex) {										var rows =  grid.getSelectionModel().getSelection();										if(rows.length <=0){											mensajeAlert("Seleccione los registros que desea eliminar");											return;										}																				 Ext.MessageBox.confirm('Confirmacion', 'Desea borrar el registro seleccionado?', 												 function(id, text){											if ( (id === 'yes')  || (id === 'si') || (id === 'y' ) || (id === 's' ) ){ 												if(rows.length === 0){  													return ;												}																								var conn = new Ext.data.Connection();										   		conn.request({										   				scope:this, 														url: './template_etiquetas/deleteRegistroTemplateDetalle',														method:'POST',														defaultHeaders:{'_csrf_header':hv,"_csrf":vt },														params:{idregistro:rows[0].get('idregistro'),"_csrf":vt },														success: function(response, opts) {															var obj = Ext.decode(response.responseText);															mainscope.getView().getStore().reload(																	{																		params:{idtemplate:mainscope.idtemplate},																		callback:function(r,options,success){																			 if (r.length<=0){																				 Ext.Msg.show({																					 title: 'Aviso',																					 msg: 'No existe información con el criterio de busqueda selecionado.',																					 modal: false,																					 icon: Ext.Msg.INFO,																					 buttons: Ext.Msg.OK																										 });  																																							 }																		 }	  															});														},														failure: function(response, opts) {											       			if (response.responseText!=undefined){											       				var obj = Ext.decode(response.responseText);											       				if (obj.message!=undefined){											       					mensajeAlert(obj.message);												       			}												       		}										       																	}											   		});											}										 },mainscope);										 									}                								}				            ]				        },				        {text     : 'Tipo',width: 100, sortable : true,dataIndex: 'type'	},						{text     : 'Bloque',width: 100,sortable : true,dataIndex: 'bloque',							field: {								xtype: 'myUpperCaseTextField',						        maxLength:30,						        minLength:1,						        required:true,						        enforceMaxLength:true						        						        							},							filter: {				                type: 'string'				            }						},                       						{text     : 'Campo',width: 250, sortable : true,dataIndex: 'campo',							field: {																xtype: 'textfield',			                    minLength:1,			                    required:true							}												},						{text     : 'Etiqueta',width: 200,sortable : true,dataIndex: 'etiqueta',							field: {															xtype: 'textfield',			                    minLength:1,			                    required:true			                    			                    							}								},						{text     : 'X',width: 80,sortable : true,dataIndex: 'x',							editor: {								xtype: 'numberfield',								value: 0.0,								maxValue: 9999.99,								allowDecimals:true,								decimalPrecision:2,								decimalSeparator:'.',								thousandSeparator:',',						        required:true,						        minValue: 0.1						       							}								},						{text     : 'Y',width: 80,sortable : true,dataIndex: 'y',							editor: {								xtype: 'numberfield',								value: 0.0,								maxValue: 9999.99,								allowDecimals:true,								decimalPrecision:2,								decimalSeparator:'.',								thousandSeparator:',',						        required:true,						        minValue: 0.1						       							}									},						{text     : 'Ancho',width: 80,sortable : true,dataIndex: 'width',							editor: {								xtype: 'numberfield',								value: 0.0,								maxValue: 9999.99,								allowDecimals:true,								decimalPrecision:2,								decimalSeparator:'.',								thousandSeparator:',',						        required:true,						        minValue: 0.1						        						       							}							},						{text     : 'Alto',width: 80,sortable : true,dataIndex: 'heigth',							editor: {								xtype: 'numberfield',								value: 0.0,								maxValue: 9999.99,								allowDecimals:true,								decimalPrecision:2,								decimalSeparator:'.',								thousandSeparator:',',						        required:true,						        minValue: 0.1						       							}							},						{text     : 'Borde',width: 80,sortable : true,dataIndex: 'border',							editor: {								xtype: 'numberfield',								value: 0.0,								maxValue: 9999.99,								allowDecimals:true,								decimalPrecision:2,								decimalSeparator:'.',								thousandSeparator:',',						        required:true,						        minValue: 1.0						       							}							},						{text     : 'Rotación',width: 85,sortable : true,dataIndex: 'rotation',	                     	 editor: {    				            	  xtype: 'combobox',					                name: 'idagrupamiento',					                store: Ext.create('MyDesktop.store.StoreTemplateRotacion',{}),					                valueField: 'idtipo',					                displayField: 'descripcion',									enforceMaxLength:true,									maxLength:30,					                typeAhead: true,					                queryMode: 'local',					                allowBlank: false,					                emptyText: ''				            }						},						{text     : 'Font',width: 150,sortable : true,dataIndex: 'font',							 editor: {    				            	  xtype: 'combobox',					                name: 'idagrupamiento',					                store: Ext.create('MyDesktop.store.StoreTemplateFont',{}),					                valueField: 'idtipo',					                displayField: 'descripcion',									enforceMaxLength:true,									maxLength:30,					                typeAhead: true,					                queryMode: 'local',					                allowBlank: false,					                emptyText: ''				            }						},						{text     : 'Tam. Font',width: 95,sortable : true,dataIndex: 'fontsize',							editor: {								xtype: 'numberfield',								value: 0.0,								maxValue: 9999.99,								allowDecimals:true,								decimalPrecision:2,								decimalSeparator:'.',								thousandSeparator:',',						        required:true,						        minValue: 1.0						       							}							},						{text     : 'Linea Base',width: 95,sortable : true,dataIndex: 'baseline',							 editor: {    				            	  xtype: 'combobox',					                name: 'idagrupamiento',					                store: Ext.create('MyDesktop.store.StoreTemplateBaseLine',{}),					                valueField: 'idtipo',					                displayField: 'descripcion',									enforceMaxLength:true,									maxLength:30,					                typeAhead: true,					                queryMode: 'local',					                allowBlank: false,					                emptyText: ''				            }												}				       			];                  this.bbar=[	                   {xtype:'label', html:'Agregar'},					{						text : 'Etiqueta',						iconCls : 'pen_green',						id:'label',						scope:this,						handler : this.agregar, 						tooltip : 'Agrega registro a la tabla de impresión'					},					{						text : 'Texto',						id:'text',						iconCls : 'align_justify_blue',						scope:this,						handler : this.agregar, 						tooltip : 'Agrega registro a la tabla de impresi�n'					},					{						text : 'Rectangulo',						iconCls : 'rectangle_blue',						id:'rectangle',						scope:this,						handler : this.agregar, 						tooltip : 'Agrega registro a la tabla de impresi�n'					},					{						text : 'Imagen',						iconCls : 'image_blue',						id:'image',						scope:this,						handler : this.agregar, 						tooltip : 'Agrega registro a la tabla de impresi�n'					},					{						text : 'Cod. PDF',						iconCls : 'codebarpdf_blue',						id:'pdf',						scope:this,						handler : this.agregar, 						tooltip : 'Agrega registro a la tabla de impresi�n'					},					{						text : 'Cod. 128-Abajo-',						iconCls : 'codebar128_blue',						id:'cb',						width:150,						scope:this,						handler : this.agregar, 						tooltip : 'Agrega registro a la tabla de impresi�n'					},					{						text : 'Cod.128-Arriba-',						iconCls : 'codebar128_blue',						id:'cbabove',						width:150,						scope:this,						handler : this.agregar, 						tooltip : 'Agrega registro a la tabla de impresi�n'					}							]		this.callParent();    },	agregar:function(o){		var myscope= this;				var formpropiedades = new MyDesktop.form.FormPropiedadesTemplateLineaEtiq({			operacion:'creaRegistroTemplateDetalle',tipo:o.id,idtemplate:myscope.idtemplate,			idregistro:0		});		setValorFormaField('_csrf', formpropiedades,vt);		var datos_window = new Ext.Window({			width    : 585,			height   : 470,			title	: 'Crear linea',			closable:true,			layout:'fit',			resizable:false,			modal:true,			items: [formpropiedades] ,			headerPosition: 'right'		}); 		formpropiedades.setMainWindows(datos_window); 		formpropiedades.setMainGrid(myscope);		datos_window.show();			        	},	modificar:function(registro,mainscope){		var myscope= mainscope;				var formpropiedades = new MyDesktop.form.FormPropiedadesTemplateLineaEtiq({			operacion:'updateRegistroTemplateDetalle',tipo:registro.get('type'),idtemplate:myscope.idtemplate,			idregistro:registro.get('idregistro')					});		formpropiedades.updateCampos(registro);		setValorFormaField('_csrf', formpropiedades,vt);		var datos_window = new Ext.Window({			width    : 585,			height   : 470,			title	: 'Actualiza linea',			closable:true,			layout:'fit',			resizable:false,			modal:true,			items: [formpropiedades] ,			headerPosition: 'right'		}); 		formpropiedades.setMainWindows(datos_window); 		formpropiedades.setMainGrid(myscope);		datos_window.show();			},		buscarWin:function(idtemplate, myscope){				myscope.getView().getStore().reload(				{					params:{idtemplate:idtemplate},					callback:function(r,options,success){						 /*if (r.length<=0){							 Ext.Msg.show({								 title: 'Aviso',								 msg: 'No existe informaci�n con el criterio de busqueda selecionado.',								 modal: false,								 icon: Ext.Msg.INFO,								 buttons: Ext.Msg.OK													 });  													 }*/					 }	  		});	},	buscar:function(idtemplate, idregistro){			this.getView().getStore().reload(				{					//params:{idtemplate:idtemplate, idregistro:idregistro==undefined?0:idregistro},					params:{idregistro:idregistro==undefined?0:idregistro},					callback:function(r,options,success){						 /*if (r.length<=0){							 Ext.Msg.show({								 title: 'Aviso',								 msg: 'No existe informaci�n con el criterio de busqueda selecionado.',								 modal: false,								 icon: Ext.Msg.INFO,								 buttons: Ext.Msg.OK													 });  													 }*/					 }	  		});	},		getRowsSelected:function(){		return this.getView().getSelectionModel().getSelection();	},	setIdTemplate:function(idregistro,idtemplate){		this.idtemplate=idtemplate;		this.idregistro = idregistro;			}	});