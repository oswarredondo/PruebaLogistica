Ext.define('MyDesktop.grid.GridMovimientosCaja', {    extend: 'Ext.grid.Panel',    requires: [        'Ext.grid.column.Action',        'Ext.grid.plugin.CellEditing',        'Ext.form.field.Text',        'Ext.toolbar.TextItem'    ],    stateful: true,    collapsible: false,    multiSelect: true,    stateId: 'stateGridAdicional',    viewConfig: {        stripeRows: true,        enableTextSelection: true    },	id:undefined,	isConsulta:false,	myScope:undefined,    initComponent: function () {    	    	var store_sino = Ext.create('MyDesktop.store.StoreSINO',{}) ;    	var store_tiposmovimientoscaja = Ext.create('MyDesktop.store.StoreTiposMovimientosCaja',{}) ;		this.myScope = this;		//Si el grid no es de consulta entonces muestra la barra para administrar los datos		if (!this.isConsulta){						this.tbar=[					 {		               	  xtype: 'datefield',fieldLabel: 'Fecha',name:'fechacaja',id: 'idfechacaja',allowBlank: false,		               	  	maxValue: new Date(),width: 300, readOnly:this.showReadOnly, value:new Date()		              },																	{ iconCls: 'buscar_blue',handler:this.filtrar, scope:this.myScope},					{xtype: 'tbfill'},						{							xtype: 'buttongroup', // <--- grouping the buttons							items:[									{ tooltip: 'Apertura',iconCls: 'open_green',handler:this.showPDFDetails, scope:this.myScope },									{ tooltip: 'Cierre',iconCls: 'close_green',handler:this.showAttachment, scope:this.myScope },									{ tooltip: 'Agregar Movimiento',iconCls: 'agregar',handler:this.agregar, scope:this.myScope },									{ tooltip: 'Borrar',iconCls: 'borrar',handler:this.eliminar, scope:this.myScope }												       ]						}			      ];		}				this.store = Ext.create('MyDesktop.store.StoreMovimientosCaja',{});		this.selType= 'checkboxmodel';        this.columns = [											{text     : 'Usuario',width: 80,sortable : true,dataIndex: 'login'},						{text     : 'Fecha',width: 110,sortable : true,dataIndex: 'fecha'},						{text     : 'Tipo Movimiento',width: 250,sortable : true,dataIndex: 'descripcion'},						{text     : 'Cantidad',width: 85,sortable : true,dataIndex: 'cantidad',							align: 'right',renderer: 'usMoney'}									];			this.callParent();    },	agregar:function(){		var forma_movimiento_caja = Ext.create('MyDesktop.form.FormMovimientoCaja',				{grid_scope:this}); 		var win_forma_movimiento_caja = Ext.create('widget.window', {			title: "Agregar movimiento",			width: 300,			height: 210,			modal:true,			plain: true,			headerPosition: 'right',			layout: 'fit',			items: forma_movimiento_caja					});				win_forma_movimiento_caja.show();	        	},	modificar:function(){		var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		Ext.Msg.alert('Verificar',"Debe de Seleccionar solo un registro para modificar");     		return;     	}		if(rows.length >1){     		Ext.Msg.alert('Verificar',"Seleccione solamente un registro a modificar");     		return;     	}			},			eliminar:function(){		var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		 Ext.Msg.alert('Verificar',"Seleccione los registros que desea eliminar");     		return;     	}		    	 Ext.MessageBox.confirm('Confirmacion', '¿Desea borrar los registros seleccionados?', function(id, text){       		if ( (id === 'yes')  || (id === 'si') || (id === 'y' ) || (id === 's' ) ){        			if(rows.length === 0){  //step 3       				return ;       			}       			this.getView().getStore().remove(rows);  //step 4       			this.commitInfo();       		}       	 },this);     	 				},	showDetails:function(){			var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		Ext.Msg.alert('Verificar',"Debe de Seleccionar solo un registro para visualizar");     		return;     	}		if(rows.length >1){     		Ext.Msg.alert('Verificar',"Seleccione solamente un registro a visualizar");     		return;     	}		},	loadInfo:function(){		this.getView().getStore().load();		},	commitInfo:function(){		this.getView().getStore().save( );		this.getView().getStore().commitChanges();		},	saveInfo:function(){		this.getView().getStore().save( );		this.getView().getStore().commitChanges();		this.loadInfo();		},	getRowsSelected:function(){		return this.getView().getSelectionModel().getSelection();	}	});