Ext.define('MyDesktop.grid.GridObservacionContenidoEtiquetas', {    extend: 'Ext.grid.Panel',    requires: [        'Ext.grid.column.Action',        'Ext.grid.plugin.CellEditing',        'Ext.form.field.Text',        'Ext.toolbar.TextItem'    ],    stateful: true,    collapsible: false,    multiSelect: true,    stateId: 'stateGridObservacionContenidoEtiquetas',	isConsulta:true,	myScope:undefined,    viewConfig: {        stripeRows: true,        enableTextSelection: true    },	id:undefined,	isConsulta:false,	myScope:undefined,	uuid:undefined,	idregistro:undefined,    initComponent: function () {		this.myScope = this;		//Si el grid no es de consulta entonces muestra la barra para administrar los datos		if (!this.isConsulta){			 this.editing = Ext.create('Ext.grid.plugin.CellEditing',{clicksToEdit: 1});			 this.plugins = this.editing;			}						this.selType= 'checkboxmodel';		var sm = Ext.create('Ext.selection.CheckboxModel',{mode : 'SINGLE'});		this.selModel= sm;				this.store = Ext.create('MyDesktop.store.StoreEtiquetasObservacionContenido',				{baseParams:{uuid:this.uuid,			idregistro:this.idregistro}}		);		this.store.getProxy().setExtraParam("uuid", this.uuid);		this.store.getProxy().setExtraParam("idregistro", this.idregistro);			        this.columns = [						{text     : 'Contenido',width: 200,sortable : true,dataIndex: 'contenido',							align: 'left',							editor: {								xtype: 'myUpperCaseTextField',						        required:true,						        allowBlank: false,						        enforceMaxLength:true,						        maxLength:40						       							}									},						{text     : 'Referencia',width: 200,sortable : true,dataIndex: 'referencia',							align: 'left',							editor: {								xtype: 'myUpperCaseTextField',						        required:true,						        allowBlank: false,						        enforceMaxLength:true,						        maxLength:30						       							}									},						{text     : 'Observacion',width: 250,sortable : true,dataIndex: 'observacion',							align: 'left',							editor: {								xtype: 'myUpperCaseTextField',						        required:false,						        allowBlank: true,						        enforceMaxLength:true,						        maxLength:50						       							}									}			];			this.callParent();    },	agregar:function(){		  var rec = new MyDesktop.models.ModeloAdicionales({			  identificador: 0,			  clave:'',			  descripcion: '',			  precio:0.0,			  tipo:'0'	        }), edit = this.editing;	      edit.cancelEdit();	      this.store.insert(0, rec);	        edit.startEditByPosition({	            row: 0,	            column: 1	      });	        	},	modificar:function(){		var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		Ext.Msg.alert('Verificar',"Debe de Seleccionar solo un registro para modificar");     		return;     	}		if(rows.length >1){     		Ext.Msg.alert('Verificar',"Seleccione solamente un registro a modificar");     		return;     	}			},			eliminar:function(){		var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		 Ext.Msg.alert('Verificar',"Seleccione los registros que desea eliminar");     		return;     	}		    	 Ext.MessageBox.confirm('Confirmacion', '¿Desea borrar los registros seleccionados?', function(id, text){       		if ( (id === 'yes')  || (id === 'si') || (id === 'y' ) || (id === 's' ) ){        			if(rows.length === 0){  //step 3       				return ;       			}       			this.getView().getStore().remove(rows);  //step 4       			this.commitInfo();       		}       	 },this);     	 				},	showDetails:function(){			var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		Ext.Msg.alert('Verificar',"Debe de Seleccionar solo un registro para visualizar");     		return;     	}		if(rows.length >1){     		Ext.Msg.alert('Verificar',"Seleccione solamente un registro a visualizar");     		return;     	}		},	loadInfo:function(){		this.getView().getStore().load();		},	commitInfo:function(){		this.getView().getStore().save( );		this.getView().getStore().commitChanges();		},	saveInfo:function(){		this.getView().getStore().save( );		this.getView().getStore().commitChanges();		this.loadInfo();		},	getRowsSelected:function(){		return this.getView().getSelectionModel().getSelection();	}	});