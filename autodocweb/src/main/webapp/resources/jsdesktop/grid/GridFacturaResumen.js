Ext.define('MyDesktop.grid.GridFacturaResumen', {    extend: 'Ext.grid.Panel',    requires: [        'Ext.grid.column.Action',        'Ext.grid.plugin.CellEditing',        'Ext.form.field.Text',        'Ext.toolbar.TextItem'    ],    stateful: true,    collapsible: false,    multiSelect: true,    stateId: 'stateGridFacturaResumen',    viewConfig: {        stripeRows: true,        enableTextSelection: true    },	uuid:undefined,	idregistro:undefined,	id:undefined,	isConsulta:false,	myScope:undefined,	uuid:undefined,	idregistro:undefined,	mystore:undefined,    initComponent: function () {    	var my_scope = this;    	var store_sino = Ext.create('MyDesktop.store.StoreSINO',{}) ;		this.myScope = this;		this.store = Ext.create('MyDesktop.store.StoreFacturaResumen',{});		this.selType= 'checkboxmodel';		var sm = Ext.create('Ext.selection.CheckboxModel',{mode : 'SINGLE'});		this.selModel= sm;		        this.columns = [                 		{							menuDisabled: true,	sortable: false,							xtype: 'actioncolumn',	width: 20,							items: [								{									getClass: function(v, meta, rec) {										if ((rec.get('estatus')!='C')){											return 'ACTIVO';										}else{											return 'CANCELADA';										}									},									getTip: function(v, meta, rec) {										if (rec.get('estatus')=='A'){											return 'SIN FACTURAR';										}else if (rec.get('estatus')=='F'){											return 'FACTURADO';										}else if (rec.get('estatus')=='C'){											return 'CANCELADA';										}else if (rec.get('estatus')=='N'){											return 'NOTA CREDITO';										}else{											return 'CANCELADA';										}									},									handler: function(grid, rowIndex, colIndex) {}								}							]						},						/* CAMBIO CITA EVIDENCIA MANIOBRA 						{							menuDisabled: true,	sortable: false,							xtype: 'actioncolumn',	width: 20,							items: [								{									getClass: function(v, meta, rec) {										return 'RECEPOFICRECOL';									},									getTip: function(v, meta, rec) {										return 'Adicionales Especiales';									},									handler: function(grid, rowIndex, colIndex) {										 var rec = grid.getStore().getAt(rowIndex);										my_scope.adicionalEspecial(rec.get('idcontrol'), 												rec.get('estatus'));									}								}							]						},						FIN CAMBIO */						{text     : 'Tipo',width: 110, sortable : true,dataIndex: 'tipo', hidden:false	},						{text     : 'Estatus',width: 80, sortable : true,dataIndex: 'estatus', hidden:false	},                        {text     : 'Id',width: 80, sortable : true,dataIndex: 'idcontrol', hidden:true	},						{text     : 'IdControl',width: 100, sortable : true,dataIndex: 'idcontrolenvio'	},						{text     : '#Documentos',width: 100, sortable : true,dataIndex: 'cantidad', tooltip:"Cantidad de Documentos Marcados"	},												{text     : 'Dia',width: 100, sortable : true,dataIndex: 'dia'	},						{text     : 'Cliente',width: 100, sortable : true,dataIndex: 'cliente'	},						{text     : 'Login',width: 100, sortable : true,dataIndex: 'login'	},						{text     : 'Mes',width: 110, sortable : true,dataIndex: 'nombreMes'	},						{text     : 'Factura',width: 100, sortable : true,dataIndex: 'factura'	},						{text     : 'Cancelado por',width: 180, sortable : true,dataIndex: 'login_cancela'	},						{text     : 'Fecha cancel',width: 180, sortable : true,dataIndex: 'fecha_cancela'	},						{text     : 'Factura Nota',width: 180, sortable : true,dataIndex: 'fac_nota'	},						{text     : 'Fecha Nota',width: 180, sortable : true,dataIndex: 'fecha_notacredito'	},						{text     : 'Nota creada por',width: 180, sortable : true,dataIndex: 'login_notacredito'	}			];                	var DIA = new Date();        	var MES = DIA.getMonth()+1;        	var YEAR = DIA.getFullYear();        	        	var arr_data = [        	        {"year":""+ (YEAR)},        	        {"year":""+ (YEAR-1)},        	        {"year":""+ (YEAR-2)},        	        {"year":""+ (YEAR-3)},        	        {"year":""+ (YEAR-4)},        	    ]        	        	var anios = Ext.create('Ext.data.Store', {        	    fields: ['year'],        	    data : arr_data        	});        	// Create the combo box, attached to the states data store        	var combo_anios = Ext.create('Ext.form.ComboBox', {        		width: 80,        		id:'year'+this.id,        	    store: anios,        	    queryMode: 'local',        	    displayField: 'year',        	    valueField: 'year',        	           	})        	combo_anios.setValue(YEAR+"");        	        	var combo_tipos_busqueda= Ext.create('Ext.form.ComboBox', {        		fieldLabel: '',        		width: 150,        		disabled: false,        		editable:false,        		id:'mes'+this.id,        		store: Ext.create('MyDesktop.store.StoreMeses',{}) ,        		queryMode: 'local',        		emptyText: 'Seleccione mes',        		displayField: 'descripcion',        		valueField: 'identificador'        	});        	combo_tipos_busqueda.setValue(MES+"");		        	this.tbar=[			 {xtype:'label', html:'Año:'},			 combo_anios,		      {xtype:'label', html:'Seleccione Mes:'},		      combo_tipos_busqueda,		      {xtype: 'label', text:'Cliente:'	},			  {xtype: 'myUpperCaseTextField', id:'idpatroncpbusquedafactura'+this.id, allowBlank: false},			  { iconCls: 'buscar_blue',		        handler:function(){		        	my_scope.reloadInfo();			  	}, 			  scope:this}		      ];    		this.dockedItems= [    	              		{     	              			xtype: 'toolbar',    	              			dock: 'bottom',    	              			items: [    	              			    /*{xtype: 'label', text:'Cliente:'	},    	              				{xtype: 'myUpperCaseTextField',     	              			    	  id:'clientemarcado'+this.id, allowBlank: false, maxLength:10},       	              			    {xtype: 'label', text:'Fecha:'	},    	              			  { xtype:'datefield',id:'idfechamarcado'+my_scope.id,maxLength:30,allowBlank:false,width:110},     	      			            { text: "Marcar Registos", tooltip:'Muestra el PDF creado con detalle ',     	      			            	scope: my_scope, iconCls:'signature_blue',     	      			            	disabled:checkEnable('btn.facturar.marcar.registros'),     	      			            	handler:my_scope.marcaregistroscorte},*/ 	      			               { text: "Reporte", tooltip:'Muestra el PDF creado con detalle',         	      			            	scope: my_scope, iconCls:'pdf_blue',         	      			            	handler:my_scope.reportepdf},	      			            	   {text: "EXCEL", tooltip:'Exporta a Excel', scope: my_scope,iconCls:'excel_blue', id: 'idexportarMenuDes', handler:my_scope.exportarExcel, hidden:my_scope.ocultaBotonExportar},     	      			           {xtype:'tbfill'},     	      			           { text: "Not Cred",tooltip:'Nota de Credito',	      			            		scope: my_scope,	      			            		//iconCls:'books_blue',	      			            		disabled:checkEnable('btn.facturar.nota.credito'),	      			            		handler:my_scope.notacredito},      			            		{xtype:'tbseparator'},      			            		{ text: "Consultar guías",tooltip:'Consultar las guías del corte',	      			              		scope: my_scope,iconCls:'books_blue',	      			              		//disabled:checkEnable('btn.facturar.crear.factura.entregada'),	      			              		handler:my_scope.facturar_por_movimiento},         	      			        {xtype:'tbseparator'},    	    	      		           	    { text: "Facturar",tooltip:'Crea factura',     	      			            		scope: my_scope,iconCls:'books_blue',     	      			            		disabled:checkEnable('btn.facturar.crear.factura'),     	      			            		handler:my_scope.facturar},     	      			            {xtype:'tbseparator'},    	      		           	    {text: "Cancelar",tooltip:'Cambia el estatus de la guía a CANCELADO',    	      		           	    	disabled:checkEnable('btn.facturar.cancela'),    	      		           	    	scope: my_scope,iconCls:'deleteRed16x16',     	      		           	    	handler:my_scope.cancelar}    	              			]    	              		}    	             ];     				this.callParent();    },        //Facturación de guías por movimiento    facturar_por_movimiento:function(){    	var my_scope = this;    	var registro = my_scope.getRowSelected();    	if (registro==undefined){    		mensajeAlert("Seleccione el registro que desea visualizar.");    		return;    	}else{    		var grid_factura = Ext.create('MyDesktop.grid.GridFacturaGuias',    				{		    			autoScroll: true,		    			forceFit:true,		    			scrollOffset:0,		    			getTotalWidth: function() {		    				return "auto";		    			},		    			idcontrol:registro.get('idcontrol'),		    			idcontrolenvio:registro.get('idcontrolenvio'),		    			factura:registro.get('factura'),		    			tipo:registro.get('tipo')    				});    		    		var main_window = Ext.create('widget.window', {    			title: "Consulta de guías",    			iconCls: 'agregar',    			width: 1170,    			height: 500,          			modal:true,    			plain: true,    			//headerPosition: 'right',    			layout: 'fit',    			items: grid_factura    		});    		main_window.show();    	}	},        notacredito:function(){    	var my_scope = this;    	var registro = my_scope.getRowSelected();    	if (registro==undefined){    		mensajeAlert("Seleccione el registro que desea facturar.");    		return;    	}    	if (registro.get('estatus') =='C'){    		mensajeAlert("La factura fue cancelada, operacion no valida.");    		return;    	}    	if (registro.get('factura')==undefined || registro.get('factura')==''){    		mensajeAlert("El registro seleccionado debe ser facturado antes de realizar una nota de credito.");    		return;    	}    	 var form = new Ext.form.Panel({    		 	height: 400,    		 	border: false,    	        fieldDefaults: {    	        	 labelAlign: 'top',    	            labelWidth: 80    	        },    	        method:'POST',    	        defaultType: 'myUpperCaseTextArea',    	        bodyPadding: 5,	    	        url: './facturaresumen/notacredito',    	        items: [    	                {xtype : 'hidden', name:"_csrf", value:vt},    	                {    	                	xtype:'hidden',    	                	name:'idcontrol',     	                	value:registro.get('idcontrol')    	                },    	                {    	                	xtype:'hidden',    	                	name:'factura',    	                	value:registro.get('factura')    	                },    	         {    	        	    	        	xtype: 'myUpperCaseTextArea',    	            fieldLabel: 'Obs. Niv. Posc.',    	            name: 't_txt_head',    	            anchor:'100%',    	            allowBlank:true,    	            maxLength:132    	        },{    	        	xtype: 'myUpperCaseTextArea',    	            	            fieldLabel: 'Obs. Generales',    	            name: 't_txt_oper',     	            anchor: '100%',    	            allowBlank:true,    	           maxLength:132    	        }],    	            	            	    });    	 var  win = Ext.widget('window', {             title: 'NOTA DE CREDITO',             closeAction: 'hide',             width: 550,             height: 300,             layout: 'fit',             resizable: false,             modal: true,             items: form,             buttons: [               {                 text: 'Finalizar',                                 handler: function() {                     if (form.isValid()) {                		 Ext.MessageBox.confirm(titulo_confirmar, "Desea generar la Nota de Credito?",                				 function(id, text){             			       		if ( (id === 'yes')  || (id === 'si') || (id === 'y' ) ||             			       				(id === 's' ) ){              			       			var ventana = creaVentanaEspera ();	             			       		 form.submit({	                                         success: function(form, action) {	                                        	 ventana.close();	                                        	 my_scope.reloadInfo();	                                        	 win.close();	                                         },	                                         failure: function(form, action) {	                                        	 ventana.close();	                                        	 mensajeAlert(action.result.message);	                                             win.close();	                                         }	                                     });             			       		}else{             			       			win.close();             			       		}             		       	 },this);                     }                 }             }]         });    	     	 win.show();         	    },	reloadInfo:function(){		var my_scope = this;		my_scope.getView().getStore().reload(				{					params:{						anio: Ext.getCmp('year'+this.id).getValue(),						mes:Ext.getCmp('mes'+my_scope.id).getValue(), 						cliente:Ext.getCmp('idpatroncpbusquedafactura'+my_scope.id).getValue(),						start:0											},					callback:function(r,options,success){						 if (r.length<=0){							 Ext.Msg.show({								 title: 'Aviso',								 msg: 'No existe información con el criterio de busqueda selecionado.',								 modal: false,								 icon: Ext.Msg.INFO,								 buttons: Ext.Msg.OK													 });  						 }					 }	  				});	},	marcaregistroscorte:function(){		var my_scope = this;		var cliente = Ext.getCmp('clientemarcado'+my_scope.id).getValue();		if (cliente==''){			mensajeAlert("Indique el numero de cliente a marcar.");    		return;		}		if (!isValidValueCampoRaw('idfechamarcado'+my_scope.id, 'Indique la fecha corte')){			return;		}				var ventana = creaVentanaEspera ();			var conn = new Ext.data.Connection();		 //Obtiene los datos de fecha inicial y final		 conn.request({				url:'./facturaresumen/marcarcorte',				method:'POST',				method:'POST',				defaultHeaders:{'_csrf_header':hv,"_csrf":vt },				params:{					"_csrf":vt,						cliente:cliente,						dia: Ext.getCmp('idfechamarcado'+my_scope.id).getRawValue()					},				//form:'forma_resumen',				success:function (response, opts){					ventana.close();						var obj = Ext.decode(response.responseText);												if (response.failure!=undefined){							mensajeAlert(response.failure);						}else{							my_scope.reloadInfo();						}											},				failure:function (response, opts){					ventana.close();					var obj = Ext.decode(response.responseText);					mensajeAlert("Error ",response.message);				}								});		 	},	reportepdf:function(){		var my_scope = this;    	var registro = my_scope.getRowSelected();    	if (registro==undefined){    		mensajeAlert("Seleccione el registro que desea descargar.");    		return;    	}else{	    		var url ="./facturaresumen/imprimirpdf";    		url =url+"?idcontrol="+registro.get('idcontrol')+"&tipo=" + registro.get('tipo') +    		"&idcontrolenvio=" +registro.get('idcontrolenvio')+"&factura="+registro.get('factura') +     		"&tipoB=pdf";			    		visorPDF(    				'utils-win-vistaprevia-pdf_controlfactura'+ registro.get('idcontrolenvio'),    				"Visor PDF: " +  registro.get('idcontrolenvio'),url);    	}    },    exportarExcel:function(){    	var my_scope = this;    	var registro = my_scope.getRowSelected();		/*var tipoBusqueda = "01";		var tipobusquedaestatus = "01";		var iddatoabuscar = "";*/		    	if(registro==undefined){     		mensajeAlert("Seleccione el registro que desea descargar.");     		return;     	}else{     		/*var url ="./facturaresumen/imprimirpdf";    		url =url+"?idcontrol="+registro.get('idcontrol')+"&tipo=" + registro.get('tipo') +    		"&idcontrolenvio=" +registro.get('idcontrolenvio')+"&factura="+registro.get('factura') +     		"&tipoB=xls";			    		showAndHideWindows(url);*/    		     		var url ="./facturaresumen/exportaConsultaExcelFA"; 			url = url + "?idcontrol=" + registro.get('idcontrol') + "&tipo=" + registro.get('tipo') +        		"&idcontrolenvio=" + registro.get('idcontrolenvio') + "&factura=" + registro.get('factura') +        		"&tipoB=xls"; 			// + tipoBusqueda + "&estatus=" + tipobusquedaestatus + "&t_txt_oper=" + iddatoabuscar;      		showAndHideWindows(url);     	}	},    facturar:function(){    	    	var my_scope = this;    	var registro = my_scope.getRowSelected();    	    	var combo_itAuart = Ext.create('Ext.form.ComboBox', {    		fieldLabel: 'Clase de Doc. de ventas',    		width: 170,    		disabled: false,    		editable:false,    		id:'auart',    		store: Ext.create('MyDesktop.store.StoreAuart',{}),    		queryMode: 'local',    		emptyText: 'SELECCIONA DOC',    		displayField: 'auart',    		valueField: 'auart',    		name:'auart'    	});    	    	var combo_itTvkot = Ext.create('Ext.form.ComboBox', {    		fieldLabel: 'Organizacion de ventas',    		width: 170,    		disabled: false,    		editable:false,    		id:'vkorg',    		store: Ext.create('MyDesktop.store.StoreTvkot',{}),    		queryMode: 'local',    		emptyText: 'SELECCIONA ORG. VENT.',    		displayField: 'vkorg',    		valueField: 'vkorg',    		name:'vkorg'    	});    	    	var combo_itVtweg = Ext.create('Ext.form.ComboBox', {    		fieldLabel: 'Canal de distribucion',    		width: 170,    		disabled: false,    		editable:false,    		id:'vtweg',    		store: Ext.create('MyDesktop.store.StoreVtweg',{}),    		queryMode: 'local',    		emptyText: 'SELECCIONA CANAL DISTRIBUCION',    		displayField: 'vtweg',    		valueField: 'vtweg',    		name:'vtweg'    	});    	    	var combo_itWerks = Ext.create('Ext.form.ComboBox', {    		fieldLabel: 'Centro',    		width: 170,    		disabled: false,    		editable:false,    		id:'werks',    		store: Ext.create('MyDesktop.store.StoreWerks',{}),    		queryMode: 'local',    		emptyText: 'SELECCIONA CENTRO',    		displayField: 'werks',    		valueField: 'werks',    		name:'werks'    	});    	    	var combo_itTvstt = Ext.create('Ext.form.ComboBox', {    		fieldLabel: 'Pto.exped./depto.entrada mcía.',    		width: 170,    		disabled: false,    		editable:false,    		id:'vstel',    		store: Ext.create('MyDesktop.store.StoreTvstt',{}),    		queryMode: 'local',    		emptyText: 'SELECCIONA PTO.EXPED./DEPTO.ENTRDA MCIA.',    		displayField: 'vstel',    		valueField: 'vstel',    		name:'vstel'    	});    	    	var combo_cecos = Ext.create('Ext.form.ComboBox', {    		fieldLabel: 'Facturar a',    		width: 170,    		disabled: false,    		editable:false,    		id:'tipoceco'+this.id,    		store: Ext.create('MyDesktop.store.StoreTipoCeco',{}),    		queryMode: 'local',    		emptyText: 'Seleccione Ceco',    		displayField: 'descripcion',    		valueField: 'idtipo',    		name:'prctr'    	});        combo_cecos.setValue("984005");    	    	if (registro==undefined){    		mensajeAlert("Seleccione el registro que desea facturar.");    		return;    	}else{	    		    		 var form = new Ext.form.Panel({     		 	height: 400,     		 	border: false,     	        fieldDefaults: {     	        	 labelAlign: 'top',     	            labelWidth: 80     	        },     	        defaultType: 'myUpperCaseTextArea',     	        bodyPadding: 5,	     	        url:'./facturaresumen/facturar',     	       method:'POST',     	        items: [     	               {xtype : 'hidden', name:"_csrf", value:vt},     	                {     	                	xtype:'hidden',     	                	name:'idcontrol',      	                	value:registro.get('idcontrol')     	                },     	               {     	                	xtype:'hidden',     	                	name:'idcontrolenvio',      	                	value:registro.get('idcontrolenvio')     	                },     	                {     	                	xtype:'hidden',     	                	name:'factura',     	                	value:registro.get('factura')     	                },     	               {     	                	    xtype:'fieldcontainer',     	                	    layout:'fit',     	                	    fieldLabel: 'Configuraciones',     	                	    items:[     	               combo_cecos,     	                	                	               combo_itAuart,     	                	                	               combo_itTvkot,     	                	                	               combo_itVtweg,     	                	                	               combo_itWerks,     	                	                	               combo_itTvstt]     	                	},//      	               combo_itAuart,//      	               combo_itTvkot,//      	               combo_itVtweg,//      	               combo_itWerks,//      	               combo_itTvstt     	                {		     	        			     	        	xtype: 'myUpperCaseTextArea',		     	        	fieldLabel: 'Obs. Niv. Posc.',		     	            name: 't_txt_head',		     	            anchor:'100%',		     	            allowBlank:true,		     	            maxLength:132		     	        },{		     	        	xtype: 'myUpperCaseTextArea',		     	        		     	        	fieldLabel: 'Obs. Generales',		     	            name: 't_txt_oper', 		     	            anchor: '100%',		     	            allowBlank:true,		     	           maxLength:132		     	        }],     	    });	     	 var  win = Ext.widget('window', {	              title: 'CREAR FACTURA',	              closeAction: 'destroy',	              width: 500,	              height: 600,	              layout: 'fit',	              resizable: false,	              modal: true,	              items: form,	              buttons: [	                {	                  text: 'Finalizar',	                  handler: function() {	                      if (form.isValid()) {	                    		 Ext.MessageBox.confirm(titulo_confirmar, "¿Desea generar la FACTURA " +	                     		 		" para este número de control ahora?", function(id, text){	                 			       		if ( (id === 'yes')  || (id === 'si') || (id === 'y' ) ||	                 			       				(id === 's' ) ){ 	                 			       			var ventana = creaVentanaEspera ();	                			       				   	             			       		 form.submit({		   	                                         success: function(form, action) {		   	                                        	 ventana.close();		   	                                        	if (action.result.failure!=undefined){             												mensajeAlert(action.result.failure);             											}else{             												my_scope.reloadInfo();             											}		   	                                            win.close();		   	                                         },		   	                                         failure: function(form, action) {		   	                                        	 ventana.close();		   	                                        	 mensajeAlert(action.result.message);		   	                                             win.close();		   	                                         }		   	                                     });	                 			       			/*var conn = new Ext.data.Connection();	                 							 //Obtiene los datos de fecha inicial y final	                 							 conn.request({	                 									url:'./facturaresumen/facturar',	                 									method:'GET',	                 									params:{	                 											idcontrol:registro.get('idcontrol'),	                 											idcontrolenvio: registro.get('idcontrolenvio')	                 										},	                 									//form:'forma_resumen',	                 									success:function (response, opts){	                 										ventana.close();	                 											var obj = Ext.decode(response.responseText);	                 												                 											if (obj.failure!=undefined){	                 												mensajeAlert(obj.failure);	                 											}else{	                 												my_scope.reloadInfo();	                 											}	                 												                 					                 										},	                 									failure:function (response, opts){	                 										ventana.close();	                 										var obj = Ext.decode(response.responseText);	                 										mensajeAlert("Error ",obj.message);	                 									}	                 											                 								});*/	                 				 	                 			       		}	                 		       	 },this);	                      }	                  }	              }]	          });	     	 win.show();     	}    },        adicionalEspecial:function(idcontrol,estatus){    	if  ( (idcontrol==undefined)  || (idcontrol<=0) ){    		mensajeAlert("Numero de idcontrol[ " + idcontrol + " ] invalido.");    		return;    	}    	var my_scope = this;    	//Abre la ventana de propiedades especiales    	//grid    	    	var grid_facturas = new MyDesktop.grid.GridFacturaAdicionalEspecial({    		idcontrol:idcontrol, layout: 'fit',    		isConsulta:estatus=='A'?false:true		});     	    	var required = '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>';    			var combo_adicionales_especiales= Ext.create('Ext.form.ComboBox', {			fieldLabel: '',			 width: 150,			   name: 'idmaterial',			   fieldLabel: 'Concepto',			disabled: false,						editable:false,			  afterLabelTextTpl: required,			store: Ext.create('MyDesktop.store.StoreFacturaResumen',{				proxy: {		        	type: 'ajax',		        	api: {			            read: './factura/materialespecial/getAdicionalesNoIncluidos?idcontrol='+idcontrol		        	},		        	reader: {		                 type: 'json',		                 successProperty: 'success',		                 root : 'proxiArray',		                 messageProperty: 'message',		                 totalProperty : 'totalCount',		        	},		        	writer: {		            	 type: 'json',		                 writeAllFields: true,		                 encode: false,		                 root: 'proxiArray'		        	}		         }							}) ,			queryMode: 'local',			//emptyText: 'Selecione Adicional',			displayField: 'nombre',			valueField: 'idmaterial'		});		        	    	            	  var   formaDatos=    Ext.create('Ext.form.Panel', {    	            //title: 'Simple Form',    	            bodyPadding: 5,    	            width: 350,    	            layout: 'fit',    	            method:'POST',    	               	            // The form will submit an AJAX request to this URL when submitted    	            url: './factura/materialespecial/insert',    	            // Fields will be arranged vertically, stretched to full width    	            layout: 'anchor',    	            defaults: {    	                anchor: '100%'    	            },    	            // The fields    	            defaultType: 'textfield',    	            items: [    	                    {xtype : 'hidden', name:"_csrf", value:vt},    	                    	{xtype:'hidden', name:'idcontrol', value:idcontrol},	    	                    combo_adicionales_especiales,								{								    xtype:'numberfield',								    afterLabelTextTpl: required,									fieldLabel: 'Cantidad',								    name: 'cantidad',								    value: 1,								    minValue: 1,								    maxValue: 9999,								    allowDecimals: false,								    allowBlank:false								},																{									 xtype:'numberfield',					                fieldLabel: 'Monto',					                afterLabelTextTpl: required,					                name: 'precio',					                minValue: 1,					                maxValue: 99999,					                allowBlank:false,					                decimalPrecision: 2,					                decimalSeparator:'.',					                allowPureDecimal: true,					                // Remove spinner buttons, and arrow key and mouse wheel listeners					                hideTrigger: true,					                keyNavEnabled: false,					                mouseWheelEnabled: false					            }								    	                        	                    ],    	            // Reset and Submit buttons    	            buttons: [/*{    	                text: 'Reset',    	                handler: function() {    	                    this.up('form').getForm().reset();    	                }    	            },*/ {    	                text: 'Agregar',    	                formBind: true, //only enabled once the form is valid    	                disabled: true,    	                hidden:estatus=='A'?false:true,    	                clientValidation: true,						submitEmptyText: false,    	                handler: function() {    	                    var form = this.up('form').getForm();    	                    if (form.isValid()) {    	                        form.submit({    	                            success: function(form, action) {    	                            	    	                               form.reset();    	                               grid_facturas.reLoadInfo();    	                               combo_adicionales_especiales.getStore().reload();    	                            },    	                            failure: function(form, action) {    	                                //Ext.Msg.alert('Failed', action.result.msg);    	                            	 mensajeAlert( action.result.message);    	                            }    	                        });    	                    }    	                }    	            }],    	            renderTo: Ext.getBody()    	        });    	     	    	var  win = Ext.create('widget.window', {             title: 'Adicionales Especiales Factura: ' + idcontrol,             header: {                // titlePosition: 2,                // titleAlign: 'center'             },             closable: true,             //closeAction: 'hide',             width: 950,             minWidth: 350,             height: 500,            // tools: [{type: 'pin'}],             layout: {                 type: 'border',                 padding: 5             },             items: [{                 region: 'west',                 title: 'Adicionales Agregados',                 width: 550,                 split: true,                 layout: 'fit',                 collapsible: true,                 floatable: false,                 items:[grid_facturas]             }, {                 region: 'center',                 width: 400,                 layout: 'fit',                 title: 'Agregar Adicional',                 split: true,                 collapsible: false,                 floatable: false,                 items:[formaDatos ]             }]         });    	    	win.show();    	     	    },        cancelar:function(){    	var my_scope = this;    	var registro = my_scope.getRowSelected();    	if (registro==undefined){    		mensajeAlert("Seleccione el registro que desea cancelar.");    		return;    	}else{	    		if (registro.get('estatus')=='C'){    			mensajeAlert("Registro seleccionado ya fue cancelado, previamente.");        		return;    		}    		 Ext.MessageBox.confirm(titulo_confirmar, "Al cancelar el registro " +    				 " seleccionado se desmarcarán todos los registros " +    				 " asociados él, ¿Desea continuar?", function(id, text){			       		if ( (id === 'yes')  || (id === 'si') || (id === 'y' ) ||			       				(id === 's' ) ){ 			       			var ventana = creaVentanaEspera ();			       			var conn = new Ext.data.Connection();							 //Obtiene los datos de fecha inicial y final							 conn.request({									url:'./facturaresumen/cancelar',									method:'POST',									defaultHeaders:{'_csrf_header':hv,"_csrf":vt },																		params:{										"_csrf":vt,											idcontrol:registro.get('idcontrol'),											idcontrolenvio: registro.get('idcontrolenvio')										},									//form:'forma_resumen',									success:function (response, opts){										ventana.close();											var obj = Ext.decode(response.responseText);																						if (obj.failure!=undefined){												mensajeAlert(obj.failure);											}else{												my_scope.reloadInfo();											}																									},									failure:function (response, opts){										ventana.close();										var obj = Ext.decode(response.responseText);										mensajeAlert("Error ",obj.message);									}																		});				 			       		}		       	 },this);    		     	}    },	getRowsSelected:function(){		return this.getView().getSelectionModel().getSelection();	},        getRowSelected:function(){		var rows =  this.getView().getSelectionModel().getSelection();		if(rows.length >=1){			return rows[0];		}		return undefined;	}});