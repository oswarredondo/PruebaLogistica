Ext.define('MyDesktop.grid.GridMedidasPesoEtiquetas', {    extend: 'Ext.grid.Panel',    requires: [        'Ext.grid.column.Action',        'Ext.grid.plugin.CellEditing',        'Ext.form.field.Text',        'Ext.toolbar.TextItem'    ],    stateful: true,    collapsible: false,    multiSelect: true,    stateId: 'stateGridMedidasPesoEtiquetas',	isConsulta:true,	myScope:undefined,    viewConfig: {        stripeRows: true,        enableTextSelection: true    },	id:undefined,	isConsulta:false,	myScope:undefined,	uuid:undefined,	idregistro:undefined,    initComponent: function () {    	    	var storeTiposEmpaques = Ext.create('MyDesktop.store.StoreTiposEmpaques',{}) ;		this.myScope = this;		//Si el grid no es de consulta entonces muestra la barra para administrar los datos		if (!this.isConsulta){			 this.editing = Ext.create('Ext.grid.plugin.CellEditing',{clicksToEdit: 1});			 this.plugins = this.editing;			}						this.selType= 'checkboxmodel';		var sm = Ext.create('Ext.selection.CheckboxModel',{mode : 'SINGLE'});		this.selModel= sm;				this.store = Ext.create('MyDesktop.store.StoreEtiquetasMedidas',{baseParams:{uuid:this.uuid,			idregistro:this.idregistro}}		);		this.store.getProxy().setExtraParam("uuid", this.uuid);		this.store.getProxy().setExtraParam("idregistro", this.idregistro);				/*var gridMenu = Ext.create('Ext.menu.Menu', {    		    items: [{                                		      text: 'Item 1'             		   },{        		      text: 'Item 2'    		   }]		  });			     this.listeners= {			      beforeitemcontextmenu: function(view, record, item, index, e)			      {			        e.stopEvent();			        gridMenu.showAt(e.getXY());			      },			      afterrender: function() {			            var menu = this.headerCt.getMenu();			            menu.add([			              {			                text: 'Agregar Registro',			                iconCls : 'add32x32',			                handler: function() {			                    var columnDataIndex = menu.activeHeader.dataIndex;			                    alert('custom item for column "'+columnDataIndex+'" was pressed');			                }			            }, {			                text: 'Borrar Registro',			                iconCls : 'deleteRed16x16',			                handler: function() {			                    var columnDataIndex = menu.activeHeader.dataIndex;			                    alert('custom item for column "'+columnDataIndex+'" was pressed');			                }			            }			              			              ]);			      }			            			    };*/        this.columns = [											{						    text: 'Empaque',						    dataIndex: 'tipoempaque',						    sortable : true,						    width: 90,						    renderer: function (value, metaData, record, rowIndex, colIndex, store) {								var myrecord=undefined;								if (storeTiposEmpaques.getCount() > 0) {									storeTiposEmpaques.each(function(r) {										if (r.data['idtipo'] == value) {											myrecord = r;										}									});								}								if (myrecord!=undefined){									return myrecord.get('descripcion');								}								return value;							},						    editor: {						    	  xtype: 'combobox',						            store: Ext.create('MyDesktop.store.StoreTiposEmpaques',{}) ,						            valueField: 'idtipo',						            displayField: 'descripcion',									enforceMaxLength:true,									maxLength:30,						            typeAhead: true,						            queryMode: 'local',						            allowBlank: false,						            emptyText: ''						    }						},						{text     : 'Peso Kg',width: 85,sortable : true,dataIndex: 'pesofisico',							align: 'right',							editor: {								xtype: 'numberfield',								value: 1.0,								maxValue: 9999.99,								allowDecimals:true,								decimalPrecision:2,								decimalSeparator:'.',								thousandSeparator:',',						        required:true,						        minValue: 1.0						       							}									},						{text     : 'Alto',width: 85,sortable : true,dataIndex: 'alto',							align: 'right',							editor: {								xtype: 'numberfield',								value: 1.0,								maxValue: 9999.99,								allowDecimals:true,								decimalPrecision:2,								decimalSeparator:'.',								thousandSeparator:',',						        required:true,						        minValue: 1.0						       							}									},						{text     : 'Ancho',width: 85,sortable : true,dataIndex: 'ancho',							align: 'right',							editor: {								xtype: 'numberfield',								value: 1.0,								maxValue: 9999.99,								allowDecimals:true,								decimalPrecision:2,								decimalSeparator:'.',								thousandSeparator:',',						        required:true,						        minValue: 1.0						       							}									},						{text     : 'Largo',width: 85,sortable : true,dataIndex: 'largo',							align: 'right',							editor: {								xtype: 'numberfield',								value: 1.0,								maxValue: 9999.99,								allowDecimals:true,								decimalPrecision:2,								decimalSeparator:'.',								thousandSeparator:',',						        required:true,						        minValue: 1.0						       							}									},						{text     : 'P. Vol',width: 85,sortable : true,dataIndex: 'volumen',													renderer :function showCalculoVolumen(value, metaData, record, rowIndex, colIndex, store){  								metaData.attr = 'style="white-space:normal"';								var volumen = (record.get('alto') * record.get('largo')*record.get('ancho'))/5000 ;															   return volumen.toFixed(2)+"" ;  							}						}																											];			this.callParent();    },	agregar:function(){		  var rec = new MyDesktop.models.ModeloAdicionales({			  identificador: 0,			  clave:'',			  descripcion: '',			  precio:0.0,			  tipo:'0'	        }), edit = this.editing;	      edit.cancelEdit();	      this.store.insert(0, rec);	        edit.startEditByPosition({	            row: 0,	            column: 1	      });	        	},	modificar:function(){		var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		Ext.Msg.alert('Verificar',"Debe de Seleccionar solo un registro para modificar");     		return;     	}		if(rows.length >1){     		Ext.Msg.alert('Verificar',"Seleccione solamente un registro a modificar");     		return;     	}			},			eliminar:function(){		var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		 Ext.Msg.alert('Verificar',"Seleccione los registros que desea eliminar");     		return;     	}		    	 Ext.MessageBox.confirm('Confirmacion', '¿Desea borrar los registros seleccionados?', function(id, text){       		if ( (id === 'yes')  || (id === 'si') || (id === 'y' ) || (id === 's' ) ){        			if(rows.length === 0){  //step 3       				return ;       			}       			this.getView().getStore().remove(rows);  //step 4       			this.commitInfo();       		}       	 },this);     	 				},	showDetails:function(){			var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		Ext.Msg.alert('Verificar',"Debe de Seleccionar solo un registro para visualizar");     		return;     	}		if(rows.length >1){     		Ext.Msg.alert('Verificar',"Seleccione solamente un registro a visualizar");     		return;     	}		},	loadInfo:function(){		this.getView().getStore().load();		},	commitInfo:function(){		this.getView().getStore().save( );		this.getView().getStore().commitChanges();		},	saveInfo:function(){		this.getView().getStore().save( );		this.getView().getStore().commitChanges();		this.loadInfo();		},	getRowsSelected:function(){		return this.getView().getSelectionModel().getSelection();	}	});