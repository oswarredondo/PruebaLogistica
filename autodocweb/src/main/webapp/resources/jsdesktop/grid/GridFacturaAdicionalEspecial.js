Ext.define('MyDesktop.grid.GridFacturaAdicionalEspecial', {    extend: 'Ext.grid.Panel',    requires: [        'Ext.grid.column.Action',        'Ext.grid.plugin.CellEditing',        'Ext.form.field.Text',        'Ext.toolbar.TextItem'    ],    stateful: true,    collapsible: false,    multiSelect: true,    stateId: 'stateGridAdicional',    viewConfig: {        stripeRows: true,        enableTextSelection: true    },	id:undefined,	isConsulta:false,	uuid:undefined,	idcontrol:undefined,    initComponent: function () {    	this.store = Ext.create('MyDesktop.store.StoreFacturaAdicionalEspecial',    			{baseParams:{idcontrol:this.idcontrol}    	});    			this.store.getProxy().setExtraParam("idcontrol", this.idcontrol);		var my_scope=this;		this.selType= 'checkboxmodel';        this.columns = [                    	{							menuDisabled: true,	sortable: false,							xtype: 'actioncolumn',	width: 20,							hidden:!my_scope.isConsulta, 							items: [								{									getClass: function(v, meta, rec) {										return 'garbage32x32';									},									getTip: function(v, meta, rec) {										return 'Eliminar Adicionales Especiales';									},									handler: function(grid, rowIndex, colIndex) {										if (!my_scope.isConsulta){											 var rec = grid.getStore().getAt(rowIndex);												my_scope.eliminar(rec);										}																		}								}							]						},						{text     : 'Concepto',width: 250,sortable : true,dataIndex: 'nombre'},						{text     : 'Cantidad',width: 90,sortable : true,dataIndex: 'cantidad'},						{text     : 'Precio',width: 90,sortable : true,dataIndex: 'precio'}									];			this.callParent();    },	agregar:function(){			        	},	modificar:function(){		var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		Ext.Msg.alert('Verificar',"Debe de Seleccionar solo un registro para modificar");     		return;     	}		if(rows.length >1){     		Ext.Msg.alert('Verificar',"Seleccione solamente un registro a modificar");     		return;     	}			},			eliminar:function(registro){     	if(registro==undefined){     		mensajeAlert("Seleccione el registro que desea eliminar");     		return;     	}     	var myscope = this;    	 Ext.MessageBox.confirm('Confirmacion', '¿Desea borrar el registro seleccionado?', function(id, text){       		if ( (id === 'yes')  || (id === 'si') || (id === 'y' ) || (id === 's' ) ){        			var ventana = creaVentanaEspera ();       			var conn = new Ext.data.Connection();				 //Obtiene los datos de fecha inicial y final				 conn.request({						url:'./factura/materialespecial/delete',						method:'POST',						defaultHeaders:{'_csrf_header':hv,"_csrf":vt },						params:{								idcontrol:	registro.get('idcontrol'),								idmaterial: registro.get('idmaterial'),								idregistro: registro.get('idregistro'),								"_csrf":vt							},						//form:'forma_resumen',						success:function (response, opts){							ventana.close();								var obj = Ext.decode(response.responseText);								myscope.reLoadInfo();								if (obj.failure!=undefined){									mensajeAlert(obj.failure);								}else{									my_scope.reloadInfo();								}																},						failure:function (response, opts){							ventana.close();							var obj = Ext.decode(response.responseText);							mensajeAlert("Error ",obj.message);						}												});       			       			       		}       	 },this);     	 				},	showDetails:function(){			var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		Ext.Msg.alert('Verificar',"Debe de Seleccionar solo un registro para visualizar");     		return;     	}		if(rows.length >1){     		Ext.Msg.alert('Verificar',"Seleccione solamente un registro a visualizar");     		return;     	}		},	loadInfo:function(){		this.getView().getStore().load();		},	reLoadInfo:function(){		this.getView().getStore().reload();		},	commitInfo:function(){		this.getView().getStore().save( );		this.getView().getStore().commitChanges();		},	saveInfo:function(){		this.getView().getStore().save( );		this.getView().getStore().commitChanges();		this.loadInfo();		},	getRowsSelected:function(){		return this.getView().getSelectionModel().getSelection();	},});