Ext.define('MyDesktop.grid.GridPaquetesDimensiones', {    extend: 'Ext.grid.Panel',    requires: [        'Ext.grid.column.Action',        'Ext.grid.plugin.CellEditing',        'Ext.form.field.Text',        'Ext.toolbar.TextItem'    ],    stateful: true,    collapsible: false,    multiSelect: true,    stateId: 'stateGridAdicional',    viewConfig: {        stripeRows: true,        enableTextSelection: true    },	id:undefined,	isConsulta:false,	myScope:undefined,    initComponent: function () {    	    	var store_sino = Ext.create('MyDesktop.store.StoreSINO',{}) ;		this.myScope = this;		 this.editing = Ext.create('Ext.grid.plugin.CellEditing',{clicksToEdit: 1});		 this.plugins = this.editing;		 		 this.tbar=[					{ text: 'Agregar',iconCls: 'agregar',handler:this.agregar, scope:this.myScope },					{xtype: 'tbfill'},					{ text: 'Borrar',iconCls: 'borrar',handler:this.eliminar,scope:this.myScope }							];				this.store = Ext.create('MyDesktop.store.StorePaqueteDimensiones',{});		this.selType= 'checkboxmodel';        this.columns = [						{text     : 'Cant.',width: 60,sortable : true,dataIndex: 'cantidad',							align: 'right',							editor: {								xtype: 'numberfield',								value: 1,								maxValue: 50,								allowDecimals:true,								decimalPrecision:0,								decimalSeparator:'.',								thousandSeparator:',',						        required:true,						        minValue: 1						       							}									},						{						    text: 'Empaque',						    dataIndex: 'tipoempaque',						    sortable : true,						    width: 90,						    renderer: function (value, metaData, record, rowIndex, colIndex, store) {								var myrecord=undefined;								/*if (store_sino.getCount() > 0) {									store_sino.each(function(r) {										if (r.data['identificador'] == value) {											myrecord = r;										}									});								}								if (myrecord!=undefined){									return myrecord.get('descripcion');								}*/								return value;							},						    editor: {						    	  xtype: 'combobox',						            name: 'tipoempaque',						            store: Ext.create('MyDesktop.store.StoreTiposEmpaques',{}) ,						            valueField: 'identificador',						            displayField: 'descripcion',									enforceMaxLength:true,									maxLength:30,						            typeAhead: true,						            queryMode: 'local',						            allowBlank: false,						            emptyText: ''						    }						},						{text     : 'PesoFis.',width: 70,sortable : true,dataIndex: 'pesofisico',							align: 'right',							editor: {								xtype: 'numberfield',								value: 1.0,								maxValue: 9999.99,								allowDecimals:true,								decimalPrecision:2,								decimalSeparator:'.',								thousandSeparator:',',						        required:true,						        minValue: 0.5						       							}									},						{text     : 'Alto',width: 55,sortable : true,dataIndex: 'alto',							align: 'right',							editor: {								xtype: 'numberfield',								value: 0.0,								maxValue: 9999.99,								allowDecimals:true,								decimalPrecision:2,								decimalSeparator:'.',								thousandSeparator:',',						        required:true,						        minValue: 0.0						       							}									},						{text     : 'Ancho',width: 60,sortable : true,dataIndex: 'ancho',							align: 'right',							editor: {								xtype: 'numberfield',								value: 0.0,								maxValue: 9999.99,								allowDecimals:true,								decimalPrecision:2,								decimalSeparator:'.',								thousandSeparator:',',						        required:true,						        minValue: 0.0						       							}									},						{text     : 'Largo',width: 60,sortable : true,dataIndex: 'largo',							align: 'right',							editor: {								xtype: 'numberfield',								value: 0.0,								maxValue: 9999.99,								allowDecimals:true,								decimalPrecision:2,								decimalSeparator:'.',								thousandSeparator:',',						        required:true,						        minValue: .0						       							}									},						{text     : 'Volumen',width: 60,sortable : true,dataIndex: 'volumen',							align: 'right'},												{				            text: 'Seg. Opc.',				            dataIndex: 'isseguroopcional',				            sortable : true,				            width: 90,				            renderer: function (value, metaData, record, rowIndex, colIndex, store) {								var myrecord=undefined;								if (store_sino.getCount() > 0) {									store_sino.each(function(r) {										if (r.data['identificador'] == value) {											myrecord = r;										}									});								}								if (myrecord!=undefined){									return myrecord.get('descripcion');								}								return value;							},				            editor: {				            	  xtype: 'combobox',					                name: 'isseguroopcional',					                store: Ext.create('MyDesktop.store.StoreSINO',{}) ,					                valueField: 'identificador',					                displayField: 'descripcion',									enforceMaxLength:true,									maxLength:30,					                typeAhead: true,					                queryMode: 'local',					                allowBlank: false,					                emptyText: ''				            }						},						{text     : 'Contenido',width: 190,sortable : true,dataIndex: 'contenido',							field: {								xtype: 'myUpperCaseTextField',			                    maxLength:30,			                    minLength:1,			                    required:true,			                    enforceMaxLength:true			                    			                    							}							},												{text     : 'Valor Decl.',width: 70,sortable : true,dataIndex: 'valordeclarado',							align: 'right',renderer: 'usMoney',							editor: {								xtype: 'numberfield',								value: 0.0,								maxValue: 99999.99,								allowDecimals:true,								decimalPrecision:2,								decimalSeparator:'.',								thousandSeparator:',',						        required:true,						        minValue: 0.0						       							}									},						{text     : 'Factura',width: 100,sortable : true,dataIndex: 'factura',							align: 'right',							field: {								xtype: 'myUpperCaseTextField',			                    maxLength:30,			                    minLength:1,			                    required:true,			                    enforceMaxLength:true			                    			                    							}							}																											];			this.callParent();    },	agregar:function(){		  var rec = new MyDesktop.models.ModeloPaquete({			  alto: 0,			  ancho: 0,			  largo: 0,			  pesofisico:1,			  cantidad:1,			  valordeclarado: 0,			  tipoempaque:'SOBRE',			  volumen:0,			  isseguroopcional:'0',			  contenido: '',			  factura:''	        }), edit = this.editing;	      edit.cancelEdit();	      this.store.insert(0, rec);	        edit.startEditByPosition({	            row: 0,	            column: 1	      });	        	},	modificar:function(){		var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		Ext.Msg.alert('Verificar',"Debe de Seleccionar solo un registro para modificar");     		return;     	}		if(rows.length >1){     		Ext.Msg.alert('Verificar',"Seleccione solamente un registro a modificar");     		return;     	}			},			eliminar:function(){		var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		 Ext.Msg.alert('Verificar',"Seleccione los registros que desea eliminar");     		return;     	}		    	 Ext.MessageBox.confirm('Confirmacion', '¿Desea borrar los registros seleccionados?', function(id, text){       		if ( (id === 'yes')  || (id === 'si') || (id === 'y' ) || (id === 's' ) ){        			if(rows.length === 0){  //step 3       				return ;       			}       			this.getView().getStore().remove(rows);  //step 4       			this.commitInfo();       		}       	 },this);     	 				},	showDetails:function(){			var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		Ext.Msg.alert('Verificar',"Debe de Seleccionar solo un registro para visualizar");     		return;     	}		if(rows.length >1){     		Ext.Msg.alert('Verificar',"Seleccione solamente un registro a visualizar");     		return;     	}		},	loadInfo:function(){		this.getView().getStore().load();		},	commitInfo:function(){		this.getView().getStore().save( );		this.getView().getStore().commitChanges();		},	saveInfo:function(){		this.getView().getStore().save( );		this.getView().getStore().commitChanges();		this.loadInfo();		},	getRowsSelected:function(){		return this.getView().getSelectionModel().getSelection();	}	});