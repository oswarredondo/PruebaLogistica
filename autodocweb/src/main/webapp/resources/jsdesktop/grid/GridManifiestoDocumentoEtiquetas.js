Ext.define('MyDesktop.grid.GridManifiestoDocumentoEtiquetas', {    extend: 'Ext.grid.Panel',    requires: [        'Ext.grid.column.Action',        'Ext.grid.plugin.CellEditing',        'Ext.form.field.Text',        'Ext.toolbar.TextItem'    ],    stateful: true,    collapsible: false,    multiSelect: true,    stateId: 'stateGridManifiestoDocumentoEtiquetas',    viewConfig: {        stripeRows: true,        enableTextSelection: true    },	id:undefined,	isConsulta:false,	myScope:undefined,    initComponent: function () {    	    	var ismenuDesabled=true;		this.myScope = this;		var my_scope = this;		this.store = Ext.create('MyDesktop.store.StoreDocumento',{			  model: 'MyDesktop.models.ModeloDocumento',			proxy: {		        type: 'ajax',		        api: {		            read: './manifiestoetiquetas/consultaRegistrosEtiquetasCarga'		        },		        reader: {		                 type: 'json',		                 successProperty: 'success',		                 root : 'proxiArray',		                 messageProperty: 'message',		                 totalProperty : 'totalCount',		        }			}					});		this.selType= 'checkboxmodel';		 this.editing = Ext.create('Ext.grid.plugin.CellEditing',{clicksToEdit: 1});		 this.plugins = this.editing;		 		var sm = Ext.create('Ext.selection.CheckboxModel',{mode : 'MULTI'});		this.selModel= sm;		this.loadMask=true;		        this.columns = [                    {header   : 'Pos', width    : 100, sortable : true, hidden:false, dataIndex: 'pos_manif',menuDisabled: true,                    	editor: {    						xtype: 'numberfield',    						value: 0,    						maxValue: 32000,    						allowDecimals:false,    						decimalPrecision:0,    						decimalSeparator:'.',    						thousandSeparator:',',    				        required:true,    				        minValue:0    				           					}		                    },            			{header   : 'UNI RPT', width    : 80, sortable : false, hidden:false, dataIndex: 'unidadreparto',           						menuDisabled: true,           			           						field: {    								xtype: 'myUpperCaseTextField',    			                    maxLength:10,    			                    minLength:1,    			                    required:true,    			                    enforceMaxLength:true    			                        			                        							}	           			           			},	                                         {id :'idDocumento', header   : 'Etiqueta', tooltip:'Etiqueta', width: 190, sortable : true, hidden:false,            								dataIndex: 'idDocumento' ,menuDisabled: ismenuDesabled  },                    {header   : 'Remitente', tooltip:'Remitente',width    : 250, sortable : true,            									hidden:false,dataIndex: 'remitente.razonSocial',menuDisabled: ismenuDesabled ,           									renderer:my_scope.formatoCeldaRemitente},                    { header   : 'Destino', tooltip:'Destino',width    : 250, sortable : true, hidden:false,           										dataIndex: 'destinatario.razonSocial',menuDisabled: ismenuDesabled,           										renderer:my_scope.formatoCeldaDestino},                    {id :'numpiezas', header   : 'Cant.',tooltip:'Cant.', width    : 80, sortable : true, hidden:false,           											dataIndex: 'numPiezas',menuDisabled: ismenuDesabled },                    {id :'pesobruto', header   : 'Peso', tooltip:'Peso',width    : 85, sortable : true, hidden:false,           												dataIndex: 'pesoBruto',menuDisabled: ismenuDesabled},                    {id :'contenidoDeclarado', header   : 'Contenido', tooltip:'Val. Decl.',width    : 150, sortable : true,            													hidden:false,dataIndex: 'contenidoDeclarado',menuDisabled: ismenuDesabled },                    {id :'referencia', header   : 'Referencia', tooltip:'Referencia',width    : 100, sortable : true,           														hidden:false,dataIndex: 'referencia',menuDisabled: ismenuDesabled },           			{id :'manifiesto', header   : 'manifiesto', tooltip:'manifiesto',width    : 100, sortable : true,               														hidden:false,dataIndex: 'manifiesto' }											           																													];                combo_usuarios= Ext.create('Ext.form.ComboBox', {			fieldLabel: '',			 width: 190,			disabled: false,			editable:false,			id:'idlogin',			store: Ext.create('MyDesktop.store.StoreUsuario',{				autoLoad: true,			  				proxy: {			        type: 'ajax',			        api: {			            read: './catalogo/usuario/getUsuariosDisponiblesAgrupamiento'			        },			        reader: {			                 type: 'json',			                 successProperty: 'success',			                 root : 'proxiArray',			                 messageProperty: 'message',			                 totalProperty : 'totalCount',			        }				}							}) ,			queryMode: 'local',			emptyText: 'Seleccione login',			displayField: 'nombre',			valueField: 'login'		});                                        //combo_usuarios.setValue("1");        	this.tbar=  [	                {xtype: 'label', text:'Usuario:'},	                combo_usuarios,							//{  xtype: 'textfield',      id:'idlogin',  maxLength:30, allowBlank:false,width:90},							//{	 iconCls:'usuarios_blue',handler:this.winCatalogoUsuario, tooltip:'Seleccion usuario' },							{xtype:'tbseparator'},							{xtype: 'label', text:'Solo registros sin manifestar'},				            {xtype: 'checkbox',id:'idchkSinManifiestar', checked:true},				        	{xtype:'tbspacer'},				            {xtype: 'label', text:'Fecha:'},				            {xtype: 'datefield',id:'idfechaInicial',  allowBlank:false,width:130}, 				            {xtype:'tbspacer'},				            {xtype: 'label', text:' al '},				            {xtype:'tbspacer'},				            {xtype: 'datefield',id:'idfechaFinal',  allowBlank:false,width:130},				            {xtype: 'checkbox',id:'mostrartransportistas', checked:false,boxLabel: 'Mostrar Transportistas'},								{tooltip: "Busca los documentos en la fecha y del usuario indicado",iconCls:'buscar_blue', 				            	handler:this.consultaRegistros,scope:this  },				            {xtype: 'tbfill'},				            {text: "Genera Manifiesto",iconCls:'print_orange', handler:this.generaManifiesto,scope:this }			                 		      ];        	this.bbar = [        	            			             {xtype: 'label', text:'Manifiesto:'},			             {  xtype: 'textfield',      id:'idmanifiesto', maxLength:30, allowBlank:true,width:150},			             {text: "Reimprimir",iconCls:'print_orange', handler:this.generaReimpresionManifiesto,scope:this }			       ];	     			this.callParent();    },    winCatalogoUsuario:function(){    	var grid_frecuencia = new MyDesktop.grid.GridCatalogoUsuarios({    		frame:false, border:false,idRotulacion:'',isConsulta:false,    		layout:'fit'		}); 	    			var datos_window = new Ext.Window({			width    : 350,			height   : 300,			title	: 'Usuarios disponibles',			closable:true,			layout:'fit',			iconCls:'usuarios_blue',			resizable:false,			modal:true,			items: [grid_frecuencia	],			headerPosition: 'right'		}); 		datos_window.show();    },    consultaRegistros:function(){    	var myscope= this;		if (!isValidValueCampoRaw('idfechaInicial', 'Indique la fecha inicial')){;			return;		}		if (!isValidValueCampoRaw('idfechaFinal', 'Indique la fecha final')){;			return;		}		var sinManifiestar = Ext.getCmp('idchkSinManifiestar').getValue();				var datosFecha =  Ext.getCmp('idfechaInicial').getRawValue().split('T');				fechaini=datosFecha[0];		datosFecha =  Ext.getCmp('idfechaFinal').getRawValue().split('T');		fechafin=datosFecha[0];				myscope.getView().getStore().reload(				{					params:{dispatch: 'consultaCartaPorte',						fechaini:fechaini,						fechafin:fechafin, 						login:Ext.getCmp('idlogin').getValue(), 						fechafin:fechafin,						sinManifiestar: sinManifiestar						},					callback:function(r,options,success){						 if (r.length<=0){							 mensajeWarning('No existe información con el criterio de busqueda selecionado.');  													 }					 }	  				});				    	    },    muestraTransportistas:function(myscope_main){    		    var grid_frecuencia = new MyDesktop.grid.GridCatalogoTransportista({			frame:false, border:false,isConsulta:false,			layout:'fit'		}); 					var datos_window = new Ext.Window({			width    : 350,			height   : 300,			title	: 'Transportista',			closable:true,			layout:'fit',			iconCls:'truck_blue',			resizable:false,			modal:true,			items: [grid_frecuencia	],			headerPosition: 'right',			buttons:[			      {text:'Seleccionar', iconCls:'truck_blue', handler:function(){			    	  var transportista='';			    	  var rows = grid_frecuencia.getRowsSelected();			    	  if (rows.length<=0){	    					//if (!confirm("No se ha seleccionado transportista desea continuar?")){	    					//	return;	    					//}	    			  }else{	    					transportista = rows[0].get("identificador").trim(); 	    			  }			    	  			    	  myscope_main.configuraManifiesto(myscope_main,transportista);				         }			      }			         			]						}); 		datos_window.show();    },    configuraManifiesto:function(myscope_main,transportista){    	var login=Ext.getCmp('idlogin').getValue();		var datosFecha =  Ext.getCmp('idfechaInicial').getRawValue().split('T');				fechaini=datosFecha[0];		datosFecha =  Ext.getCmp('idfechaFinal').getRawValue().split('T');		fechafin=datosFecha[0];		//Obtiene todos los registros		var guias='';		var rows = myscope_main.getView().getSelectionModel().getSelection(); 		if(rows.length<=0){			alert("Seleccione los registros que desea manifestar.");			return ;		}	   		for(i=0;i<rows.length;i++){						//Verifica si el registro no ha sido manifestado			if ((rows[i].get('manifiesto') == undefined) || (rows[i].get('manifiesto') == '')){				var posicion_num = parseInt(rows[i].get('pos_manif'));				var unirep = rows[i].get('unidadreparto') == undefined?'':rows[i].get('unidadreparto');				//if ((posicion_num>0) || (record[i].get('unidadreparto') != '')){					guias+= rows[i].get('idDocumento')+','+rows[i].get('pos_manif')+','+rows[i].get('unidadreparto')+ "|";				//}			}					}				if (guias==''){			mensajeAlert("No existen guías a Manifiestar, verifique que no se hayan manifiestado previamente.");			return;		}				//Asigna los envios a la ruta de recoleccion		var url='./manifiestoetiquetas/applyAsignaAManifiestoEntregaTransportista?tipodocumento=ETIQU&etimanif=true&login='+Ext.getCmp('idlogin').getValue()+		'&fechaini='+fechaini+'&fechafin='+fechafin+'&enrutamiento='+transportista+ "&guias="+guias;				visorPDF(				'utils-win-vistaprevia-pdf_file_envio'+ rows[0].get('idDocumento'),				"Visor Manifiesto Envios" ,	url);    },    generaManifiesto:function(){    	var myscope_main = this;    	var login = Ext.getCmp('idlogin').getValue().trim();		if ((login.length>0) && (login!='')){			if (!isValidValueCampo('idlogin', 'Identificador de usuario incorrecto')){				return ;			}		}  							if (!isValidValueCampoRaw('idfechaInicial', 'Indique la fecha inicial')){				return;		}		if (!isValidValueCampoRaw('idfechaFinal', 'Indique la fecha final')){				return;		}				var rows =  this.getView().getSelectionModel().getSelection();     	if(rows.length <=0){     		 mensajeAlert("Seleccione los registros que desea eliminar");     		return;     	}     						var mensaje = 'Desea generar manifiesto con el identificador de usuario ' + Ext.getCmp('idlogin').getValue() + 		' y en rango de fechas '+fechaini + '-' + fechafin +		' los registros seran marcados y no podran ser modificados ' +		', desea continuar ?';		var mostrartransportistas = Ext.getCmp('mostrartransportistas').getValue();   	 	Ext.MessageBox.confirm('Confirmación',mensaje, function(id, text){      		if ( (id === 'yes')  || (id === 'si') || (id === 'y' ) || (id === 's' ) ){       			      			if (mostrartransportistas){      				myscope_main.muestraTransportistas(myscope_main);      			}else{      				myscope_main.configuraManifiesto(myscope_main,"");      			}      		}      	 },myscope_main);    },    generaReimpresionManifiesto:function(){    	    	if (!isValidValueCampo('idmanifiesto', 'Indique manifiesto a reimprimir')){			return ;		}				var url='./manifiestoetiquetas/reimprimeManifiesto&manifiesto='+Ext.getCmp('idmanifiesto').getValue();		showPDFDocument(url);    	    },	formatoCeldaDestino : function(value, metaData, record,			rowIndex, colIndex, store) {				return  record.data.destinatario.razonSocial;	},	 formatoCeldaRemitente:function(value, metaData, record, rowIndex, colIndex, store){	    	return  record.data.remitente.razonSocial;	    },		getRowsSelected : function() {		return this.getView().getSelectionModel()				.getSelection();	}	});