package com.innovargia.salesmanager.ups.bo.impl;

import java.io.FileOutputStream;
import java.util.List;

import javax.xml.ws.BindingProvider;

import org.apache.commons.codec.binary.Base64;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.administracion.idao.IParamsSistemaDAO;
import com.innovargia.rotulacion.dtos.EtiquetaRotulacionDTO;
import com.innovargia.salesmanager.ups.ibo.IShipBO;
import com.servicio.constantes.ConstantesGenerales;
import com.ups.wsdl.xoltws.ship.v1.ShipPortType;
import com.ups.wsdl.xoltws.ship.v1.ShipService;
import com.ups.wsdl.xoltws.ship.v1.ShipmentErrorMessage;
import com.ups.xmlschema.xoltws.common.v1.RequestType;
import com.ups.xmlschema.xoltws.common.v1.TransactionReferenceType;
import com.ups.xmlschema.xoltws.error.v1.Errors;
import com.ups.xmlschema.xoltws.ship.v1.BillShipperType;
import com.ups.xmlschema.xoltws.ship.v1.DimensionsType;
import com.ups.xmlschema.xoltws.ship.v1.LabelImageFormatType;
import com.ups.xmlschema.xoltws.ship.v1.LabelSpecificationType;
import com.ups.xmlschema.xoltws.ship.v1.PackageType;
import com.ups.xmlschema.xoltws.ship.v1.PackageWeightType;
import com.ups.xmlschema.xoltws.ship.v1.PackagingType;
import com.ups.xmlschema.xoltws.ship.v1.PaymentInfoType;
import com.ups.xmlschema.xoltws.ship.v1.ServiceType;
import com.ups.xmlschema.xoltws.ship.v1.ShipAddressType;
import com.ups.xmlschema.xoltws.ship.v1.ShipFromType;
import com.ups.xmlschema.xoltws.ship.v1.ShipPhoneType;
import com.ups.xmlschema.xoltws.ship.v1.ShipToAddressType;
import com.ups.xmlschema.xoltws.ship.v1.ShipToType;
import com.ups.xmlschema.xoltws.ship.v1.ShipUnitOfMeasurementType;
import com.ups.xmlschema.xoltws.ship.v1.ShipmentChargeType;
import com.ups.xmlschema.xoltws.ship.v1.ShipmentRequest;
import com.ups.xmlschema.xoltws.ship.v1.ShipmentResponse;
import com.ups.xmlschema.xoltws.ship.v1.ShipmentType;
import com.ups.xmlschema.xoltws.ship.v1.ShipperType;
import com.ups.xmlschema.xoltws.upss.v1.UPSSecurity;
import com.ups.xmlschema.xoltws.upss.v1.UPSSecurity.ServiceAccessToken;
import com.ups.xmlschema.xoltws.upss.v1.UPSSecurity.UsernameToken;

@Service
public class CopyOfShipBO implements IShipBO {

    private static final Logger logger = LoggerFactory.getLogger(RateBO.class);

    @Autowired
    IParamsSistemaDAO iParamsSistemaDAO;

    public CopyOfShipBO() {
	// TODO Auto-generated constructor stub
    }

    /*
     * (non-Javadoc)
     * 
     * @see com.innovargia.salesmanager.ups.bo.impl.IShipBO#ship(com.innovargia.
     * rotulacion.dtos.EtiquetaRotulacionDTO)
     */
    @Override
    public String ship(EtiquetaRotulacionDTO etiqueta) throws Exception {
	String guia_internacional = null;
	String statusCode = null;
	String description = null;
	try {

	    String ENDPOINT_URL = iParamsSistemaDAO.getValorPropiedad(
		    "ups.endpoint.tarifas", ConstantesGenerales.ID_SKY4SOL);

	    String LICENSE_NUMBER = iParamsSistemaDAO.getValorPropiedad(
		    "ups.license.number", ConstantesGenerales.ID_SKY4SOL);

	    String PASSWORD = iParamsSistemaDAO.getValorPropiedad(
		    "ups.password", ConstantesGenerales.ID_SKY4SOL);

	    String USER_NAME = iParamsSistemaDAO.getValorPropiedad(
		    "ups.usuario", ConstantesGenerales.ID_SKY4SOL);

	    String SHIPPER_NUMBER = iParamsSistemaDAO.getValorPropiedad(
		    "ups.shipper.number", ConstantesGenerales.ID_SKY4SOL);

	    String SHIPPER_NAME = iParamsSistemaDAO.getValorPropiedad(
		    "ups.shipper.name", ConstantesGenerales.ID_SKY4SOL);

	    String PATH_GIF_UPS = iParamsSistemaDAO.getValorPropiedad(
		    "ups.path.label.ship", ConstantesGenerales.ID_SKY4SOL);

	    if ((PATH_GIF_UPS == null) || (PATH_GIF_UPS.trim().length() <= 0)) {
		PATH_GIF_UPS = "/opt/";
	    }

	    String VALIDATE_ADDRESS = iParamsSistemaDAO.getValorPropiedad(
		    "ups.validate.address", ConstantesGenerales.ID_SKY4SOL);

	    if ((VALIDATE_ADDRESS == null)
		    || (VALIDATE_ADDRESS.trim().length() <= 0)) {
		VALIDATE_ADDRESS = "nonvalidate";
	    }

	    logger.debug("VALIDATE_ADDRESS[nonvalidate|validate]:"
		    + VALIDATE_ADDRESS);

	    ShipService shipService = new ShipService();
	    ShipPortType shipPort = shipService.getShipPort();
	    BindingProvider bp = (BindingProvider) shipPort;
	    bp.getRequestContext().put(
		    BindingProvider.ENDPOINT_ADDRESS_PROPERTY, ENDPOINT_URL);
	    ShipmentRequest shipRequest = new ShipmentRequest();

	    RequestType requestType = new RequestType();
	    TransactionReferenceType transactionReference = new TransactionReferenceType();
	    transactionReference.setCustomerContext("ENVIA UPS Client");
	    requestType.setTransactionReference(transactionReference);
	    List<String> requestOption = requestType.getRequestOption();
	    requestOption.add(VALIDATE_ADDRESS);
	    shipRequest.setRequest(requestType);

	    ShipmentType shpmnt = new ShipmentType();

	    /** *******Shipper******************** */

	    ShipperType shipper = new ShipperType();
	    shipper.setShipperNumber(SHIPPER_NUMBER);
	    shipper.setName(etiqueta.getRazonsocial_rem());
	    shipper.setAttentionName(etiqueta.getContacto_rem());

	    ShipPhoneType shipperPhone = new ShipPhoneType();
	    shipperPhone.setNumber(etiqueta.getTelefono_rem());
	    // shipperPhone.setExtension("1");
	    shipper.setPhone(shipperPhone);
	    ShipAddressType shipperAddress = new ShipAddressType();
	    List<String> addressLineList = shipperAddress.getAddressLine();
	    addressLineList.add(etiqueta.getCalle_rem());
	    addressLineList.add(etiqueta.getColonia_rem());
	    addressLineList.add(etiqueta.getMunicipio_rem());
	    shipperAddress.setCity(etiqueta.getCiudad_rem());
	    shipperAddress.setPostalCode(etiqueta.getCp_rem());
	    shipperAddress.setStateProvinceCode("");
	    shipperAddress.setCountryCode(etiqueta.getPais_rem());

	    /*
	     * ShipperType shipper = new ShipperType();
	     * shipper.setName("AUTOBUSES ESTRELLA BLANCA SA DE CV ");
	     * shipper.setAttentionName("CARLOS DOMINGUEZ");
	     * //shipper.setTaxIdentificationNumber("123456");
	     * 
	     * ShipPhoneType shipperPhone = new ShipPhoneType();
	     * shipperPhone.setNumber("57295131");
	     * //shipperPhone.setExtension("1"); shipper.setPhone(shipperPhone);
	     * 
	     * shipper.setShipperNumber(SHIPPER_NUMBER);
	     * //shipper.setFaxNumber("8002222222");
	     * 
	     * ShipAddressType shipperAddress = new ShipAddressType();
	     * List<String> addressLineList = shipperAddress.getAddressLine();
	     * addressLineList.add("PONIENTE 140 NO 859");
	     * addressLineList.add("IND VALLEJO");
	     * addressLineList.add("AZCAPOTZALCO");
	     * 
	     * shipperAddress.setCity("MEXICO CITY");
	     * shipperAddress.setPostalCode("02300");
	     * shipperAddress.setStateProvinceCode("DF");
	     * shipperAddress.setCountryCode("MX");
	     * shipper.setAddress(shipperAddress);
	     */

	    shpmnt.setShipper(shipper);
	    /** ******Shipper********************* */

	    /** ************ShipTo****************** */
	    ShipToType shipTo = new ShipToType();
	    shipTo.setName(etiqueta.getRazonsocial_des());
	    shipTo.setAttentionName(etiqueta.getContacto_des());

	    ShipPhoneType shipToPhone = new ShipPhoneType();
	    shipToPhone.setNumber(etiqueta.getTelefono_des());
	    shipTo.setPhone(shipToPhone);

	    ShipToAddressType shipToAddress = new ShipToAddressType();
	    List<String> ShipToAddressLineList = shipToAddress.getAddressLine();
	    ShipToAddressLineList.add(etiqueta.getCalle_des());
	    shipToAddress.setCity(etiqueta.getMunicipio_des());
	    shipToAddress.setStateProvinceCode("");
	    shipToAddress.setPostalCode(etiqueta.getCp_des());
	    shipToAddress.setCountryCode(etiqueta.getPais_des());
	    shipTo.setAddress(shipToAddress);
	    shpmnt.setShipTo(shipTo);
	    /** ***********ShipTo********************* */

	    /** ************ShipFrom****************** */
	    /*
	     * ShipFromType shipFrom = new ShipFromType();
	     * shipFrom.setName("ABC Associates");
	     * shipFrom.setAttentionName("Mr.ABC"); ShipAddressType
	     * shipFromAddress = new ShipAddressType(); List<String>
	     * addressLineList_shipFrom = shipFromAddress .getAddressLine();
	     * addressLineList_shipFrom.add("ANTONIO J TIRADO 2");
	     * shipFromAddress.setCity("MEXICO CITY");
	     * shipFromAddress.setPostalCode("09230");
	     * shipFromAddress.setStateProvinceCode("DF");
	     * shipFromAddress.setCountryCode("MX");
	     * shipFrom.setAddress(shipFromAddress);
	     * shpmnt.setShipFrom(shipFrom);
	     */
	    /** ***********ShipFrom********************* */

	    /** *************Payment Information***************** */
	    PaymentInfoType payInfo = new PaymentInfoType();
	    ShipmentChargeType shpmntCharge = new ShipmentChargeType();
	    shpmntCharge.setType(etiqueta.getIdservicio());
	    BillShipperType billShipper = new BillShipperType();
	    billShipper.setAccountNumber(SHIPPER_NUMBER);
	    shpmntCharge.setBillShipper(billShipper);
	    ShipmentChargeType[] shpmntChargeArray = { shpmntCharge };
	    List shipmentChargesList = payInfo.getShipmentCharge();
	    shipmentChargesList.add(shpmntChargeArray[0]);
	    shpmnt.setPaymentInformation(payInfo);
	    /** *************Payment Information***************** */

	    /** ********Service********************** */
	    ServiceType service = new ServiceType();
	    service.setCode(etiqueta.getIdservicio());
	    service.setDescription(etiqueta.getDescripcion_servicio());
	    shpmnt.setService(service);
	    /** ********Service********************** */

	    /** ******************Package***************** */
	    PackageType pkg1 = new PackageType();
	    PackagingType pkgingType = new PackagingType();
	    pkgingType.setCode(etiqueta.getTipoempaque());
	    pkgingType.setDescription(UtilsUPS.getTipoEmpaqueUPS(etiqueta
		    .getTipoempaque()));
	    pkg1.setPackaging(pkgingType);

	    DimensionsType dimensionsType = new DimensionsType();
	    ShipUnitOfMeasurementType unitOfMeas = new ShipUnitOfMeasurementType();
	    unitOfMeas.setCode(etiqueta.getDimensionmedida());
	    unitOfMeas.setDescription(UtilsUPS.getMedidaDimension(etiqueta
		    .getDimensionmedida()));
	    dimensionsType.setUnitOfMeasurement(unitOfMeas);
	    dimensionsType.setLength(etiqueta.getLargo() + "");
	    dimensionsType.setWidth(etiqueta.getAncho() + "");
	    dimensionsType.setHeight(etiqueta.getAlto() + "");
	    pkg1.setDimensions(dimensionsType);

	    PackageType[] pkgArray = { pkg1 };
	    PackageWeightType weight = new PackageWeightType();
	    weight.setWeight(etiqueta.getPesofisico() + "");
	    ShipUnitOfMeasurementType shpUnitOfMeas = new ShipUnitOfMeasurementType();
	    shpUnitOfMeas.setCode(etiqueta.getPesomedida());
	    shpUnitOfMeas.setDescription(UtilsUPS.getMedidaPeso(etiqueta
		    .getPesomedida()));
	    weight.setUnitOfMeasurement(shpUnitOfMeas);
	    pkg1.setPackageWeight(weight);
	    List packageList = shpmnt.getPackage();
	    packageList.add(pkgArray[0]);

	    /** ******************Package***************** */

	    /** **********Label Specification ******************** */
	    LabelSpecificationType labelSpecType = new LabelSpecificationType();
	    LabelImageFormatType labelImageFormat = new LabelImageFormatType();
	    labelImageFormat.setCode("GIF");
	    labelImageFormat.setDescription("GIF");
	    labelSpecType.setLabelImageFormat(labelImageFormat);

	    labelSpecType.setHTTPUserAgent("Mozilla/4.5");
	    shipRequest.setLabelSpecification(labelSpecType);
	    /** ***********Label Specification********************* */

	    shpmnt.setDescription("ENVIA");
	    shipRequest.setShipment(shpmnt);

	    /** ************UPSSE************************** */
	    UPSSecurity upsSecurity = new UPSSecurity();
	    UsernameToken usernameToken = new UsernameToken();
	    usernameToken.setUsername(USER_NAME);
	    usernameToken.setPassword(PASSWORD);
	    upsSecurity.setUsernameToken(usernameToken);
	    ServiceAccessToken accessToken = new ServiceAccessToken();
	    accessToken.setAccessLicenseNumber(LICENSE_NUMBER);
	    upsSecurity.setServiceAccessToken(accessToken);

	    /** ************UPSSE***************************** */
	    logger.debug("shipRequest:" + shipRequest.toString());
	    ShipmentResponse shipResponse = shipPort.processShipment(
		    shipRequest, upsSecurity);

	    logger.debug("Transaction Status: "
		    + shipResponse.getResponse().getResponseStatus()
			    .getDescription());
	    logger.debug("Shipment 1Z number: "
		    + shipResponse.getShipmentResults()
			    .getShipmentIdentificationNumber());
	    logger.debug(shipResponse.getShipmentResults().getPackageResults()
		    .get(0).getShippingLabel().getGraphicImage());

	    statusCode = shipResponse.getResponse().getResponseStatus()
		    .getCode();
	    description = shipResponse.getResponse().getResponseStatus()
		    .getDescription();
	    logger.debug("statusCode:" + statusCode + ",description:"
		    + description);

	    guia_internacional = shipResponse.getShipmentResults()
		    .getPackageResults().get(0).getShippingLabel()
		    .getGraphicImage();

	    logger.debug("creando gif: " + PATH_GIF_UPS + guia_internacional);
	    Base64 b = new Base64();
	    byte[] imageBytes = b.decode(guia_internacional);
	    FileOutputStream fos = new FileOutputStream(PATH_GIF_UPS
		    + guia_internacional + ".gif");
	    fos.write(imageBytes);
	    fos.close();

	    logger.debug("imagen gif creada: " + PATH_GIF_UPS
		    + guia_internacional);

	    return guia_internacional;

	} catch (Exception e) {

	    if (e instanceof ShipmentErrorMessage) {
		ShipmentErrorMessage err = (ShipmentErrorMessage) e;
		Errors faultMessage = err.getFaultInfo();
		description = faultMessage.getErrorDetail().get(0)
			.getPrimaryErrorCode().getDescription();
		statusCode = faultMessage.getErrorDetail().get(0)
			.getPrimaryErrorCode().getCode();

		System.out.println("\nThe Error Response: Code=" + statusCode
			+ " Decription=" + description);
	    } else {
		statusCode = e.getMessage();
		description = e.toString();

	    }
	    logger.error("statusCode:" + statusCode + ", description:"
		    + description);
	    throw new Exception("Error al obtener la info de UPS:statusCode->"
		    + statusCode + ", " + description);
	}

    }

    public  ShipperType getShipperType(EtiquetaRotulacionDTO etiqueta,String ups_shipper_number) {
	ShipperType shipper = new ShipperType();

	shipper.setShipperNumber(ups_shipper_number);
	shipper.setName("ADRIAN MORALES");
	shipper.setAttentionName("Mr.ABC");

	ShipPhoneType shipperPhone = new ShipPhoneType();
	shipperPhone.setNumber("57295131");
	// shipperPhone.setExtension("1");
	shipper.setPhone(shipperPhone);

	ShipAddressType shipperAddress = new ShipAddressType();
	List<String> addressLineList = shipperAddress.getAddressLine();
	addressLineList.add("ANTONIO J TIRADO 2");
	addressLineList.add("EJERCITO DE ORIENTE");
	addressLineList.add("IZTAPALAPA");
	shipperAddress.setCity("MEXICO CITY");
	shipperAddress.setPostalCode("09230");
	shipperAddress.setStateProvinceCode("DF");
	shipperAddress.setCountryCode("MX");

	return shipper;
    }

    public  ShipAddressType getShipAddressType(EtiquetaRotulacionDTO etiqueta) {

	ShipAddressType shipperAddress = new ShipAddressType();
	List<String> addressLineList = shipperAddress.getAddressLine();
	addressLineList.add("ANTONIO J TIRADO 2");
	addressLineList.add("EJERCITO DE ORIENTE");
	addressLineList.add("IZTAPALAPA");
	shipperAddress.setCity("MEXICO CITY");
	shipperAddress.setPostalCode("09230");
	shipperAddress.setStateProvinceCode("DF");
	shipperAddress.setCountryCode("MX");

	return shipperAddress;
    }

    public  ShipToType getShipToType(EtiquetaRotulacionDTO etiqueta) {
	ShipToType shipTo = new ShipToType();
	shipTo.setName("Happy Dog Pet Supply");
	shipTo.setAttentionName("1160b_74");

	ShipPhoneType shipToPhone = new ShipPhoneType();
	shipToPhone.setNumber("1234567898");
	shipTo.setPhone(shipToPhone);

	return shipTo;
    }

    public  ShipToAddressType getShipToAddressType(EtiquetaRotulacionDTO etiqueta) {
	ShipToAddressType shipToAddress = new ShipToAddressType();
	List<String> ShipToAddressLineList = shipToAddress.getAddressLine();
	ShipToAddressLineList.add("750-47TH St Edmonton");
	shipToAddress.setCity("Rosewell");
	shipToAddress.setStateProvinceCode("GA");
	shipToAddress.setPostalCode("30004");
	shipToAddress.setCountryCode("US");

	return shipToAddress;
    }

    public PaymentInfoType getPaymentInfoType(String tipopago,String ups_shipper_number) {
	PaymentInfoType payInfo = new PaymentInfoType();
	ShipmentChargeType shpmntCharge = new ShipmentChargeType();
	shpmntCharge.setType(tipopago); //"01");
	BillShipperType billShipper = new BillShipperType();
	billShipper.setAccountNumber(ups_shipper_number);
	shpmntCharge.setBillShipper(billShipper);
	ShipmentChargeType[] shpmntChargeArray = { shpmntCharge };
	List shipmentChargesList = payInfo.getShipmentCharge();
	shipmentChargesList.add(shpmntChargeArray[0]);

	return payInfo;
    }

    public ServiceType getServiceType(String idservice, String description) {
	ServiceType service = new ServiceType();
	service.setCode(idservice);
	service.setDescription(description);
	return service;

    }

    public PackageType getPackageDimensionsType(EtiquetaRotulacionDTO etiqueta) {
	PackageType pkg1 = new PackageType();
	PackagingType pkgingType = new PackagingType();
	pkgingType.setCode("00");
	pkgingType.setDescription("unknown");
	pkg1.setPackaging(pkgingType);

	DimensionsType dimensionsType = new DimensionsType();
	ShipUnitOfMeasurementType unitOfMeas = new ShipUnitOfMeasurementType();
	unitOfMeas.setCode("CM");
	unitOfMeas.setDescription("Centimeters");
	dimensionsType.setUnitOfMeasurement(unitOfMeas);
	dimensionsType.setLength("0");
	dimensionsType.setWidth("0");
	dimensionsType.setHeight("0");
	pkg1.setDimensions(dimensionsType);

	return pkg1;
    }

    public PackageWeightType getPackageWeightType(String weight_value,
	    String measurementCode, String measurementDescription) {
	PackageWeightType weight = new PackageWeightType();
	weight.setWeight(weight_value);
	ShipUnitOfMeasurementType shpUnitOfMeas = new ShipUnitOfMeasurementType();
	shpUnitOfMeas.setCode(measurementCode);
	shpUnitOfMeas.setDescription(measurementDescription);
	weight.setUnitOfMeasurement(shpUnitOfMeas);

	return weight;

    }

    public LabelSpecificationType getLabelSpecificationType() {

	LabelSpecificationType labelSpecType = new LabelSpecificationType();
	LabelImageFormatType labelImageFormat = new LabelImageFormatType();
	labelImageFormat.setCode("GIF");
	labelImageFormat.setDescription("GIF");
	labelSpecType.setLabelImageFormat(labelImageFormat);

	labelSpecType.setHTTPUserAgent("Mozilla/4.5");
	return labelSpecType;

    }

    public UPSSecurity getLabelSpecificationType(String userName,
	    String password, String accessKey) {
	UPSSecurity upsSecurity = new UPSSecurity();
	UsernameToken usernameToken = new UsernameToken();
	usernameToken.setUsername(userName);
	usernameToken.setPassword(password);
	upsSecurity.setUsernameToken(usernameToken);
	ServiceAccessToken accessToken = new ServiceAccessToken();
	accessToken.setAccessLicenseNumber(accessKey);
	upsSecurity.setServiceAccessToken(accessToken);

	return upsSecurity;
    }

}
