
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package andrea.cadenasuministro;

import andrea.cadenasuministro.ArrayOfTracking;
import com.administracion.andrea.dto.GuiaEmbarque;
import com.administracion.andrea.dto.GuiaEmbarqueResponse;
import com.administracion.andrea.dto.Paquete;
import com.administracion.idao.IParamsSistemaDAO;
import com.innovargia.dtos.ConsultarTrackingRestful;
import com.innovargia.salesmanager.dtos.UsuarioDTO;
import com.innovargia.utils.UtilsStringFechas;
import com.innovargia.ws.mensajes.MensajesError;
import javax.jws.WebService;
import org.springframework.beans.factory.annotation.Autowired;
import com.innovargia.ws.ibo.IWSUsuarioBO;
import java.util.ArrayList;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.web.client.RestTemplate;

/**
 * This class was generated by Apache CXF 2.7.18
 * 2016-09-09T10:07:57.645-05:00
 * Generated source version: 2.7.18
 * 
 */

@javax.jws.WebService(
                      serviceName = "ServicioPaqueteria",
                      portName = "ServicioPaqueteriaSoap",
                      targetNamespace = "http://cadenasuministro.andrea/",
                      wsdlLocation = "http://localhost:5771/ServicioPaqueteriasEstandar.asmx?wsdl",
                      endpointInterface = "andrea.cadenasuministro.ServicioPaqueteriaSoap")
                      
public class ServicioPaqueteriaSoapImpl1 implements ServicioPaqueteriaSoap {

      private static final Logger logger = LoggerFactory
            .getLogger(ServicioPaqueteriaSoapImpl1.class);
      
      
    @Autowired
    IWSUsuarioBO iUsuarioBO;
    
    @Autowired
    IParamsSistemaDAO iParamsSistemaDAO;
    
  // final String uri = "http://localhost:8080/autodocweb/rest/andrea/";
    //final String uri = "http://s16119.svrdatacenter.com:8080/autodocweb/rest/andrea/";
    
    public andrea.cadenasuministro.ArrayOfTracking 
        consultarTracking(java.lang.String usuario, java.lang.String contrasena, java.lang.String guiasEmbarque) 
        throws Exception{
       
        UsuarioDTO usuarioDto = new UsuarioDTO();
        usuarioDto.setLogin(usuario);
        usuarioDto.setPassword(contrasena);
        String estatus = "";
        
         String uri_final=createURL("consultarTracking");
           andrea.cadenasuministro.ArrayOfTracking arreglo = new ArrayOfTracking();
        
        GuiaEmbarqueResponse result = null;
        try{
             usuarioDto = iUsuarioBO.getUsuarioLogin(usuarioDto);
             if (usuarioDto==null){
                 throw new UnsupportedOperationException(MensajesError.ERROR_ACCESO);
             }
             
              com.administracion.andrea.dto.ConsultarTracking tracking = 
                      new com.administracion.andrea.dto.ConsultarTracking();
            tracking.setGuiasEmbarque(guiasEmbarque);
            tracking.setUsuario(usuario);
            tracking.setContrasena(contrasena);
                //Create a list for the message converters
              RestTemplate restTemplate = new RestTemplate();
             List<HttpMessageConverter<?>> messageConverters = new ArrayList<HttpMessageConverter<?>>();

             //Add the Jackson Message converter
             messageConverters.add(new MappingJackson2HttpMessageConverter());

             //Add the message converters to the restTemplate
             restTemplate.setMessageConverters(messageConverters); 
         
            result = restTemplate.postForObject( uri_final,
                   tracking, GuiaEmbarqueResponse.class);
          andrea.cadenasuministro.Tracking tra_andrea = new andrea.cadenasuministro.Tracking();

            List<com.administracion.andrea.dto.Tracking> lista = result.getLista_trakings();
            String fecha ="";
            for (com.administracion.andrea.dto.Tracking obj : lista) {
                tra_andrea = new andrea.cadenasuministro.Tracking();
                tra_andrea.setEstatusGuia(obj.getEstatusGuia());
               
              
                if ((obj.getFechaMovimiento()!=null) && (!obj.getFechaMovimiento().trim().isEmpty())){
                    fecha = obj.getFechaMovimiento().trim().replaceAll( "AM", "");
                     fecha = obj.getFechaMovimiento().trim().replaceAll( "PM", "");
                     fecha = fecha.trim();
                     Date date =  UtilsStringFechas.parseDate("dd-MM-yyyy hh:mm:ss", obj.getFechaMovimiento() );
                     
                     if ( date==null){
                         date =  UtilsStringFechas.parseDate("dd-MM-yyyy hh:mm", obj.getFechaMovimiento() );
                     }
                     GregorianCalendar gregory = new GregorianCalendar();
                    //Date date = new Date();
                    gregory.setTime(date);

                    XMLGregorianCalendar calendar = DatatypeFactory.newInstance()
                    .newXMLGregorianCalendar(gregory);
                
                    tra_andrea.setFechaMovimiento(calendar);
                }
                //25-02-2013 10:40:00
               

                    tra_andrea.setGuiaEmbarque(obj.getGuiaEmbarque());
                tra_andrea.setIdentificacionID(obj.getIdentificacionID());
                tra_andrea.setObservaciones(obj.getObservaciones());
                tra_andrea.setPersonaRecibio(obj.getPersonaRecibio());
                tra_andrea.setTipoIdentificacion(obj.getTipoIdentificacion());
                tra_andrea.setUbicacion(obj.getUbicacion());
                
              arreglo.getTracking().add(tra_andrea);
            }

        }catch(Exception e){
            estatus = "ERROR " + e.getMessage();
                    
            logger.debug("Error:" + e.getMessage());
            e.printStackTrace();
        }
          if (estatus.trim().toUpperCase().startsWith("ERROR")){
                throw  new Exception(estatus);
            }
         return arreglo;
    }

    private static List<HttpMessageConverter<?>> getMessageConverters() {
     List<HttpMessageConverter<?>> converters = new ArrayList<HttpMessageConverter<?>>();
        converters.add(new MappingJackson2HttpMessageConverter());
        return converters;
} 
    
    public java.lang.String generarGuiaEmbarque(java.lang.String usuario, 
            java.lang.String contrasena, java.lang.String folioOrdenServicio, 
            andrea.cadenasuministro.DetalleEnvio detalleEnvio, 
            andrea.cadenasuministro.Destinatario destinatario, 
            andrea.cadenasuministro.ArrayOfPaquete paquetes, 
            java.lang.String referenciaGuia) throws Exception{

        UsuarioDTO usuarioDto = new UsuarioDTO();
        usuarioDto.setLogin(usuario);
        usuarioDto.setPassword(contrasena);
        String idguia = "";
          
           String uri_final=createURL("generarGuiaEmbarque");
        try{
             usuarioDto = iUsuarioBO.getUsuarioLogin(usuarioDto);
             if (usuarioDto==null){
                 throw new UnsupportedOperationException(MensajesError.ERROR_ACCESO);
             }
             
            GuiaEmbarque guiaEmbarque = new GuiaEmbarque();
            guiaEmbarque.setUsuario(usuario);
            guiaEmbarque.setContrasena(contrasena);
            guiaEmbarque.setFolioOrdenServicio(folioOrdenServicio);
            
            com.administracion.andrea.dto.DetalleEnvio detalleEnvioDTO = new 
                    com.administracion.andrea.dto.DetalleEnvio();
            com.administracion.andrea.dto.Destinatario destino = new 
                    com.administracion.andrea.dto.Destinatario();
            
            destino.setApellidoMaterno(destinatario.getApellidoMaterno());
            destino.setApellidoPaterno(destinatario.getApellidoPaterno());
            destino.setCalle(destinatario.getCalle());
            destino.setCiudad(destinatario.getCiudad());
            destino.setClaveCliente(destinatario.getClaveCliente());
            destino.setCodigoPostal(destinatario.getCodigoPostal());
            destino.setColonia(destinatario.getColonia());
            destino.setConvenio(destinatario.getConvenio());
            destino.setEntreCalles(destinatario.getEntreCalles());
            destino.setEstado(destinatario.getEstado());
            destino.setNombre(destinatario.getNombre());
            destino.setNumero(destinatario.getNumero());
            destino.setPais(destinatario.getPais());
            destino.setReferencia(destinatario.getReferencia());
            destino.setTelefono(destinatario.getTelefono());
             
            com.administracion.andrea.dto.Paquete paquete = new 
               com.administracion.andrea.dto.Paquete();
             
            List<com.administracion.andrea.dto.Paquete> arr_paquetes = new 
                    ArrayList<com.administracion.andrea.dto.Paquete>();
            
            List<andrea.cadenasuministro.Paquete> paquetes_andrea = paquetes.getPaquete();
            com.administracion.andrea.dto.Paquete paqrest = new Paquete();
            for(andrea.cadenasuministro.Paquete pa:paquetes_andrea){
                paqrest.setCantidad(pa.getCantidad());
                paqrest.setDescripcionMercancia(pa.getDescripcionMercancia());
                paqrest.setPaqueteID(pa.getPaqueteID());
               
                paqrest.setPeso(pa.getPeso().floatValue());
                paqrest.setTipoMercancia(pa.getTipoMercancia());
                paqrest.setValor(pa.getValor().floatValue());
                paqrest.setVolumen(pa.getValor().floatValue());
                arr_paquetes.add(paqrest);
            }
            
            guiaEmbarque.setDetalleEnvio(detalleEnvioDTO);
            guiaEmbarque.setDestinatario(destino);
            guiaEmbarque.setPaquetes(arr_paquetes);
            guiaEmbarque.setReferenciaGuia(referenciaGuia);
            guiaEmbarque.setPaquetes(arr_paquetes);

            RestTemplate restTemplate = new RestTemplate();
            GuiaEmbarqueResponse result = restTemplate.postForObject( uri_final, 
                    guiaEmbarque, GuiaEmbarqueResponse.class);

            idguia = result.getGuiaReferencia()==null?"":result.getGuiaReferencia();
           
        }catch(Exception e){
            idguia = "ERROR " + e.getMessage();
             e.printStackTrace();
            //return e.getMessage();
        }
       if (idguia.trim().toUpperCase().startsWith("ERROR")){
                throw  new Exception(idguia);
            }
            
             return idguia;
      
       
    }

    public byte[] generarEtiquetaGuia(java.lang.String usuario,
            java.lang.String contrasena, java.lang.String guiaEmbarque) throws Exception {
         UsuarioDTO usuarioDto = new UsuarioDTO();
        usuarioDto.setLogin(usuario);
        usuarioDto.setPassword(contrasena);
        String estatus = "";
        
         String uri_final=createURL("generarEtiquetaGuia");

        andrea.cadenasuministro.ArrayOfTracking arreglo = new ArrayOfTracking();
        GuiaEmbarqueResponse result =null;
        try{
             usuarioDto = iUsuarioBO.getUsuarioLogin(usuarioDto);
             if (usuarioDto==null){
                 throw new UnsupportedOperationException(MensajesError.ERROR_ACCESO);
             }
             
             ConsultarTrackingRestful consultaTracking = new ConsultarTrackingRestful();
		consultaTracking.setUsuario(usuario);
		consultaTracking.setContrasena(contrasena);
		consultaTracking.setGuiasEmbarque(guiaEmbarque);
              RestTemplate restTemplate = new RestTemplate();
            
            result = restTemplate.postForObject(uri_final,
                    consultaTracking, GuiaEmbarqueResponse.class);
            
            estatus = result.getGenerarGuiaEmbarqueResult()==null?"":result.getGenerarGuiaEmbarqueResult();
            
         
             
           // return result.getGenerarEtiquetaGuiaResult();

        }catch(Exception e){
            estatus = "ERROR " + e.getMessage();
            logger.debug("Error en generarEtiquetaGuia:" + e.getMessage());
            e.printStackTrace();
        }
            if (estatus.trim().toUpperCase().startsWith("ERROR")){
                throw  new Exception(estatus);
            }
        return result!=null? result.getGenerarEtiquetaGuiaResult():null;
    }

    
    public java.lang.String cancelarGuiaEmbarque(java.lang.String usuario, 
            java.lang.String contrasena, java.lang.String guiaEmbarque) throws Exception {
         UsuarioDTO usuarioDto = new UsuarioDTO();
        usuarioDto.setLogin(usuario);
        usuarioDto.setPassword(contrasena);
        String estatus = "";
        
         String uri_final=createURL("cancelarGuiaEmbarque");

        andrea.cadenasuministro.ArrayOfTracking arreglo = new ArrayOfTracking();
         GuiaEmbarqueResponse result=null;
        try{
             usuarioDto = iUsuarioBO.getUsuarioLogin(usuarioDto);
             if (usuarioDto==null){
                 throw new UnsupportedOperationException(MensajesError.ERROR_ACCESO);
             }
             
             ConsultarTrackingRestful consultaTracking = new ConsultarTrackingRestful();
		consultaTracking.setUsuario(usuario);
		consultaTracking.setContrasena(contrasena);
		consultaTracking.setGuiasEmbarque(guiaEmbarque);
              RestTemplate restTemplate = new RestTemplate();
            
              result = restTemplate.postForObject(uri_final,
                    consultaTracking, GuiaEmbarqueResponse.class);
            
            estatus = result.getCancelarGuiaEmbarqueResult()==null?"":result.getCancelarGuiaEmbarqueResult();
            //return result.getCancelarGuiaEmbarqueResult();

        }catch(Exception e){
            estatus = "ERROR " + e.getMessage();
            logger.debug("Error en cancelarGuiaEmbarque:" + e.getMessage());
            e.printStackTrace();
        }
        
         if (estatus.trim().toUpperCase().startsWith("ERROR")){
                throw  new Exception(estatus);
            }
        return result!=null?result.getCancelarGuiaEmbarqueResult():null;
    }

    public byte[] generarManifiestoGuia(java.lang.String usuario, 
            java.lang.String contrasena, andrea.cadenasuministro.ArrayOfString numerosGuias, 
            java.lang.String chofer, java.lang.String placas, 
            java.lang.String camion, int numeroManifiesto) throws Exception {
        
         UsuarioDTO usuarioDto = new UsuarioDTO();
        usuarioDto.setLogin(usuario);
        usuarioDto.setPassword(contrasena);
        String estatus = "";
        

        String uri_final=createURL("generarManifiestoGuia");
        andrea.cadenasuministro.ArrayOfTracking arreglo = new ArrayOfTracking();
        
        GuiaEmbarqueResponse result=null;
        try{
             usuarioDto = iUsuarioBO.getUsuarioLogin(usuarioDto);
             if (usuarioDto==null){
                 throw new UnsupportedOperationException(MensajesError.ERROR_ACCESO);
             }
             
            List<String> arr_guias = numerosGuias.getString();
            String guias="";
            for(String cadena:arr_guias){
                guias = guias + cadena + " ";
            }
            guias = guias.trim().replace(" ", ",");
            logger.debug("Antes de invocar WS:" + guias);
            
             ConsultarTrackingRestful consultaTracking = new ConsultarTrackingRestful();
             consultaTracking.setCamion(camion);
             consultaTracking.setChofer(chofer);
             consultaTracking.setPlacas(placas);
             consultaTracking.setNumeroManifiesto(numeroManifiesto);
		consultaTracking.setUsuario(usuario);
		consultaTracking.setContrasena(contrasena);
		consultaTracking.setGuiasEmbarque(guias);
        logger.debug("invocar WS:" + uri_final);
		RestTemplate restTemplate = new RestTemplate();
		result = restTemplate.postForObject(uri_final, consultaTracking,
				GuiaEmbarqueResponse.class);
              logger.debug("Despues invocar WS:" + uri_final);
              
              estatus = result.getGenerarGuiaEmbarqueResult()==null?"":result.getGenerarGuiaEmbarqueResult();
            
           

        }catch(Exception e){
            estatus = "ERROR " + e.getMessage();
            logger.debug( e.getMessage());
            e.printStackTrace();
        }
        if (estatus.trim().toUpperCase().startsWith("ERROR")){
               throw  new Exception(estatus);
            }
             
            return result !=null?result.getGenerarManifiestoGuiaResult():null;
        //return null;
    }
     public boolean validarCobertura(java.lang.String usuario, 
             java.lang.String contrasena, java.lang.String codigoPostal)throws Exception{
      
         
           UsuarioDTO usuarioDto = new UsuarioDTO();
        usuarioDto.setLogin(usuario);
        usuarioDto.setPassword(contrasena);
        String estatus = "";
        
           String uri_final=createURL("validarCobertura");
        andrea.cadenasuministro.ArrayOfTracking arreglo = new ArrayOfTracking();
        GuiaEmbarqueResponse result= null;
        try{
             usuarioDto = iUsuarioBO.getUsuarioLogin(usuarioDto);
             if (usuarioDto==null){
                 throw new UnsupportedOperationException(MensajesError.ERROR_ACCESO);
             }
             
             
            GuiaEmbarque tracking = new GuiaEmbarque();
          
            ConsultarTrackingRestful consultaTracking = new ConsultarTrackingRestful();
		consultaTracking.setUsuario(usuario);
		consultaTracking.setContrasena(contrasena);
		consultaTracking.setCodigoPostal(codigoPostal);

		RestTemplate restTemplate = new RestTemplate();
		result = restTemplate.postForObject(uri_final, consultaTracking,
				GuiaEmbarqueResponse.class);

                estatus = result.getGenerarGuiaEmbarqueResult()==null?"":result.getGenerarGuiaEmbarqueResult();
            
            //return result.isTieneCobetura();

        }catch(Exception e){
            estatus = "ERROR " + e.getMessage();
            logger.debug("Error en validarCobertura:" + e.getMessage());
            e.printStackTrace();
        }
         if (estatus.trim().toUpperCase().startsWith("ERROR")){
               throw  new Exception(estatus);
            }
        return result!=null?result.isTieneCobetura():false;
        
    }

    public boolean validarConvenio(java.lang.String usuario, java.lang.String 
            contrasena, java.lang.String claveConvenio)throws Exception {
            UsuarioDTO usuarioDto = new UsuarioDTO();
        usuarioDto.setLogin(usuario);
        usuarioDto.setPassword(contrasena);
        String estatus = "";
        GuiaEmbarqueResponse result=null;
            String uri_final=createURL("validarConvenio");
       
        try{
             usuarioDto = iUsuarioBO.getUsuarioLogin(usuarioDto);
             if (usuarioDto==null){
                 throw new UnsupportedOperationException(MensajesError.ERROR_ACCESO);
             }
             
             
                      
            ConsultarTrackingRestful consultaTracking = new ConsultarTrackingRestful();
            RestTemplate restTemplate = new RestTemplate();
            result = restTemplate.postForObject( uri_final, 
                    consultaTracking, GuiaEmbarqueResponse.class);
            
            estatus = result.getGenerarGuiaEmbarqueResult()==null?"":result.getGenerarGuiaEmbarqueResult();
            
           

        }catch(Exception e){
            estatus = "ERROR " + e.getMessage();
            logger.debug("Error en validarConvenio:" + e.getMessage());
            e.printStackTrace();
        }
          if (estatus.trim().toUpperCase().startsWith("ERROR")){
               throw  new Exception(estatus);
            }
        return result!=null?result.isConvenioCorrecto():false;
    }
    

    private String createURL(String metodo){
         String uri_final="";
         String parametro = "url.adw";
          try {
              uri_final = iParamsSistemaDAO.getValorPropiedad(parametro,"SKY4SOL");
          } catch (Exception ex) {
              logger.debug("NO EXISTE PARAMETRO " + parametro);
          }
          
          uri_final = uri_final + "/rest/andrea/"+ metodo;
          
         logger.debug("uri_final:" + uri_final);
         return uri_final;
    }
}
